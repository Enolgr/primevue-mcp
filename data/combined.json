{
  "accordion": {
    "title": "Accordion",
    "description": "Accordion groups a collection of contents in panels.",
    "examples": [
      "<Accordion value=\"0\">\n    <AccordionPanel value=\"0\">\n        <AccordionHeader>Header I</AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n    <AccordionPanel value=\"1\">\n        <AccordionHeader>Header II</AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim\n                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n    <AccordionPanel value=\"2\">\n        <AccordionHeader>Header III</AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa\n                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n</Accordion>",
      "<Accordion value=\"0\">\n    <AccordionPanel v-for=\"tab in tabs\" :key=\"tab.title\" :value=\"tab.value\">\n        <AccordionHeader>{{ tab.title }}</AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">{{ tab.content }}</p>\n        </AccordionContent>\n    </AccordionPanel>\n</Accordion>",
      "<Accordion :value=\"['0']\" multiple>\n    <AccordionPanel value=\"0\">\n        <AccordionHeader>Header I</AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n    <AccordionPanel value=\"1\">\n        <AccordionHeader>Header II</AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim\n                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n    <AccordionPanel value=\"2\">\n        <AccordionHeader>Header III</AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa\n                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n</Accordion>",
      "<Accordion :value=\"['0']\" multiple>\n    <AccordionPanel value=\"0\">\n        <AccordionHeader>Header I</AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n    <AccordionPanel value=\"1\">\n        <AccordionHeader>Header II</AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim\n                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n    <AccordionPanel value=\"2\">\n        <AccordionHeader>Header III</AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa\n                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n    <AccordionPanel value=\"3\" disabled>\n        <AccordionHeader>Header IV</AccordionHeader>\n    </AccordionPanel>\n</Accordion>",
      "<div class=\"flex mb-4 gap-2 justify-end\">\n    <Button @click=\"active = '0'\" rounded label=\"1\" class=\"w-8 h-8 p-0\" :outlined=\"active !== '0'\" />\n    <Button @click=\"active = '1'\" rounded label=\"2\" class=\"w-8 h-8 p-0\" :outlined=\"active !== '1'\" />\n    <Button @click=\"active = '2'\" rounded label=\"3\" class=\"w-8 h-8 p-0\" :outlined=\"active !== '2'\" />\n</div>\n\n<Accordion v-model:value=\"active\">\n    <AccordionPanel value=\"0\">\n        <AccordionHeader>Header I</AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n    <AccordionPanel value=\"1\">\n        <AccordionHeader>Header II</AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim\n                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n    <AccordionPanel value=\"2\">\n        <AccordionHeader>Header III</AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa\n                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n</Accordion>",
      "<Accordion value=\"0\" expandIcon=\"pi pi-plus\" collapseIcon=\"pi pi-minus\">\n    <AccordionPanel value=\"0\">\n        <AccordionHeader>\n            <span class=\"flex items-center gap-2 w-full\">\n                <Avatar image=\"https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png\" shape=\"circle\" />\n                <span class=\"font-bold whitespace-nowrap\">Amy Elsner</span>\n                <Badge value=\"3\" class=\"ml-auto mr-2\" />\n            </span>\n        </AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n    <AccordionPanel value=\"1\">\n        <AccordionHeader>\n            <span class=\"flex items-center gap-2 w-full\">\n                <Avatar image=\"https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png\" shape=\"circle\" />\n                <span class=\"font-bold whitespace-nowrap\">Onyama Limba</span>\n                <Badge value=\"4\" class=\"ml-auto mr-2\" />\n            </span>\n        </AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim\n                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n    <AccordionPanel value=\"2\">\n        <AccordionHeader>\n            <span class=\"flex items-center gap-2 w-full\">\n                <Avatar image=\"https://primefaces.org/cdn/primevue/images/avatar/ionibowcher.png\" shape=\"circle\" />\n                <span class=\"font-bold whitespace-nowrap\">Ioni Bowcher</span>\n                <Badge value=\"2\" class=\"ml-auto mr-2\" />\n            </span>\n        </AccordionHeader>\n        <AccordionContent>\n            <p class=\"m-0\">\n                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa\n                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n            </p>\n        </AccordionContent>\n    </AccordionPanel>\n</Accordion>"
    ],
    "props": {
      "value": "string | string[] | number | number[] | null | undefined",
      "multiple": "boolean | undefined",
      "activeIndex": "number | number[] | null | undefined",
      "lazy": "boolean | undefined",
      "expandIcon": "string | undefined",
      "collapseIcon": "string | undefined",
      "tabindex": "number | undefined",
      "selectOnFocus": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<AccordionPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:value'": "void",
      "'update:activeIndex'": "void",
      "'tab-open'": "void",
      "'tab-close'": "void",
      "'tab-click'": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "value",
        "handler",
        "isItemActive",
        "updateValue",
        "isAccordionTab",
        "getTabProp",
        "getKey",
        "getHeaderPT",
        "getContentPT",
        "getTabPT",
        "onTabClick",
        "tabs",
        "if",
        "hasAccordionTab"
      ]
    }
  },
  "accordioncontent": {
    "props": {
      "as": "string | Component | undefined",
      "asChild": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<AccordionContentPassThroughOptions>",
      "ptOptions": "PassThroughOptions"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "id",
        "ariaLabelledby",
        "attrs",
        "a11yAttrs",
        "ptParams"
      ]
    }
  },
  "accordionheader": {
    "props": {
      "as": "string | Component | undefined",
      "asChild": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<AccordionHeaderPassThroughOptions>",
      "ptOptions": "PassThroughOptions"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "onFocus",
        "onClick",
        "onKeydown",
        "onArrowDownKey",
        "onArrowUpKey",
        "onHomeKey",
        "onEndKey",
        "onEnterKey",
        "findPanel",
        "findHeader",
        "findNextPanel",
        "findPrevPanel",
        "findFirstPanel",
        "findLastPanel",
        "changeActiveValue",
        "changeFocusedPanel",
        "id",
        "ariaControls",
        "attrs",
        "asAttrs",
        "a11yAttrs",
        "ptParams",
        "dataP"
      ]
    }
  },
  "accordionpanel": {
    "props": {
      "value": "string | number | undefined",
      "disabled": "boolean | undefined",
      "as": "string | Component | undefined",
      "asChild": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<AccordionPanelPassThroughOptions>",
      "ptOptions": "PassThroughOptions"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "active",
        "attrs",
        "a11yAttrs",
        "ptParams"
      ]
    }
  },
  "accordiontab": {
    "props": {
      "header": "string | undefined",
      "headerStyle": "any",
      "headerClass": "any",
      "headerProps": "HTMLAttributes | undefined",
      "headerActionProps": "AnchorHTMLAttributes | undefined",
      "contentStyle": "any",
      "contentClass": "any",
      "contentProps": "HTMLAttributes | undefined",
      "disabled": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<AccordionTabPassThroughOptions>",
      "ptOptions": "PassThroughOptions"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "mounted"
      ]
    }
  },
  "animateonscroll": {
    "title": "AnimateOnScroll",
    "description": "AnimateOnScroll is used to apply animations to elements when entering or leaving the viewport during scrolling.",
    "examples": [
      "<div class=\"flex flex-wrap justify-center gap-8\">\n    <div\n        v-animateonscroll=\"{ enterClass: 'animate-enter fade-in-10 slide-in-from-l-8 animate-duration-1000', leaveClass: 'animate-leave fade-out-0' }\"\n        class=\"flex flex-col border border-surface shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4\"\n    >\n        <div class=\"rounded-full bg-primary text-primary-contrast w-12 h-12 flex items-center justify-center\">\n            <i class=\"pi pi-user !text-2xl\"></i>\n        </div>\n        <span class=\"text-2xl font-bold\">Individual</span>\n        <span class=\"text-muted-color text-center\">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>\n    </div>\n    <div\n        v-animateonscroll=\"{ enterClass: 'animate-enter fade-in-10 animate-duration-1000', leaveClass: 'animate-leave fade-out-0' }\"\n        class=\"flex flex-col border border-surface shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4\"\n    >\n        <div class=\"rounded-full bg-primary text-primary-contrast w-12 h-12 flex items-center justify-center\">\n            <i class=\"pi pi-users !text-2xl\"></i>\n        </div>\n        <span class=\"text-2xl font-bold\">Team</span>\n        <span class=\"text-muted-color text-center\">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>\n    </div>\n    <div\n        v-animateonscroll=\"{ enterClass: 'animate-enter fade-in-10 slide-in-from-r-8 animate-duration-1000', leaveClass: 'animate-leave fade-out-0' }\"\n        class=\"flex flex-col border border-surface shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4\"\n    >\n        <div class=\"rounded-full bg-primary text-primary-contrast w-12 h-12 flex items-center justify-center\">\n            <i class=\"pi pi-building !text-2xl\"></i>\n        </div>\n        <span class=\"text-2xl font-bold\">Enterprise</span>\n        <span class=\"text-muted-color text-center\">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>\n    </div>\n</div>\n\n<div class=\"flex flex-wrap justify-center gap-8\">\n    <div v-animateonscroll=\"{ enterClass: 'animate-enter fade-in-10 slide-in-from-t-20 animate-duration-1000' }\" class=\"flex flex-col border border-primary-200 shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4\">\n        <Avatar image=\"https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png\" shape=\"circle\" size=\"xlarge\" />\n        <span class=\"text-2xl font-medium\">Jenna Thompson</span>\n        <span class=\"text-muted-color text-center\">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>\n    </div>\n    <div v-animateonscroll=\"{ enterClass: 'animate-enter fade-in-10 slide-in-from-b-20 animate-duration-1000' }\" class=\"flex flex-col border border-primary-200 shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4\">\n        <Avatar image=\"https://primefaces.org/cdn/primevue/images/avatar/asiyajavayant.png\" shape=\"circle\" size=\"xlarge\" />\n        <span class=\"text-2xl font-medium\">Isabel Garcia</span>\n        <span class=\"text-muted-color text-center\">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>\n    </div>\n    <div v-animateonscroll=\"{ enterClass: 'animate-enter fade-in-10 slide-in-from-t-20 animate-duration-1000' }\" class=\"flex flex-col border border-primary-200 shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4\">\n        <Avatar image=\"https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png\" shape=\"circle\" size=\"xlarge\" />\n        <span class=\"text-2xl font-medium\">Xavier Mason</span>\n        <span class=\"text-muted-color text-center\">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>\n    </div>\n</div>\n\n<div class=\"flex flex-wrap justify-center gap-8\">\n    <div\n        v-animateonscroll=\"{ enterClass: 'animate-enter fade-in-10 spin-in-45 slide-in-from-t-12 animate-duration-1000' }\"\n        class=\"flex flex-col bg-primary text-primary-contrast border-primary shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4\"\n    >\n        <span class=\"bg-white/20 text-xl font-medium rounded-xl px-4 py-2\">850K</span>\n        <span class=\"text-2xl font-bold\">Customers</span>\n        <span class=\"text-center\">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>\n    </div>\n    <div\n        v-animateonscroll=\"{ enterClass: 'animate-enter fade-in-10 zoom-in-50 slide-in-from-t-20 animate-duration-1000' }\"\n        class=\"flex flex-col bg-primary text-primary-contrast border-primary shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4\"\n    >\n        <span class=\"bg-white/20 text-xl font-medium rounded-xl px-4 py-2\">$1.5M</span>\n        <span class=\"text-2xl font-bold\">Revenue</span>\n        <span class=\"text-center\">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>\n    </div>\n    <div\n        v-animateonscroll=\"{ enterClass: 'animate-enter fade-in-10 spin-in-[-45deg] slide-in-from-t-16 animate-duration-1000' }\"\n        class=\"flex flex-col bg-primary text-primary-contrast border-primary shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4\"\n    >\n        <span class=\"bg-white/20 text-xl font-medium rounded-xl px-4 py-2\">140K</span>\n        <span class=\"text-2xl font-bold\">Sales</span>\n        <span class=\"text-center\">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>\n    </div>\n</div>\n\n<div class=\"flex flex-wrap justify-center gap-8\">\n    <div v-animateonscroll=\"{ enterClass: 'animate-enter fade-in-10 zoom-in-50 animate-duration-1000' }\" class=\"flex flex-col bg-purple-500 text-white border-purple-500 shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4\">\n        <div class=\"rounded-full border-2 border-white w-12 h-12 flex items-center justify-center\">\n            <i class=\"pi pi-wifi !text-2xl\"></i>\n        </div>\n        <span class=\"text-2xl font-bold\">Bandwidth</span>\n        <span class=\"text-center\">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>\n    </div>\n    <div v-animateonscroll=\"{ enterClass: 'animate-enter fade-in-10 zoom-in-75 animate-duration-1000' }\" class=\"flex flex-col bg-teal-500 text-white border-teal-500 shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4\">\n        <div class=\"rounded-full border-2 border-white w-12 h-12 flex items-center justify-center\">\n            <i class=\"pi pi-database !text-2xl\"></i>\n        </div>\n        <span class=\"text-2xl font-bold\">Storage</span>\n        <span class=\"text-center\">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>\n    </div>\n    <div v-animateonscroll=\"{ enterClass: 'animate-enter fade-in-10 zoom-in-50 animate-duration-1000' }\" class=\"flex flex-col bg-indigo-500 text-white border-indigo-500 shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4\">\n        <div class=\"rounded-full border-2 border-white w-12 h-12 flex items-center justify-center\">\n            <i class=\"pi pi-arrows-v !text-2xl\"></i>\n        </div>\n        <span class=\"text-2xl font-bold\">Requests</span>\n        <span class=\"text-center\">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>\n    </div>\n</div>"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "_typeof",
        "function",
        "ownKeys",
        "_objectSpread",
        "forEach",
        "_defineProperty",
        "_toPropertyKey",
        "_toPrimitive",
        "_slicedToArray",
        "_nonIterableRest",
        "_unsupportedIterableToArray",
        "_arrayLikeToArray",
        "_iterableToArrayLimit",
        "catch",
        "_arrayWithHoles",
        "extend",
        "mounted",
        "unmounted",
        "bindAnimationEvents",
        "bindIntersectionObserver",
        "IntersectionObserver",
        "if",
        "setTimeout",
        "enter",
        "leave",
        "unbindAnimationEvents",
        "unbindIntersectionObserver"
      ]
    }
  },
  "autocomplete": {
    "title": "AutoComplete",
    "description": "AutoComplete is an input component that provides real-time suggestions when being typed.",
    "examples": [
      "<AutoComplete v-model=\"value\" :suggestions=\"items\" @complete=\"search\" />",
      "<AutoComplete v-model=\"value\" dropdown :suggestions=\"items\" @complete=\"search\" />",
      "<AutoComplete v-model=\"selectedCountry\" optionLabel=\"name\" :suggestions=\"filteredCountries\" @complete=\"search\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex justify-center flex-col gap-4 w-full md:w-56\">\n    <div class=\"flex flex-col gap-1\">\n        <AutoComplete name=\"country.name\" optionLabel=\"name\" :suggestions=\"filteredCountries\" @complete=\"search\" fluid />\n        <Message v-if=\"$form.country?.name?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.country.name.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<AutoComplete v-model=\"selectedCountry\" optionLabel=\"name\" :suggestions=\"filteredCountries\" @complete=\"search\">\n    <template #option=\"slotProps\">\n        <div class=\"flex items-center\">\n            <img :alt=\"slotProps.option.name\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`flag flag-${slotProps.option.code.toLowerCase()} mr-2`\" style=\"width: 18px\" />\n            <div>{{ slotProps.option.name }}</div>\n        </div>\n    </template>\n    <template #header>\n        <div class=\"font-medium px-3 py-2\">Available Countries</div>\n    </template>\n    <template #footer>\n        <div class=\"px-3 py-3\">\n            <Button label=\"Add New\" fluid severity=\"secondary\" text size=\"small\" icon=\"pi pi-plus\" />\n        </div>\n    </template>\n</AutoComplete>",
      "<AutoComplete v-model=\"selectedCity\" :suggestions=\"filteredCities\" @complete=\"search\" optionLabel=\"label\" optionGroupLabel=\"label\" optionGroupChildren=\"items\" placeholder=\"Hint: type 'a'\">\n    <template #optiongroup=\"slotProps\">\n        <div class=\"flex items-center country-item\">\n            <img :alt=\"slotProps.option.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`flag flag-${slotProps.option.code.toLowerCase()} mr-2`\" style=\"width: 18px\" />\n            <div>{{ slotProps.option.label }}</div>\n        </div>\n    </template>\n</AutoComplete>",
      "<AutoComplete v-model=\"selectedCountry\" forceSelection optionLabel=\"name\" :suggestions=\"filteredCountries\" @complete=\"search\" />",
      "<AutoComplete v-model=\"selectedItem\" :suggestions=\"filteredItems\" @complete=\"searchItems\"\n    :virtualScrollerOptions=\"{ itemSize: 38 }\" optionLabel=\"label\" dropdown />",
      "<label for=\"multiple-ac-1\" class=\"font-bold mb-2 block\">With Typeahead</label>\n<AutoComplete v-model=\"value1\" inputId=\"multiple-ac-1\" multiple fluid :suggestions=\"items\" @complete=\"search\" />\n\n<label for=\"multiple-ac-2\" class=\"font-bold mt-8 mb-2 block\">Without Typeahead</label>\n<AutoComplete v-model=\"value2\" inputId=\"multiple-ac-2\" multiple fluid @complete=\"search\" :typeahead=\"false\" />",
      "<FloatLabel>\n    <AutoComplete v-model=\"value1\" inputId=\"over_label\" :suggestions=\"items\" @complete=\"search\" />\n    <label for=\"over_label\">Over Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"in\">\n    <AutoComplete v-model=\"value2\" inputId=\"in_label\" :suggestions=\"items\" @complete=\"search\" variant=\"filled\" />\n    <label for=\"in_label\">In Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"on\">\n    <AutoComplete v-model=\"value3\" inputId=\"on_label\" :suggestions=\"items\" @complete=\"search\" />\n    <label for=\"on_label\">On Label</label>\n</FloatLabel>",
      "<IftaLabel>\n    <AutoComplete v-model=\"value\" inputId=\"ac\" :suggestions=\"items\" @complete=\"search\" variant=\"filled\" />\n    <label for=\"ac\">Identifier</label>\n</IftaLabel>",
      "<AutoComplete v-model=\"value\" showClear :suggestions=\"items\" @complete=\"search\" inputClass=\"w-56\" />",
      "<AutoComplete v-model=\"value1\" :suggestions=\"items\" @complete=\"search\" size=\"small\" placeholder=\"Small\" dropdown />\n<AutoComplete v-model=\"value2\" :suggestions=\"items\" @complete=\"search\" placeholder=\"Normal\" dropdown />\n<AutoComplete v-model=\"value3\" :suggestions=\"items\" @complete=\"search\" size=\"large\" placeholder=\"Large\" dropdown />",
      "<AutoComplete v-model=\"value\" :suggestions=\"items\" fluid @complete=\"search\" />",
      "<AutoComplete v-model=\"value\" :suggestions=\"items\" @complete=\"search\" variant=\"filled\" />",
      "<AutoComplete disabled placeholder=\"Disabled\" />",
      "<AutoComplete v-model=\"value1\" :suggestions=\"items\" @complete=\"search\" :invalid=\"!value1\" placeholder=\"Code\" />\n<AutoComplete v-model=\"value2\" :suggestions=\"items\" @complete=\"search\" :invalid=\"!value2\" variant=\"filled\" placeholder=\"Code\" />",
      "<label for=\"ac1\">;Username</label>\n<AutoComplete inputId=\"ac1\" />\n\n<span id=\"ac2\">Email</span>\n<AutoComplete aria-labelledby=\"ac2\" />\n\n<AutoComplete aria-label=\"City\" />"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "composables": [
        "useMove"
      ],
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "suggestions",
        "mounted",
        "updated",
        "beforeUnmount",
        "if",
        "getOptionIndex",
        "getOptionLabel",
        "getOptionValue",
        "getOptionRenderKey",
        "getPTOptions",
        "isOptionDisabled",
        "isOptionGroup",
        "getOptionGroupLabel",
        "getOptionGroupChildren",
        "getAriaPosInset",
        "show",
        "hide",
        "onFocus",
        "onBlur",
        "onKeyDown",
        "switch",
        "onInput",
        "onChange",
        "onMultipleContainerFocus",
        "onMultipleContainerBlur",
        "onMultipleContainerKeyDown",
        "onContainerClick",
        "onDropdownClick",
        "onOptionSelect",
        "onOptionMouseMove",
        "onOptionSelectRange",
        "onClearClick",
        "onOverlayClick",
        "onOverlayKeyDown",
        "onArrowDownKey",
        "onArrowUpKey",
        "onArrowLeftKey",
        "onArrowRightKey",
        "onHomeKey",
        "onEndKey",
        "onPageUpKey",
        "onPageDownKey",
        "onEnterKey",
        "onSpaceKey",
        "onEscapeKey",
        "onTabKey",
        "onShiftKey",
        "onBackspaceKey",
        "onArrowLeftKeyOnMultiple",
        "onArrowRightKeyOnMultiple",
        "onBackspaceKeyOnMultiple",
        "onOverlayEnter",
        "onOverlayAfterEnter",
        "onOverlayLeave",
        "onOverlayAfterLeave",
        "alignOverlay",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "bindScrollListener",
        "unbindScrollListener",
        "bindResizeListener",
        "unbindResizeListener",
        "isOutsideClicked",
        "isInputClicked",
        "isDropdownClicked",
        "isOptionMatched",
        "isValidOption",
        "isValidSelectedOption",
        "isEquals",
        "isSelected",
        "findFirstOptionIndex",
        "findLastOptionIndex",
        "findNextOptionIndex",
        "findPrevOptionIndex",
        "findSelectedOptionIndex",
        "findFirstFocusedOptionIndex",
        "findLastFocusedOptionIndex",
        "search",
        "removeOption",
        "changeFocusedOptionIndex",
        "scrollInView",
        "autoUpdateModel",
        "updateModel",
        "flatOptions",
        "overlayRef",
        "listRef",
        "virtualScrollerRef",
        "findNextSelectedOptionIndex",
        "findPrevSelectedOptionIndex",
        "findNearestSelectedOptionIndex",
        "visibleOptions",
        "inputValue",
        "hasSelectedOption",
        "equalityKey",
        "searchResultMessageText",
        "searchMessageText",
        "emptySearchMessageText",
        "selectionMessageText",
        "emptySelectionMessageText",
        "selectedMessageText",
        "listAriaLabel",
        "focusedOptionId",
        "focusedMultipleOptionId",
        "isClearIconVisible",
        "ariaSetSize",
        "virtualScrollerDisabled",
        "panelId",
        "containerDataP",
        "overlayDataP",
        "inputMultipleDataP"
      ],
      "emits": [
        "before-show",
        "before-hide",
        "clear",
        "clear",
        "show",
        "hide"
      ]
    }
  },
  "avatar": {
    "title": "Avatar",
    "description": "Avatar represents people using icons, labels and images.",
    "examples": [
      "<Avatar label=\"P\" class=\"mr-2\" size=\"xlarge\" />\n<Avatar label=\"V\" class=\"mr-2\" size=\"large\" style=\"background-color: #ece9fc; color: #2a1261\" />\n<Avatar label=\"U\" class=\"mr-2\" style=\"background-color: #dee9fc; color: #1a2551\" />\n\n<Avatar label=\"P\" class=\"mr-2\" size=\"xlarge\" shape=\"circle\" />\n<Avatar label=\"V\" class=\"mr-2\" size=\"large\" style=\"background-color: #ece9fc; color: #2a1261\" shape=\"circle\" />\n<Avatar label=\"U\" class=\"mr-2\" style=\"background-color: #dee9fc; color: #1a2551\" shape=\"circle\" />\n\n<OverlayBadge value=\"4\" severity=\"danger\" class=\"inline-flex\">\n    <Avatar label=\"U\" size=\"xlarge\" />\n</OverlayBadge>",
      "<Avatar icon=\"pi pi-user\" class=\"mr-2\" size=\"xlarge\" />\n<Avatar icon=\"pi pi-user\" class=\"mr-2\" size=\"large\" style=\"background-color: #ece9fc; color: #2a1261\" />\n<Avatar icon=\"pi pi-user\" style=\"background-color: #dee9fc; color: #1a2551\" />\n\n<Avatar icon=\"pi pi-user\" class=\"mr-2\" size=\"xlarge\" shape=\"circle\" />\n<Avatar icon=\"pi pi-user\" class=\"mr-2\" size=\"large\" style=\"background-color: #ece9fc; color: #2a1261\" shape=\"circle\" />\n<Avatar icon=\"pi pi-user\" style=\"background-color: #dee9fc; color: #1a2551\" shape=\"circle\" />\n\n<OverlayBadge value=\"4\" severity=\"danger\" class=\"inline-flex\">\n    <Avatar icon=\"pi pi-user\" size=\"xlarge\" />\n</OverlayBadge>",
      "<Avatar image=\"/images/avatar/amyelsner.png\" class=\"mr-2\" size=\"xlarge\" shape=\"circle\" />\n<Avatar image=\"/images/avatar/asiyajavayant.png\" class=\"mr-2\" size=\"large\" shape=\"circle\" />\n<Avatar image=\"/images/avatar/onyamalimba.png\" shape=\"circle\" />\n\n<OverlayBadge value=\"4\" severity=\"danger\" class=\"inline-flex\">\n    <Avatar class=\"p-overlay-badge\" image=\"https://primefaces.org/cdn/primevue/images/organization/walter.jpg\" size=\"xlarge\" />\n</OverlayBadge>\n\n<Avatar image=\"https://www.gravatar.com/avatar/05dfd4b41340d09cae045235eb0893c3?d=mp\" class=\"flex items-center justify-center mr-2\" size=\"xlarge\" />",
      "<AvatarGroup>\n    <Avatar image=\"/images/avatar/amyelsner.png\" shape=\"circle\" />\n    <Avatar image=\"/images/avatar/asiyajavayant.png\" shape=\"circle\" />\n    <Avatar image=\"/images/avatar/onyamalimba.png\" shape=\"circle\" />\n    <Avatar image=\"/images/avatar/ionibowcher.png\" shape=\"circle\" />\n    <Avatar image=\"/images/avatar/xuxuefeng.png\" shape=\"circle\" />\n    <Avatar label=\"+2\" shape=\"circle\" />\n</AvatarGroup>"
    ],
    "props": {
      "label": "string | undefined",
      "icon": "string | undefined",
      "image": "string | undefined",
      "size": "HintedString<'normal' | 'large' | 'xlarge'> | undefined",
      "shape": "HintedString<'square' | 'circle'> | undefined",
      "ariaLabel": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<AvatarPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "error": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "onError",
        "dataP"
      ]
    }
  },
  "avatargroup": {
    "props": {
      "dt": "DesignToken<any>",
      "pt": "PassThrough<AvatarGroupPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {}
  },
  "badge": {
    "title": "Badge",
    "description": "Badge is a small status indicator for another element.",
    "examples": [
      "<Badge value=\"2\"></Badge>\n<Badge>10</Badge>",
      "<Badge value=\"2\"></Badge>\n<Badge value=\"6\" severity=\"secondary\"></Badge>\n<Badge value=\"8\" severity=\"success\"></Badge>\n<Badge value=\"4\" severity=\"info\"></Badge>\n<Badge value=\"9\" severity=\"warn\"></Badge>\n<Badge value=\"3\" severity=\"danger\"></Badge>\n<Badge value=\"5\" severity=\"contrast\"></Badge>",
      "<Badge value=\"8\" size=\"xlarge\" severity=\"success\"></Badge>\n<Badge value=\"6\" size=\"large\" severity=\"warn\"></Badge>\n<Badge value=\"4\" severity=\"info\"></Badge>\n<Badge value=\"2\" size=\"small\"></Badge>",
      "<OverlayBadge value=\"2\">\n    <i class=\"pi pi-bell\" style=\"font-size: 2rem\" />\n</OverlayBadge>\n<OverlayBadge value=\"4\" severity=\"danger\">\n    <i class=\"pi pi-calendar\" style=\"font-size: 2rem\" />\n</OverlayBadge>\n<OverlayBadge severity=\"danger\">\n    <i class=\"pi pi-envelope\" style=\"font-size: 2rem\" />\n</OverlayBadge>",
      "<Button type=\"button\" label=\"Notifications\" icon=\"pi pi-bell\" badge=\"2\" />\n<Button type=\"button\" label=\"Inbox\" icon=\"pi pi-inbox\" badge=\"2\" badgeSeverity=\"contrast\" variant=\"outlined\" />"
    ],
    "props": {
      "value": "string | number",
      "severity": "HintedString<'secondary' | 'info' | 'success' | 'warn' | 'danger' | 'contrast'> | null | undefined",
      "size": "HintedString<'small' | 'large' | 'xlarge'> | null | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<BadgePassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "dataP"
      ]
    }
  },
  "badgedirective": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "_typeof",
        "function",
        "ownKeys",
        "_objectSpread",
        "forEach",
        "_defineProperty",
        "_toPropertyKey",
        "_toPrimitive",
        "extend",
        "for",
        "if",
        "updated"
      ]
    }
  },
  "blockui": {
    "title": "BlockUI",
    "description": "BlockUI can either block other components or the whole page.",
    "examples": [
      "<div class=\"mb-4\">\n    <Button label=\"Block\" @click=\"blocked = true\" class=\"mr-2\"></Button>\n    <Button label=\"Unblock\" @click=\"blocked = false\"></Button>\n</div>\n<BlockUI :blocked=\"blocked\">\n    <Panel header=\"Basic\">\n        <p class=\"m-0\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </p>\n    </Panel>\n</BlockUI>",
      "<BlockUI :blocked=\"blocked\" fullScreen />\n<Button label=\"Block\" @click=\"blocked = true\" />"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch"
      ],
      "methods": [
        "data",
        "blocked",
        "mounted",
        "block",
        "if",
        "unblock",
        "removeMask"
      ],
      "emits": [
        "block",
        "unblock"
      ]
    }
  },
  "breadcrumb": {
    "title": "Breadcrumb",
    "description": "Breadcrumb provides contextual information about page hierarchy.",
    "examples": [
      "<Breadcrumb :home=\"home\" :model=\"items\" />",
      "<Breadcrumb :home=\"home\" :model=\"items\">\n    <template #item=\"{ item }\">\n        <a class=\"cursor-pointer\" :href=\"item.url\">\n            <span :class=\"item.icon\"></span>\n        </a>\n    </template>\n    <template #separator> / </template>\n</Breadcrumb>",
      "<Breadcrumb :home=\"home\" :model=\"items\">\n    <template #item=\"{ item, props }\">\n        <router-link v-if=\"item.route\" v-slot=\"{ href, navigate }\" :to=\"item.route\" custom>\n            <a :href=\"href\" v-bind=\"props.action\" @click=\"navigate\">\n                <span :class=\"[item.icon, 'text-color']\" />\n                <span class=\"text-primary font-semibold\">{{ item.label }}</span>\n            </a>\n        </router-link>\n        <a v-else :href=\"item.url\" :target=\"item.target\" v-bind=\"props.action\">\n            <span class=\"text-surface-700 dark:text-surface-0\">{{ item.label }}</span>\n        </a>\n    </template>\n</Breadcrumb>"
    ],
    "props": {
      "model": "MenuItem[] | undefined",
      "home": "MenuItem | undefined",
      "ariaLabel": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<BreadcrumbPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {}
  },
  "button": {
    "title": "Button",
    "description": "Button is an extension to standard input element with icons and theming.",
    "examples": [
      "<Button label=\"Submit\" />",
      "<Button icon=\"pi pi-home\" aria-label=\"Save\" />\n<Button label=\"Profile\" icon=\"pi pi-user\" />\n<Button label=\"Save\" icon=\"pi pi-check\" iconPos=\"right\" />\n<Button label=\"Search\" icon=\"pi pi-search\" iconPos=\"top\" />\n<Button label=\"Update\" icon=\"pi pi-refresh\" iconPos=\"bottom\" />",
      "<Button type=\"button\" label=\"Search\" icon=\"pi pi-search\" :loading=\"loading\" @click=\"load\" />",
      "<Button label=\"Link\" variant=\"link\" />\n<Button as=\"a\" label=\"External\" href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener\" />\n<Button asChild v-slot=\"slotProps\">\n    <RouterLink to=\"/\" :class=\"slotProps.class\">Router</RouterLink>\n</Button>",
      "<Button label=\"Primary\" />\n<Button label=\"Secondary\" severity=\"secondary\" />\n<Button label=\"Success\" severity=\"success\" />\n<Button label=\"Info\" severity=\"info\" />\n<Button label=\"Warn\" severity=\"warn\" />\n<Button label=\"Help\" severity=\"help\" />\n<Button label=\"Danger\" severity=\"danger\" />\n<Button label=\"Contrast\" severity=\"contrast\" />",
      "<Button label=\"Submit\" disabled />",
      "<Button label=\"Primary\" raised />\n<Button label=\"Secondary\" severity=\"secondary\" raised />\n<Button label=\"Success\" severity=\"success\" raised />\n<Button label=\"Info\" severity=\"info\" raised />\n<Button label=\"Warn\" severity=\"warn\" raised />\n<Button label=\"Help\" severity=\"help\" raised />\n<Button label=\"Danger\" severity=\"danger\" raised />\n<Button label=\"Contrast\" severity=\"contrast\" raised />",
      "<Button label=\"Primary\" rounded />\n<Button label=\"Secondary\" severity=\"secondary\" rounded />\n<Button label=\"Success\" severity=\"success\" rounded />\n<Button label=\"Info\" severity=\"info\" rounded />\n<Button label=\"Warn\" severity=\"warn\" rounded />\n<Button label=\"Help\" severity=\"help\" rounded />\n<Button label=\"Danger\" severity=\"danger\" rounded />\n<Button label=\"Contrast\" severity=\"contrast\" rounded />",
      "<Button label=\"Primary\" variant=\"text\" />\n<Button label=\"Secondary\" severity=\"secondary\" variant=\"text\" />\n<Button label=\"Success\" severity=\"success\" variant=\"text\" />\n<Button label=\"Info\" severity=\"info\" variant=\"text\" />\n<Button label=\"Warn\" severity=\"warn\" variant=\"text\" />\n<Button label=\"Help\" severity=\"help\" variant=\"text\" />\n<Button label=\"Danger\" severity=\"danger\" variant=\"text\" />\n<Button label=\"Contrast\" severity=\"contrast\" variant=\"text\" />",
      "<Button label=\"Primary\" variant=\"text\" raised />\n<Button label=\"Secondary\" severity=\"secondary\" variant=\"text\" raised />\n<Button label=\"Success\" severity=\"success\" variant=\"text\" raised />\n<Button label=\"Info\" severity=\"info\" variant=\"text\" raised />\n<Button label=\"Warn\" severity=\"warn\" variant=\"text\" raised />\n<Button label=\"Help\" severity=\"help\" variant=\"text\" raised />\n<Button label=\"Danger\" severity=\"danger\" variant=\"text\" raised />\n<Button label=\"Contrast\" severity=\"contrast\" variant=\"text\" raised />",
      "<Button label=\"Primary\" variant=\"outlined\" />\n<Button label=\"Secondary\" severity=\"secondary\" variant=\"outlined\" />\n<Button label=\"Success\" severity=\"success\" variant=\"outlined\" />\n<Button label=\"Info\" severity=\"info\" variant=\"outlined\" />\n<Button label=\"Warn\" severity=\"warn\" variant=\"outlined\" />\n<Button label=\"Help\" severity=\"help\" variant=\"outlined\" />\n<Button label=\"Danger\" severity=\"danger\" variant=\"outlined\" />\n<Button label=\"Contrast\" severity=\"contrast\" variant=\"outlined\" />",
      "<Button icon=\"pi pi-check\" aria-label=\"Filter\" />\n<Button icon=\"pi pi-bookmark\" severity=\"secondary\" aria-label=\"Bookmark\" />\n<Button icon=\"pi pi-search\" severity=\"success\" aria-label=\"Search\" />\n<Button icon=\"pi pi-user\" severity=\"info\" aria-label=\"User\" />\n<Button icon=\"pi pi-bell\" severity=\"warn\" aria-label=\"Notification\" />\n<Button icon=\"pi pi-heart\" severity=\"help\" aria-label=\"Favorite\" />\n<Button icon=\"pi pi-times\" severity=\"danger\" aria-label=\"Cancel\" />\n<Button icon=\"pi pi-star\" severity=\"contrast\" aria-label=\"Star\" />\n\n<Button icon=\"pi pi-check\" rounded aria-label=\"Filter\" />\n<Button icon=\"pi pi-bookmark\" severity=\"secondary\" rounded aria-label=\"Bookmark\" />\n<Button icon=\"pi pi-search\" severity=\"success\" rounded aria-label=\"Search\" />\n<Button icon=\"pi pi-user\" severity=\"info\" rounded aria-label=\"User\" />\n<Button icon=\"pi pi-bell\" severity=\"warn\" rounded aria-label=\"Notification\" />\n<Button icon=\"pi pi-heart\" severity=\"help\" rounded aria-label=\"Favorite\" />\n<Button icon=\"pi pi-times\" severity=\"danger\" rounded aria-label=\"Cancel\" />\n<Button icon=\"pi pi-star\" severity=\"contrast\" rounded aria-label=\"Star\" />\n\n<Button icon=\"pi pi-check\" rounded variant=\"outlined\" aria-label=\"Filter\" />\n<Button icon=\"pi pi-bookmark\" severity=\"secondary\" rounded variant=\"outlined\" aria-label=\"Bookmark\" />\n<Button icon=\"pi pi-search\" severity=\"success\" rounded variant=\"outlined\" aria-label=\"Search\" />\n<Button icon=\"pi pi-user\" severity=\"info\" rounded variant=\"outlined\" aria-label=\"User\" />\n<Button icon=\"pi pi-bell\" severity=\"warn\" rounded variant=\"outlined\" aria-label=\"Notification\" />\n<Button icon=\"pi pi-heart\" severity=\"help\" rounded variant=\"outlined\" aria-label=\"Favorite\" />\n<Button icon=\"pi pi-times\" severity=\"danger\" rounded variant=\"outlined\" aria-label=\"Cancel\" />\n<Button icon=\"pi pi-star\" severity=\"contrast\" rounded variant=\"outlined\" aria-label=\"Star\" />\n\n<Button icon=\"pi pi-check\" variant=\"text\" raised rounded aria-label=\"Filter\" />\n<Button icon=\"pi pi-bookmark\" severity=\"secondary\" variant=\"text\" raised rounded aria-label=\"Bookmark\" />\n<Button icon=\"pi pi-search\" severity=\"success\" variant=\"text\" raised rounded aria-label=\"Search\" />\n<Button icon=\"pi pi-user\" severity=\"info\" variant=\"text\" raised rounded aria-label=\"User\" />\n<Button icon=\"pi pi-bell\" severity=\"warn\" variant=\"text\" raised rounded aria-label=\"Notification\" />\n<Button icon=\"pi pi-heart\" severity=\"help\" variant=\"text\" raised rounded aria-label=\"Favorite\" />\n<Button icon=\"pi pi-times\" severity=\"danger\" variant=\"text\" raised rounded aria-label=\"Cancel\" />\n<Button icon=\"pi pi-star\" severity=\"contrast\" variant=\"text\" raised rounded aria-label=\"Star\" />\n\n<Button icon=\"pi pi-check\" variant=\"text\" rounded aria-label=\"Filter\" />\n<Button icon=\"pi pi-bookmark\" severity=\"secondary\" variant=\"text\" rounded aria-label=\"Bookmark\" />\n<Button icon=\"pi pi-search\" severity=\"success\" variant=\"text\" rounded aria-label=\"Search\" />\n<Button icon=\"pi pi-user\" severity=\"info\" variant=\"text\" rounded aria-label=\"User\" />\n<Button icon=\"pi pi-bell\" severity=\"warn\" variant=\"text\" rounded aria-label=\"Notification\" />\n<Button icon=\"pi pi-heart\" severity=\"help\" variant=\"text\" rounded aria-label=\"Favorite\" />\n<Button icon=\"pi pi-times\" severity=\"danger\" variant=\"text\" rounded aria-label=\"Cancel\" />\n<Button icon=\"pi pi-star\" severity=\"contrast\" variant=\"text\" rounded aria-label=\"Star\" />",
      "<Button type=\"button\" label=\"Emails\" badge=\"2\" />\n<Button type=\"button\" label=\"Messages\" icon=\"pi pi-users\" badge=\"2\" badgeSeverity=\"contrast\" variant=\"outlined\"  />",
      "<ButtonGroup>\n    <Button label=\"Save\" icon=\"pi pi-check\" />\n    <Button label=\"Delete\" icon=\"pi pi-trash\" />\n    <Button label=\"Cancel\" icon=\"pi pi-times\" />\n</ButtonGroup>",
      "<Button label=\"Small\" icon=\"pi pi-check\" size=\"small\" />\n<Button label=\"Normal\" icon=\"pi pi-check\" />\n<Button label=\"Large\" icon=\"pi pi-check\" size=\"large\" />",
      "<Button variant=\"outlined\" class=\"!border-2\">\n    <svg width=\"35\" height=\"40\" viewBox=\"0 0 35 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"...\" fill=\"var(--p-primary-color)\" />\n        <path d=\"...\" fill=\"var(--p-text-color)\" />\n    </svg>\n</Button>",
      "<Button v-slot=\"slotProps\" asChild>\n    <button\n        v-bind=\"slotProps.a11yAttrs\"\n        class=\"rounded-lg bg-gradient-to-br from-primary-400 to-primary-700 active:from-primary-700 active:to-primary-900 text-white border-none px-6 py-3 font-bold hover:ring-2 cursor-pointer ring-offset-2 ring-offset-surface-0 dark:ring-offset-surface-900 ring-primary transition-all\"\n    >\n        SIGN UP\n    </button>\n</Button>",
      "<Button icon=\"pi pi-check\" aria-label=\"Submit\" />\n\n<Button icon=\"pi pi-check\" label=\"Submit\" />\n\n<Button class=\"youtube p-0\" aria-label=\"Youtube\">\n    <i class=\"pi pi-youtube px-2\"></i>\n    <span class=\"px-4\">Youtube</span>\n</Button>"
    ],
    "props": {
      "style": "any",
      "class": "any",
      "label": "string | undefined",
      "icon": "string | undefined",
      "iconPos": "HintedString<'left' | 'right' | 'top' | 'bottom'> | undefined",
      "iconClass": "string | object | undefined",
      "badge": "string | undefined",
      "badgeClass": "string | object | undefined",
      "badgeSeverity": "HintedString<'secondary' | 'info' | 'success' | 'warn' | 'danger' | 'contrast'> | null | undefined",
      "loading": "boolean | undefined",
      "loadingIcon": "string | undefined",
      "as": "string | Component | undefined",
      "asChild": "boolean | undefined",
      "link": "boolean | undefined",
      "severity": "HintedString<'secondary' | 'success' | 'info' | 'warn' | 'help' | 'danger' | 'contrast'> | undefined",
      "raised": "boolean | undefined",
      "rounded": "boolean | undefined",
      "text": "boolean | undefined",
      "outlined": "boolean | undefined",
      "size": "HintedString<'small' | 'large'> | undefined",
      "variant": "HintedString<'outlined' | 'text' | 'link'> | undefined",
      "plain": "boolean | undefined",
      "fluid": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ButtonPassThroughOptions<any>>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "getPTOptions",
        "disabled",
        "defaultAriaLabel",
        "hasIcon",
        "attrs",
        "asAttrs",
        "a11yAttrs",
        "hasFluid",
        "dataP",
        "dataIconP",
        "dataLabelP"
      ]
    }
  },
  "buttongroup": {
    "props": {
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ButtonGroupPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {}
  },
  "calendar": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "mounted"
      ]
    }
  },
  "card": {
    "title": "Card",
    "description": "Card is a flexible container component.",
    "examples": [
      "<Card>\n    <template #title>Simple Card</template>\n    <template #content>\n        <p class=\"m-0\">\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque\n            quas!\n        </p>\n    </template>\n</Card>",
      "<Card style=\"width: 25rem; overflow: hidden\">\n    <template #header>\n        <img alt=\"user header\" src=\"/images/usercard.png\" />\n    </template>\n    <template #title>Advanced Card</template>\n    <template #subtitle>Card subtitle</template>\n    <template #content>\n        <p class=\"m-0\">\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque\n            quas!\n        </p>\n    </template>\n    <template #footer>\n        <div class=\"flex gap-4 mt-1\">\n            <Button label=\"Cancel\" severity=\"secondary\" variant=\"outlined\" class=\"w-full\" />\n            <Button label=\"Save\" class=\"w-full\" />\n        </div>\n    </template>\n</Card>",
      "<Card role=\"region\">\n    Content\n</Card>"
    ],
    "props": {
      "dt": "DesignToken<any>",
      "pt": "PassThrough<CardPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {}
  },
  "carousel": {
    "title": "Carousel",
    "description": "Carousel is a content slider featuring various customization options.",
    "examples": [
      "<Carousel :value=\"products\" :numVisible=\"3\" :numScroll=\"3\" :responsiveOptions=\"responsiveOptions\">\n    <template #item=\"slotProps\">\n        <div class=\"border border-surface-200 dark:border-surface-700 rounded m-2  p-4\">\n            <div class=\"mb-4\">\n                <div class=\"relative mx-auto\">\n                    <img :src=\"'https://primefaces.org/cdn/primevue/images/product/' + slotProps.data.image\" :alt=\"slotProps.data.name\" class=\"w-full rounded\" />\n                    <Tag :value=\"slotProps.data.inventoryStatus\" :severity=\"getSeverity(slotProps.data.inventoryStatus)\" class=\"absolute\" style=\"left:5px; top: 5px\"/>\n                </div>\n            </div>\n            <div class=\"mb-4 font-medium\">{{ slotProps.data.name }}</div>\n            <div class=\"flex justify-between items-center\">\n                <div class=\"mt-0 font-semibold text-xl\">${{ slotProps.data.price }}</div>\n                <span>\n                    <Button icon=\"pi pi-heart\" severity=\"secondary\" variant=\"outlined\" />\n                    <Button icon=\"pi pi-shopping-cart\" class=\"ml-2\"/>\n                </span>\n            </div>\n        </div>\n    </template>\n</Carousel>",
      "<Carousel :value=\"products\" :numVisible=\"3\" :numScroll=\"1\" :responsiveOptions=\"responsiveOptions\" circular :autoplayInterval=\"3000\">\n    <template #item=\"slotProps\">\n        <div class=\"border border-surface-200 dark:border-surface-700 rounded m-2  p-4\">\n            <div class=\"mb-4\">\n                <div class=\"relative mx-auto\">\n                    <img :src=\"'https://primefaces.org/cdn/primevue/images/product/' + slotProps.data.image\" :alt=\"slotProps.data.name\" class=\"w-full rounded\" />\n                    <Tag :value=\"slotProps.data.inventoryStatus\" :severity=\"getSeverity(slotProps.data.inventoryStatus)\" class=\"absolute\" style=\"left:5px; top: 5px\"/>\n                </div>\n            </div>\n            <div class=\"mb-4 font-medium\">{{ slotProps.data.name }}</div>\n            <div class=\"flex justify-between items-center\">\n                <div class=\"mt-0 font-semibold text-xl\">${{ slotProps.data.price }}</div>\n                <span>\n                    <Button icon=\"pi pi-heart\" severity=\"secondary\" variant=\"outlined\" />\n                    <Button icon=\"pi pi-shopping-cart\" class=\"ml-2\"/>\n                </span>\n            </div>\n        </div>\n    </template>\n</Carousel>",
      "<Carousel :value=\"products\" :numVisible=\"3\" :numScroll=\"1\" :responsiveOptions=\"responsiveOptions\">\n    <template #item=\"slotProps\">\n        <div class=\"border border-surface-200 dark:border-surface-700 rounded m-2  p-4\">\n            <div class=\"mb-4\">\n                <div class=\"relative mx-auto\">\n                    <img :src=\"'https://primefaces.org/cdn/primevue/images/product/' + slotProps.data.image\" :alt=\"slotProps.data.name\" class=\"w-full rounded\" />\n                    <Tag :value=\"slotProps.data.inventoryStatus\" :severity=\"getSeverity(slotProps.data.inventoryStatus)\" class=\"absolute\" style=\"left:5px; top: 5px\"/>\n                </div>\n            </div>\n            <div class=\"mb-4 font-medium\">{{ slotProps.data.name }}</div>\n            <div class=\"flex justify-between items-center\">\n                <div class=\"mt-0 font-semibold text-xl\">${{ slotProps.data.price }}</div>\n                <span>\n                    <Button icon=\"pi pi-heart\" severity=\"secondary\" variant=\"outlined\" />\n                    <Button icon=\"pi pi-shopping-cart\" class=\"ml-2\"/>\n                </span>\n            </div>\n        </div>\n    </template>\n</Carousel>",
      "<Carousel :value=\"products\" :numVisible=\"1\" :numScroll=\"1\" orientation=\"vertical\" verticalViewPortHeight=\"330px\" containerClass=\"flex items-center\">\n    <template #item=\"slotProps\">\n        <div class=\"border border-surface-200 dark:border-surface-700 rounded m-2  p-4\">\n            <div class=\"mb-4\">\n                <div class=\"relative mx-auto\">\n                    <img :src=\"'https://primefaces.org/cdn/primevue/images/product/' + slotProps.data.image\" :alt=\"slotProps.data.name\" class=\"w-full rounded\" />\n                    <Tag :value=\"slotProps.data.inventoryStatus\" :severity=\"getSeverity(slotProps.data.inventoryStatus)\" class=\"absolute\" style=\"left:5px; top: 5px\"/>\n                </div>\n            </div>\n            <div class=\"mb-4 font-medium\">{{ slotProps.data.name }}</div>\n            <div class=\"flex justify-between items-center\">\n                <div class=\"mt-0 font-semibold text-xl\">${{ slotProps.data.price }}</div>\n                <span>\n                    <Button icon=\"pi pi-heart\" severity=\"secondary\" variant=\"outlined\" />\n                    <Button icon=\"pi pi-shopping-cart\" class=\"ml-2\"/>\n                </span>\n            </div>\n        </div>\n    </template>\n</Carousel>"
    ],
    "props": {
      "value": "any | undefined",
      "page": "number | undefined",
      "numVisible": "number | undefined",
      "numScroll": "number | undefined",
      "responsiveOptions": "CarouselResponsiveOptions[] | undefined",
      "orientation": "'horizontal' | 'vertical' | undefined",
      "verticalViewPortHeight": "string | undefined",
      "containerClass": "any",
      "contentClass": "any",
      "indicatorsContentClass": "any",
      "circular": "boolean | undefined",
      "autoplayInterval": "number | undefined",
      "showNavigators": "boolean | undefined",
      "showIndicators": "boolean | undefined",
      "prevButtonProps": "object | undefined",
      "nextButtonProps": "object | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<CarouselPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:page'": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "page",
        "if",
        "circular",
        "numVisible",
        "numScroll",
        "value",
        "mounted",
        "updated",
        "beforeUnmount",
        "getIndicatorPTOptions",
        "getItemPTOptions",
        "step",
        "calculatePosition",
        "for",
        "navBackward",
        "navForward",
        "onIndicatorClick",
        "onTransitionEnd",
        "onTouchStart",
        "onTouchMove",
        "onTouchEnd",
        "changePageOnTouch",
        "onIndicatorKeydown",
        "onRightKey",
        "onLeftKey",
        "onHomeKey",
        "onEndKey",
        "onTabKey",
        "findFocusedIndicatorIndex",
        "changedFocusedIndicator",
        "bindDocumentListeners",
        "unbindDocumentListeners",
        "startAutoplay",
        "stopAutoplay",
        "createStyle",
        "isVertical",
        "hasValidItemCount",
        "isCircular",
        "isAutoplay",
        "firstIndex",
        "lastIndex",
        "ariaSlideNumber",
        "ariaPageLabel",
        "totalIndicators",
        "backwardIsDisabled",
        "forwardIsDisabled",
        "ariaSlideLabel",
        "ariaPrevButtonLabel",
        "ariaNextButtonLabel",
        "empty",
        "emptyMessageText"
      ]
    }
  },
  "cascadeselect": {
    "title": "CascadeSelect",
    "description": "CascadeSelect is a form component to select a value from a nested structure of options.",
    "examples": [
      "<CascadeSelect v-model=\"selectedCity\" :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\"\n    :optionGroupChildren=\"['states', 'cities']\" class=\"w-56\" placeholder=\"Select a City\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex justify-center flex-col gap-4\">\n    <div class=\"flex flex-col gap-1\">\n        <CascadeSelect name=\"city\" :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\" :optionGroupChildren=\"['states', 'cities']\" class=\"w-56\" placeholder=\"Select a City\" />\n        <Message v-if=\"$form.city?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.city.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<CascadeSelect v-model=\"selectedCity\" :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\"\n    :optionGroupChildren=\"['states', 'cities']\" class=\"w-56\" placeholder=\"Select a City\">\n    <template #option=\"slotProps\">\n        <div class=\"flex items-center\">\n            <img v-if=\"slotProps.option.states\" :alt=\"slotProps.option.name\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`flag flag-${slotProps.option.code.toLowerCase()} mr-2`\" style=\"width: 18px\"  />\n            <i v-if=\"slotProps.option.cities\" class=\"pi pi-compass mr-2\"></i>\n            <i v-if=\"slotProps.option.cname\" class=\"pi pi-map-marker mr-2\"></i>\n            <span>{{ slotProps.option.cname || slotProps.option.name }}</span>\n        </div>\n    </template>\n    <template #dropdownicon>\n        <i class=\"pi pi-map\" />\n    </template>\n    <template #header>\n        <div class=\"font-medium px-3 py-2\">Available Countries</div>\n    </template>\n    <template #footer>\n        <div class=\"px-3 py-1\">\n            <Button label=\"Add New\" fluid severity=\"secondary\" variant=\"text\" size=\"small\" icon=\"pi pi-plus\" />\n        </div>\n    </template>\n</CascadeSelect>",
      "<CascadeSelect loading placeholder=\"Loading...\" class=\"w-56\" />",
      "<FloatLabel class=\"w-full md:w-56\">\n    <CascadeSelect v-model=\"value1\" inputId=\"over_label\" :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\" :optionGroupChildren=\"['states', 'cities']\" class=\"w-full\" />\n    <label for=\"over_label\">Over Label</label>\n</FloatLabel>\n\n<FloatLabel class=\"w-full md:w-56\">\n    <CascadeSelect v-model=\"value2\" inputId=\"in_label\" :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\" :optionGroupChildren=\"['states', 'cities']\" class=\"w-full\" variant=\"filled\" />\n    <label for=\"in_label\">In Label</label>\n</FloatLabel>\n\n<FloatLabel class=\"w-full md:w-56\">\n    <CascadeSelect v-model=\"value3\" inputId=\"on_label\" :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\" :optionGroupChildren=\"['states', 'cities']\" class=\"w-full\" />\n    <label for=\"on_label\">On Label</label>\n</FloatLabel>",
      "<IftaLabel class=\"w-full md:w-56\">\n    <CascadeSelect v-model=\"selectedCity\" inputId=\"cs_city\" :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\" :optionGroupChildren=\"['states', 'cities']\" class=\"w-full\" variant=\"filled\" />\n    <label for=\"cs_city\">City</label>\n</IftaLabel>",
      "<CascadeSelect v-model=\"selectedCity\" :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\"\n    :optionGroupChildren=\"['states', 'cities']\" class=\"w-56\" placeholder=\"Select a City\" />",
      "<CascadeSelect v-model=\"value1\" :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\" :optionGroupChildren=\"['states', 'cities']\" \n    class=\"w-56\" size=\"small\" placeholder=\"Small\" />\n<CascadeSelect v-model=\"value2\" :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\" :optionGroupChildren=\"['states', 'cities']\" \n    class=\"w-56\" placeholder=\"Normal\" />\n<CascadeSelect v-model=\"value3\" :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\" :optionGroupChildren=\"['states', 'cities']\" \n    class=\"w-56\" size=\"large\" placeholder=\"Large\" />",
      "<CascadeSelect v-model=\"selectedCity\" fluid :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\"\n    :optionGroupChildren=\"['states', 'cities']\" placeholder=\"Select a City\" />",
      "<CascadeSelect v-model=\"selectedCity\" variant=\"filled\" :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\"\n    :optionGroupChildren=\"['states', 'cities']\" class=\"w-56\" placeholder=\"Select a City\" />",
      "<CascadeSelect disabled placeholder=\"Disabled\" class=\"w-56\" />",
      "<div class=\"card flex flex-wrap justify-center gap-4\">\n    <CascadeSelect v-model=\"selectedCity1\" :invalid=\"!selectedCity1\" :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\" \n        :optionGroupChildren=\"['states', 'cities']\" class=\"w-full sm:w-56\" placeholder=\"Select a City\" />\n    <CascadeSelect v-model=\"selectedCity2\" :invalid=\"!selectedCity2\" :options=\"countries\" optionLabel=\"cname\" optionGroupLabel=\"name\" \n        :optionGroupChildren=\"['states', 'cities']\" class=\"w-full sm:w-56\" placeholder=\"Select a City\" variant=\"filled\" />\n</div>",
      "<span id=\"dd1\"></span>Options</span>\n<CascadeSelect aria-labelledby=\"dd1\" />\n\n<CascadeSelect aria-label=\"Options\" />"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "composables": [
        "useMove",
        "useEnter"
      ],
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "options",
        "mounted",
        "beforeUnmount",
        "if",
        "getOptionLabel",
        "getOptionValue",
        "isOptionDisabled",
        "getOptionGroupLabel",
        "getOptionGroupChildren",
        "isOptionGroup",
        "getProccessedOptionLabel",
        "isProccessedOptionGroup",
        "show",
        "hide",
        "onFocus",
        "onBlur",
        "onKeyDown",
        "switch",
        "onOptionChange",
        "onOptionClick",
        "onOptionMouseEnter",
        "onOptionMouseMove",
        "onOptionSelect",
        "onOptionGroupSelect",
        "onContainerClick",
        "onClearClick",
        "onOverlayClick",
        "onOverlayKeyDown",
        "onArrowDownKey",
        "onArrowUpKey",
        "onArrowLeftKey",
        "onArrowRightKey",
        "onHomeKey",
        "onEndKey",
        "onEnterKey",
        "onSpaceKey",
        "onEscapeKey",
        "onTabKey",
        "onOverlayEnter",
        "onOverlayAfterEnter",
        "onOverlayLeave",
        "onOverlayAfterLeave",
        "alignOverlay",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "bindScrollListener",
        "unbindScrollListener",
        "bindResizeListener",
        "unbindResizeListener",
        "bindMatchMediaListener",
        "unbindMatchMediaListener",
        "isOptionMatched",
        "isValidOption",
        "isValidSelectedOption",
        "isSelected",
        "findFirstOptionIndex",
        "findLastOptionIndex",
        "findNextOptionIndex",
        "findPrevOptionIndex",
        "findSelectedOptionIndex",
        "findFirstFocusedOptionIndex",
        "findLastFocusedOptionIndex",
        "findOptionPathByValue",
        "searchOptions",
        "changeFocusedOptionIndex",
        "scrollInView",
        "autoUpdateModel",
        "updateModel",
        "createProcessedOptions",
        "overlayRef",
        "hasSelectedOption",
        "label",
        "processedOptions",
        "visibleOptions",
        "equalityKey",
        "searchResultMessageText",
        "searchMessageText",
        "emptySearchMessageText",
        "emptyMessageText",
        "selectionMessageText",
        "emptySelectionMessageText",
        "selectedMessageText",
        "focusedOptionId",
        "isClearIconVisible"
      ],
      "emits": [
        "before-show",
        "before-hide",
        "show",
        "hide"
      ]
    }
  },
  "chart": {
    "title": "Chart",
    "description": "Chart components are based on Chart.js, an open source HTML5 based charting library.",
    "examples": [
      "<Chart type=\"bar\" :data=\"chartData\" :options=\"chartOptions\" />",
      "<Chart type=\"pie\" :data=\"chartData\" :options=\"chartOptions\" class=\"w-full md:w-[30rem]\" />",
      "<Chart type=\"doughnut\" :data=\"chartData\" :options=\"chartOptions\" class=\"w-full md:w-[30rem]\" />",
      "<Chart type=\"bar\" :data=\"chartData\" :options=\"chartOptions\" class=\"h-[30rem]\"  />",
      "<Chart type=\"bar\" :data=\"chartData\" :options=\"chartOptions\" class=\"h-[30rem]\"  />",
      "<Chart type=\"bar\" :data=\"chartData\" :options=\"chartOptions\" class=\"h-[30rem]\" />",
      "<Chart type=\"line\" :data=\"chartData\" :options=\"chartOptions\" class=\"h-[30rem]\" />",
      "<Chart type=\"line\" :data=\"chartData\" :options=\"chartOptions\" class=\"h-[30rem]\" />",
      "<Chart type=\"line\" :data=\"chartData\" :options=\"chartOptions\" class=\"h-[30rem]\" />",
      "<Chart type=\"polarArea\" :data=\"chartData\" :options=\"chartOptions\" class=\"w-full md:w-[30rem]\" />",
      "<Chart type=\"radar\" :data=\"chartData\" :options=\"chartOptions\" class=\"w-full md:w-[30rem]\" />",
      "<Chart type=\"bar\" :data=\"chartData\" :options=\"chartOptions\" class=\"h-[30rem]\" />",
      "<Chart type=\"line\" :data=\"data\" :canvasProps=\"{'role': 'img', 'aria-label': 'Data'}\" />"
    ],
    "props": {
      "type": "string | undefined",
      "data": "object | undefined",
      "options": "object | undefined",
      "plugins": "any[]",
      "width": "number | undefined",
      "height": "number | undefined",
      "canvasProps": "CanvasHTMLAttributes | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ChartPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "select": "void",
      "loaded": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch"
      ],
      "methods": [
        "handler",
        "type",
        "options",
        "mounted",
        "beforeUnmount",
        "initChart",
        "if",
        "getCanvas",
        "getChart",
        "getBase64Image",
        "refresh",
        "reinit",
        "onCanvasClick",
        "generateLegend"
      ]
    }
  },
  "checkbox": {
    "title": "Checkbox",
    "description": "Checkbox is an extension to standard checkbox element with theming.",
    "examples": [
      "<Checkbox v-model=\"checked\" binary />",
      "<div class=\"card flex flex-wrap justify-center gap-4\">\n    <div class=\"flex items-center gap-2\">\n        <Checkbox v-model=\"pizza\" inputId=\"ingredient1\" name=\"pizza\" value=\"Cheese\" />\n        <label for=\"ingredient1\"> Cheese </label>\n    </div>\n    <div class=\"flex items-center gap-2\">\n        <Checkbox v-model=\"pizza\" inputId=\"ingredient2\" name=\"pizza\" value=\"Mushroom\" />\n        <label for=\"ingredient2\"> Mushroom </label>\n    </div>\n    <div class=\"flex items-center gap-2\">\n        <Checkbox v-model=\"pizza\" inputId=\"ingredient3\" name=\"pizza\" value=\"Pepper\" />\n        <label for=\"ingredient3\"> Pepper </label>\n    </div>\n    <div class=\"flex items-center gap-2\">\n        <Checkbox v-model=\"pizza\" inputId=\"ingredient4\" name=\"pizza\" value=\"Onion\" />\n        <label for=\"ingredient4\"> Onion </label>\n    </div>\n</div>",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex justify-center flex-col gap-4\">\n    <div class=\"flex flex-col gap-2\">\n        <CheckboxGroup name=\"ingredient\" class=\"flex flex-wrap gap-4\">\n            <div class=\"flex items-center gap-2\">\n                <Checkbox inputId=\"cheese\" value=\"Cheese\" />\n                <label for=\"cheese\"> Cheese </label>\n            </div>\n            <div class=\"flex items-center gap-2\">\n                <Checkbox inputId=\"mushroom\" value=\"Mushroom\" />\n                <label for=\"mushroom\"> Mushroom </label>\n            </div>\n            <div class=\"flex items-center gap-2\">\n                <Checkbox inputId=\"pepper\" value=\"Pepper\" />\n                <label for=\"pepper\"> Pepper </label>\n            </div>\n            <div class=\"flex items-center gap-2\">\n                <Checkbox inputId=\"onion\" value=\"Onion\" />\n                <label for=\"onion\"> Onion </label>\n            </div>\n        </CheckboxGroup>\n        <Message v-if=\"$form.ingredient?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.ingredient.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<div v-for=\"category of categories\" :key=\"category.key\" class=\"flex items-center gap-2\">\n    <Checkbox v-model=\"selectedCategories\" :inputId=\"category.key\" name=\"category\" :value=\"category.name\" />\n    <label :for=\"category.key\">{{ category.name }}</label>\n</div>",
      "<Checkbox v-model=\"checked\" indeterminate binary />",
      "<Checkbox v-model=\"checked\" binary variant=\"filled\" />",
      "<div class=\"card flex flex-wrap justify-center gap-4\">\n    <div class=\"flex items-center gap-2\">\n        <Checkbox v-model=\"size\" inputId=\"size_small\" name=\"size\" value=\"Small\" size=\"small\" />\n        <label for=\"size_small\" class=\"text-sm\">Small</label>\n    </div>\n    <div class=\"flex items-center gap-2\">\n        <Checkbox v-model=\"size\" inputId=\"size_normal\" name=\"size\" value=\"Normal\" />\n        <label for=\"size_normal\">Normal</label>\n    </div>\n    <div class=\"flex items-center gap-2\">\n        <Checkbox v-model=\"size\" inputId=\"size_large\" name=\"size\" value=\"Large\" size=\"large\" />\n        <label for=\"size_large\" class=\"text-lg\">Large</label>\n    </div>\n</div>",
      "<Checkbox v-model=\"checked\" :invalid=\"!checked\"  binary />",
      "<Checkbox v-model=\"checked1\" binary disabled />\n<Checkbox v-model=\"checked2\" binary disabled />",
      "<label for=\"chkbox1\">Remember Me</label>\n<Checkbox inputId=\"chkbox1\" />\n\n<span id=\"chkbox2\">Remember Me</span>\n<Checkbox aria-labelledby=\"chkbox2\" />\n\n<Checkbox aria-label=\"Remember Me\" />"
    ],
    "props": {
      "value": "any",
      "modelValue": "any",
      "defaultValue": "any",
      "name": "string | undefined",
      "binary": "boolean",
      "indeterminate": "boolean | undefined",
      "size": "'small' | 'large' | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "variant": "HintedString<'outlined' | 'filled'> | undefined | null",
      "readonly": "boolean | undefined",
      "required": "boolean | undefined",
      "tabindex": "number | undefined",
      "trueValue": "any",
      "falseValue": "any",
      "inputId": "string | undefined",
      "inputClass": "object | undefined",
      "inputStyle": "string | object | undefined",
      "ariaLabelledby": "string | undefined",
      "ariaLabel": "string | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<CheckboxPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'update:indeterminate'": "void",
      "'value-change'": "void",
      "change": "void",
      "focus": "void",
      "blur": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "indeterminate",
        "mounted",
        "updated",
        "getPTOptions",
        "onChange",
        "if",
        "onFocus",
        "onBlur",
        "updateIndeterminate",
        "groupName",
        "checked",
        "dataP"
      ]
    }
  },
  "checkboxgroup": {
    "props": {
      "modelValue": "any",
      "defaultValue": "any",
      "name": "string | undefined",
      "invalid": "boolean | undefined",
      "formControl": "any",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<CheckboxGroupPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void"
    },
    "slots": {
      "default": "() => VNode[]"
    },
    "logic": {
      "vueImports": [
        "watch"
      ],
      "methods": [
        "data",
        "name",
        "mounted"
      ]
    }
  },
  "chip": {
    "title": "Chip",
    "description": "Chip represents entities using icons, labels and images.",
    "examples": [
      "<Chip label=\"Action\" />\n<Chip label=\"Comedy\" />\n<Chip label=\"Mystery\" />\n<Chip label=\"Thriller\" removable />",
      "<Chip label=\"Apple\" icon=\"pi pi-apple\" />\n<Chip label=\"Facebook\" icon=\"pi pi-facebook\" />\n<Chip label=\"Google\" icon=\"pi pi-google\" />\n<Chip label=\"Microsoft\" icon=\"pi pi-microsoft\" removable />\n<Chip label=\"GitHub\" icon=\"pi pi-github\" removable>\n    <template #removeicon=\"{ removeCallback, keydownCallback }\">\n        <i class=\"pi pi-minus-circle\" @click=\"removeCallback\" @keydown=\"keydownCallback\" />\n    </template>\n</Chip>",
      "<Chip label=\"Amy Elsner\" image=\"/images/avatar/amyelsner.png\" />\n<Chip label=\"Asiya Javayant\" image=\"/images/avatar/asiyajavayant.png\" />\n<Chip label=\"Onyama Limba\" image=\"/images/avatar/onyamalimba.png\" />\n<Chip label=\"Xuxue Feng\" image=\"/images/avatar/xuxuefeng.png\" removable />",
      "<Chip class=\"py-0 pl-0 pr-4\">\n    <span class=\"bg-primary text-primary-contrast rounded-full w-8 h-8 flex items-center justify-center\">P</span>\n    <span class=\"ml-2 font-medium\">PRIME</span>\n</Chip>"
    ],
    "props": {
      "label": "string | number",
      "icon": "string",
      "image": "string",
      "removable": "boolean",
      "removeIcon": "string",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ChipPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "remove": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "data",
        "onKeydown",
        "close",
        "dataP"
      ]
    }
  },
  "chips": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "mounted"
      ]
    }
  },
  "colorpicker": {
    "title": "ColorPicker",
    "description": "ColorPicker is an input component to select a color.",
    "examples": [
      "<ColorPicker v-model=\"color\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4\">\n    <div class=\"flex flex-col items-center gap-2\">\n        <ColorPicker name=\"color\" />\n        <Message v-if=\"$form.color?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.color.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<ColorPicker v-model=\"color\" inline />",
      "<ColorPicker v-model=\"colorHEX\" inputId=\"cp-hex\" format=\"hex\" class=\"mb-4\" />\n<ColorPicker v-model=\"colorRGB\" inputId=\"cp-rgb\" format=\"rgb\" class=\"mb-4\" />\n<ColorPicker v-model=\"colorHSB\" inputId=\"cp-hsb\" format=\"hsb\" class=\"mb-4\" />",
      "<ColorPicker v-model=\"color\" disabled />"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "composables": [
        "useMoveListener",
        "useUpListener"
      ],
      "vueImports": [
        "ref",
        "watch"
      ],
      "methods": [
        "data",
        "handler",
        "beforeUnmount",
        "if",
        "mounted",
        "pickColor",
        "pickHue",
        "updateModel",
        "updateColorSelector",
        "updateColorHandle",
        "updateHue",
        "updateInput",
        "updateUI",
        "validateHSB",
        "validateRGB",
        "validateHEX",
        "HEXtoRGB",
        "HEXtoHSB",
        "RGBtoHSB",
        "HSBtoRGB",
        "RGBtoHEX",
        "HSBtoHEX",
        "toHSB",
        "onOverlayEnter",
        "onOverlayLeave",
        "onOverlayAfterLeave",
        "alignOverlay",
        "onInputClick",
        "onInputKeydown",
        "onInputBlur",
        "onColorMousedown",
        "onColorDragStart",
        "onDrag",
        "onDragEnd",
        "onHueMousedown",
        "onHueDragStart",
        "isInputClicked",
        "bindDragListeners",
        "unbindDragListeners",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "bindScrollListener",
        "unbindScrollListener",
        "bindResizeListener",
        "unbindResizeListener",
        "bindDocumentMouseMoveListener",
        "unbindDocumentMouseMoveListener",
        "bindDocumentMouseUpListener",
        "unbindDocumentMouseUpListener",
        "pickerRef",
        "colorSelectorRef",
        "colorHandleRef",
        "hueViewRef",
        "hueHandleRef",
        "clearRefs",
        "onOverlayClick"
      ],
      "emits": [
        "show",
        "hide"
      ]
    }
  },
  "column": {
    "props": {
      "columnKey": "string | undefined",
      "field": "string | ((item: any) => string) | undefined",
      "sortField": "string | ((item: any) => string) | undefined",
      "filterField": "string | ((item: any) => string) | undefined",
      "dataType": "string | undefined",
      "sortable": "boolean | undefined",
      "header": "string | undefined",
      "footer": "string | undefined",
      "style": "any",
      "class": "any",
      "headerStyle": "any",
      "headerClass": "any",
      "bodyStyle": "any",
      "bodyClass": "any",
      "footerStyle": "any",
      "footerClass": "any",
      "showFilterMenu": "boolean | undefined",
      "showFilterOperator": "boolean | undefined",
      "showClearButton": "boolean | undefined",
      "showApplyButton": "boolean | undefined",
      "showFilterMatchModes": "boolean | undefined",
      "showAddButton": "boolean | undefined",
      "filterMatchModeOptions": "ColumnFilterMatchModeOptions[]",
      "maxConstraints": "number | undefined",
      "excludeGlobalFilter": "boolean | undefined",
      "filterHeaderStyle": "any",
      "filterHeaderClass": "any",
      "filterMenuStyle": "any",
      "filterMenuClass": "any",
      "selectionMode": "HintedString<'single' | 'multiple'> | undefined",
      "expander": "boolean | undefined",
      "colspan": "number | undefined",
      "rowspan": "number | undefined",
      "rowReorder": "boolean | undefined",
      "rowReorderIcon": "string | undefined",
      "reorderableColumn": "boolean | undefined",
      "rowEditor": "boolean | undefined",
      "frozen": "boolean | undefined",
      "alignFrozen": "HintedString<'left' | 'right'> | undefined",
      "exportable": "boolean | undefined",
      "exportHeader": "string | undefined",
      "exportFooter": "string | undefined",
      "filterMatchMode": "string | undefined",
      "hidden": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ColumnPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "mounted",
        "unmounted"
      ]
    }
  },
  "columngroup": {
    "props": {
      "type": "HintedString<'header' | 'footer'> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ColumnGroupPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "mounted",
        "unmounted"
      ]
    }
  },
  "config": {
    "props": {},
    "emits": {},
    "slots": {}
  },
  "confirmationoptions": {
    "props": {},
    "emits": {},
    "slots": {}
  },
  "confirmationservice": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "install",
        "close"
      ],
      "emits": [
        "close"
      ]
    }
  },
  "confirmdialog": {
    "title": "ConfirmDialog",
    "description": "ConfirmDialog uses a Dialog UI that is integrated with the Confirmation API.",
    "examples": [
      "<ConfirmDialog></ConfirmDialog>\n<Button @click=\"confirm1()\" label=\"Save\" variant=\"outlined\"></Button>\n<Button @click=\"confirm2()\" label=\"Delete\" severity=\"danger\" variant=\"outlined\"></Button>",
      "<ConfirmDialog group=\"positioned\"></ConfirmDialog>\n<div class=\"flex flex-wrap justify-center gap-2 mb-4\">\n    <Button @click=\"confirmPosition('left')\" icon=\"pi pi-arrow-right\" label=\"Left\" severity=\"secondary\" style=\"min-width: 10rem\"></Button>\n    <Button @click=\"confirmPosition('right')\" icon=\"pi pi-arrow-left\" label=\"Right\" severity=\"secondary\" style=\"min-width: 10rem\"></Button>\n</div>\n<div class=\"flex flex-wrap justify-center gap-2 mb-4\">\n    <Button @click=\"confirmPosition('topleft')\" icon=\"pi pi-arrow-down-right\" label=\"TopLeft\" severity=\"secondary\" style=\"min-width: 10rem\"></Button>\n    <Button @click=\"confirmPosition('top')\" icon=\"pi pi-arrow-down\" label=\"Top\" severity=\"secondary\" style=\"min-width: 10rem\"></Button>\n    <Button @click=\"confirmPosition('topright')\" icon=\"pi pi-arrow-down-left\" label=\"TopRight\" severity=\"secondary\" style=\"min-width: 10rem\"></Button>\n</div>\n<div class=\"flex flex-wrap justify-center gap-2\">\n    <Button @click=\"confirmPosition('bottomleft')\" icon=\"pi pi-arrow-up-right\" label=\"BottomLeft\" severity=\"secondary\" style=\"min-width: 10rem\"></Button>\n    <Button @click=\"confirmPosition('bottom')\" icon=\"pi pi-arrow-up\" label=\"Bottom\" severity=\"secondary\" style=\"min-width: 10rem\"></Button>\n    <Button @click=\"confirmPosition('bottomright')\" icon=\"pi pi-arrow-up-left\" label=\"BottomRight\" severity=\"secondary\" style=\"min-width: 10rem\"></Button>\n</div>",
      "<ConfirmDialog group=\"templating\">\n    <template #message=\"slotProps\">\n        <div class=\"flex flex-col items-center w-full gap-4 border-b border-surface-200 dark:border-surface-700\">\n            <i :class=\"slotProps.message.icon\" class=\"!text-6xl text-primary-500\"></i>\n            <p>{{ slotProps.message.message }}</p>\n        </div>\n    </template>\n</ConfirmDialog>\n<Button @click=\"showTemplate()\" label=\"Save\"></Button>",
      "<ConfirmDialog group=\"headless\">\n    <template #container=\"{ message, acceptCallback, rejectCallback }\">\n        <div class=\"flex flex-col items-center p-8 bg-surface-0 dark:bg-surface-900 rounded\">\n            <div class=\"rounded-full bg-primary text-primary-contrast inline-flex justify-center items-center h-24 w-24 -mt-20\">\n                <i class=\"pi pi-question !text-4xl\"></i>\n            </div>\n            <span class=\"font-bold text-2xl block mb-2 mt-6\">{{ message.header }}</span>\n            <p class=\"mb-0\">{{ message.message }}</p>\n            <div class=\"flex items-center gap-2 mt-6\">\n                <Button label=\"Save\" @click=\"acceptCallback\" class=\"w-32\"></Button>\n                <Button label=\"Cancel\" variant=\"outlined\" @click=\"rejectCallback\" class=\"w-32\"></Button>\n            </div>\n        </div>\n    </template>\n</ConfirmDialog>\n<Button @click=\"requireConfirmation()\" label=\"Save\"></Button>",
      "<ConfirmDialog id=\"confirm\" />\n\n<Button @click=\"openDialog()\" label=\"Confirm\" :aria-expanded=\"visible\" :aria-controls=\"visible ? 'confirm' : null\"></Button>",
      "<script setup>\nconst confirm = useConfirm();\nconst isVisible = ref(false);\n\nconst openDialog = () => {\n    confirm.require({\n        message: 'Are you sure you want to proceed?',\n        header: 'Confirmation',\n        onShow: () => {\n            isVisible.value = true;\n        },\n        onHide: () => {\n            isVisible.value = false;\n        }\n    });\n};\n</script>"
    ],
    "props": {
      "group": "string | undefined",
      "breakpoints": "ConfirmDialogBreakpoints",
      "draggable": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ConfirmDialogPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "if",
        "beforeUnmount",
        "accept",
        "reject",
        "onHide",
        "appendTo",
        "target",
        "modal",
        "header",
        "message",
        "blockScroll",
        "position",
        "acceptLabel",
        "rejectLabel",
        "acceptIcon",
        "rejectIcon",
        "autoFocusAccept",
        "autoFocusReject",
        "closeOnEscape"
      ]
    }
  },
  "confirmpopup": {
    "title": "ConfirmPopup",
    "description": "ConfirmPopup displays a confirmation overlay displayed relatively to its target.",
    "examples": [
      "<ConfirmPopup></ConfirmPopup>\n<Button @click=\"confirm1($event)\" label=\"Save\" variant=\"outlined\"></Button>\n<Button @click=\"confirm2($event)\" label=\"Delete\" severity=\"danger\" variant=\"outlined\"></Button>",
      "<ConfirmPopup group=\"templating\">\n    <template #message=\"slotProps\">\n        <div class=\"flex flex-col items-center w-full gap-4 border-b border-surface-200 dark:border-surface-700 p-4 mb-4 pb-0\">\n            <i :class=\"slotProps.message.icon\" class=\"!text-6xl text-primary-500\"></i>\n            <p>{{ slotProps.message.message }}</p>\n        </div>\n    </template>\n</ConfirmPopup>\n<Button @click=\"showTemplate($event)\" label=\"Save\"></Button>",
      "<ConfirmPopup group=\"headless\">\n    <template #container=\"{ message, acceptCallback, rejectCallback }\">\n        <div class=\"rounded p-4\">\n            <span>{{ message.message }}</span>\n            <div class=\"flex items-center gap-2 mt-4\">\n                <Button label=\"Save\" @click=\"acceptCallback\" size=\"small\"></Button>\n                <Button label=\"Cancel\" variant=\"outlined\" @click=\"rejectCallback\" severity=\"secondary\" size=\"small\" text></Button>\n            </div>\n        </div>\n    </template>\n</ConfirmPopup>\n<Button @click=\"requireConfirmation($event)\" label=\"Save\"></Button>",
      "<ConfirmPopup id=\"confirm\" aria-label=\"popup\" />\n\n<Button @click=\"openPopup($event)\" label=\"Confirm\" id=\"confirmButton\" :aria-expanded=\"isVisible\" :aria-controls=\"isVisible ? 'confirm' : null\" />",
      "<script setup>\nconst confirm = useConfirm();\nconst isVisible = ref(false);\nconst openPopup = (event) => {\n    confirm.require({\n        target: event.currentTarget,\n        message: 'Are you sure you want to proceed?',\n        header: 'Confirmation',\n        onShow: () => {\n            isVisible.value = true;\n        },\n        onHide: () => {\n            isVisible.value = false;\n        }\n    });\n}\n</script>"
    ],
    "props": {
      "group": "string",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ConfirmPopupPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "if",
        "beforeUnmount",
        "accept",
        "reject",
        "onHide",
        "onAcceptKeydown",
        "onRejectKeydown",
        "onEnter",
        "onAfterEnter",
        "onLeave",
        "onAfterLeave",
        "alignOverlay",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "bindScrollListener",
        "unbindScrollListener",
        "bindResizeListener",
        "unbindResizeListener",
        "focus",
        "isTargetClicked",
        "containerRef",
        "onOverlayClick",
        "onOverlayKeydown",
        "message",
        "acceptLabel",
        "rejectLabel",
        "acceptIcon",
        "rejectIcon"
      ]
    }
  },
  "contextmenu": {
    "title": "ContextMenu",
    "description": "ContextMenu displays an overlay menu to display actions related to an element.",
    "examples": [
      "<img alt=\"Logo\" src=\"/images/nature/nature2.jpg\" class=\"w-full md:w-[30rem] rounded shadow-lg\" @contextmenu=\"onImageRightClick\" aria-haspopup=\"true\" />\n<ContextMenu ref=\"menu\" :model=\"items\" />",
      "<ContextMenu global :model=\"items\" />",
      "<ul class=\"m-0 p-0 list-none border border-surface-200 dark:border-surface-700 rounded p-4 flex flex-col gap-2 w-full md:w-[30rem]\">\n    <li\n        v-for=\"product in products\"\n        :key=\"product.id\"\n        :class=\"['p-2 hover:bg-surface-100 dark:hover:bg-surface-800 rounded border border-transparent transition-all transition-duration-200', { 'border-primary': selectedId === product.id }]\"\n        @contextmenu=\"onRightClick($event, product.id)\"\n    >\n        <div class=\"flex flex-wrap p-2 items-center gap-4\">\n            <img class=\"w-16 shrink-0 rounded\" :src=\"'/images/product/' + product.image\" :alt=\"product.name\" />\n            <div class=\"flex-1 flex flex-col gap-1\">\n                <span class=\"font-bold\">{{ product.name }}</span>\n                <div class=\"flex items-center gap-2\">\n                    <i class=\"pi pi-tag text-sm\"></i>\n                    <span>{{ product.category }}</span>\n                </div>\n            </div>\n            <span class=\"font-bold ml-8\">${{ product.price }}</span>\n        </div>\n    </li>\n</ul>\n<ContextMenu ref=\"menu\" :model=\"items\" @hide=\"selectedId = null\">\n    <template #item=\"{ item, props }\">\n        <a v-ripple class=\"flex items-center\" v-bind=\"props.action\">\n            <span :class=\"item.icon\" />\n            <span class=\"ml-2\">{{ item.label }}</span>\n            <Badge v-if=\"item.badge\" class=\"ml-auto\" :value=\"item.badge\" />\n            <span v-if=\"item.shortcut\" class=\"ml-auto border border-surface rounded bg-emphasis text-muted-color text-xs p-1\">{{ item.shortcut }}</span>\n            <i v-if=\"item.items\" class=\"pi pi-angle-right ml-auto\"></i>\n        </a>\n    </template>\n</ContextMenu>",
      "<ul class=\"m-0 list-none border border-surface rounded p-4 flex flex-col gap-2 w-full sm:w-96\">\n    <li\n        v-for=\"user in users\"\n        :key=\"user.id\"\n        :class=\"['p-2 hover:bg-emphasis rounded border border-transparent transition-all duration-200 flex items-center justify-content-between', { 'border-primary': selectedUser?.id === user.id }]\"\n        @contextmenu=\"onRightClick($event, user)\"\n    >\n        <div class=\"flex flex-1 items-center gap-2\">\n            <img :alt=\"user.name\" :src=\"`https://primefaces.org/cdn/primevue/images/avatar/${user.image}`\" class=\"w-8 h-8\" />\n            <span class=\"font-bold\">{{ user.name }}</span>\n        </div>\n        <Tag :value=\"user.role\" :severity=\"getBadge(user)\" />\n    </li>\n</ul>\n<ContextMenu ref=\"menu\" :model=\"items\" @hide=\"selectedUser = null\" />\n<Toast />",
      "<span class=\"inline-flex items-center justify-center border-2 border-primary rounded w-16 h-16\" @contextmenu=\"onRightClick\" aria-haspopup=\"true\">\n    <svg width=\"35\" height=\"40\" viewBox=\"0 0 35 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"...\" fill=\"var(--p-primary-color)\" />\n        <path d=\"...\" fill=\"var(--p-text-color)\" />\n    </svg>\n</span>\n<ContextMenu ref=\"routemenu\" :model=\"items\">\n    <template #item=\"{ item, props }\">\n        <router-link v-if=\"item.route\" v-slot=\"{ href, navigate }\" :to=\"item.route\" custom>\n            <a v-ripple :href=\"href\" v-bind=\"props.action\" @click=\"navigate\">\n                <span :class=\"item.icon\" />\n                <span class=\"ml-2\">{{ item.label }}</span>\n            </a>\n        </router-link>\n        <a v-else v-ripple :href=\"item.url\" :target=\"item.target\" v-bind=\"props.action\">\n            <span :class=\"item.icon\" />\n            <span class=\"ml-2\">{{ item.label }}</span>\n        </a>\n    </template>\n</ContextMenu>"
    ],
    "props": {
      "model": "MenuItem[] | undefined",
      "breakpoint": "string | undefined",
      "global": "boolean | undefined",
      "appendTo": "HintedString<'body' | 'self'> | undefined | HTMLElement",
      "autoZIndex": "boolean | undefined",
      "baseZIndex": "number | undefined",
      "tabindex": "number | string | undefined",
      "ariaLabel": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ContextMenuPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "focus": "void",
      "blur": "void",
      "'before-show'": "void",
      "'before-hide'": "void",
      "show": "void",
      "hide": "void"
    },
    "slots": {},
    "logic": {
      "composables": [
        "useEnter",
        "useMove"
      ],
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "activeItemPath",
        "if",
        "mounted",
        "beforeUnmount",
        "getItemProp",
        "getItemLabel",
        "isItemDisabled",
        "isItemVisible",
        "isItemGroup",
        "isItemSeparator",
        "getProccessedItemLabel",
        "isProccessedItemGroup",
        "toggle",
        "show",
        "hide",
        "onFocus",
        "onBlur",
        "onKeyDown",
        "onItemChange",
        "onItemClick",
        "onItemMouseEnter",
        "onItemMouseMove",
        "onArrowDownKey",
        "onArrowUpKey",
        "onArrowLeftKey",
        "onArrowRightKey",
        "onHomeKey",
        "onEndKey",
        "onEnterKey",
        "onSpaceKey",
        "onEscapeKey",
        "onTabKey",
        "onEnter",
        "onAfterEnter",
        "onLeave",
        "onAfterLeave",
        "position",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "bindResizeListener",
        "unbindResizeListener",
        "bindDocumentContextMenuListener",
        "unbindDocumentContextMenuListener",
        "bindMatchMediaListener",
        "unbindMatchMediaListener",
        "isItemMatched",
        "isValidItem",
        "isValidSelectedItem",
        "isSelected",
        "findFirstItemIndex",
        "findLastItemIndex",
        "findNextItemIndex",
        "findPrevItemIndex",
        "findSelectedItemIndex",
        "findFirstFocusedItemIndex",
        "findLastFocusedItemIndex",
        "searchItems",
        "changeFocusedItemIndex",
        "scrollInView",
        "createProcessedItems",
        "containerRef",
        "listRef",
        "processedItems",
        "visibleItems",
        "focusedItemIdx"
      ],
      "emits": [
        "before-show",
        "before-hide",
        "show",
        "hide"
      ]
    }
  },
  "datatable": {
    "title": "DataTable",
    "description": "DataTable displays data in tabular format.",
    "examples": [
      "<DataTable :value=\"products\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\"></Column>\n</DataTable>",
      "<DataTable :value=\"products\" tableStyle=\"min-width: 50rem\">\n    <Column v-for=\"col of columns\" :key=\"col.field\" :field=\"col.field\" :header=\"col.header\"></Column>\n</DataTable>",
      "<DataTable :value=\"products\" tableStyle=\"min-width: 50rem\">\n    <template #header>\n        <div class=\"flex flex-wrap items-center justify-between gap-2\">\n            <span class=\"text-xl font-bold\">Products</span>\n            <Button icon=\"pi pi-refresh\" rounded raised />\n        </div>\n    </template>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column header=\"Image\">\n        <template #body=\"slotProps\">\n            <img :src=\"`https://primefaces.org/cdn/primevue/images/product/${slotProps.data.image}`\" :alt=\"slotProps.data.image\" class=\"w-24 rounded\" />\n        </template>\n    </Column>\n    <Column field=\"price\" header=\"Price\">\n        <template #body=\"slotProps\">\n            {{ formatCurrency(slotProps.data.price) }}\n        </template>\n    </Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"rating\" header=\"Reviews\">\n        <template #body=\"slotProps\">\n            <Rating :modelValue=\"slotProps.data.rating\" readonly />\n        </template>\n    </Column>\n    <Column header=\"Status\">\n        <template #body=\"slotProps\">\n            <Tag :value=\"slotProps.data.inventoryStatus\" :severity=\"getSeverity(slotProps.data)\" />\n        </template>\n    </Column>\n    <template #footer> In total there are {{ products ? products.length : 0 }} products. </template>\n</DataTable>",
      "<SelectButton v-model=\"size\" :options=\"sizeOptions\" optionLabel=\"label\" dataKey=\"label\" />\n<DataTable :value=\"products\" :size=\"size.value\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\"></Column>\n</DataTable>",
      "<DataTable :value=\"products\" showGridlines tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\"></Column>\n</DataTable>",
      "<DataTable :value=\"products\" stripedRows tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\"></Column>\n</DataTable>",
      "<DataTable :value=\"customers\" paginator :rows=\"5\" :rowsPerPageOptions=\"[5, 10, 20, 50]\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" style=\"width: 25%\"></Column>\n    <Column field=\"country.name\" header=\"Country\" style=\"width: 25%\"></Column>\n    <Column field=\"company\" header=\"Company\" style=\"width: 25%\"></Column>\n    <Column field=\"representative.name\" header=\"Representative\" style=\"width: 25%\"></Column>\n</DataTable>",
      "<DataTable :value=\"customers\" paginator :rows=\"5\" :rowsPerPageOptions=\"[5, 10, 20, 50]\" tableStyle=\"min-width: 50rem\"\n        paginatorTemplate=\"RowsPerPageDropdown FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink\"\n        currentPageReportTemplate=\"{first} to {last} of {totalRecords}\">\n    <template #paginatorstart>\n        <Button type=\"button\" icon=\"pi pi-refresh\" text />\n    </template>\n    <template #paginatorend>\n        <Button type=\"button\" icon=\"pi pi-download\" text />\n    </template>\n    <Column field=\"name\" header=\"Name\" style=\"width: 25%\"></Column>\n    <Column field=\"country.name\" header=\"Country\" style=\"width: 25%\"></Column>\n    <Column field=\"company\" header=\"Company\" style=\"width: 25%\"></Column>\n    <Column field=\"representative.name\" header=\"Representative\" style=\"width: 25%\"></Column>\n</DataTable>",
      "<DataTable :value=\"customers\" paginator :rows=\"5\" :rowsPerPageOptions=\"[5, 10, 20, 50]\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" style=\"width: 25%\"></Column>\n    <Column field=\"country.name\" header=\"Country\" style=\"width: 25%\"></Column>\n    <Column field=\"company\" header=\"Company\" style=\"width: 25%\"></Column>\n    <Column field=\"representative.name\" header=\"Representative\" style=\"width: 25%\"></Column>\n    <template #paginatorcontainer=\"{ first, last, page, pageCount, prevPageCallback, nextPageCallback, totalRecords }\">\n        <div class=\"flex items-center gap-4 border border-primary bg-transparent rounded-full w-full py-1 px-2 justify-between\">\n            <Button icon=\"pi pi-chevron-left\" rounded text @click=\"prevPageCallback\" :disabled=\"page === 0\" />\n            <div class=\"text-color font-medium\">\n                <span class=\"hidden sm:block\">Showing {{ first }} to {{ last }} of {{ totalRecords }}</span>\n                <span class=\"block sm:hidden\">Page {{ page + 1 }} of {{ pageCount }}</span>\n            </div>\n            <Button icon=\"pi pi-chevron-right\" rounded text @click=\"nextPageCallback\" :disabled=\"page === pageCount - 1\" />\n        </div>\n    </template>\n</DataTable>",
      "<DataTable :value=\"products\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\" sortable style=\"width: 25%\"></Column>\n    <Column field=\"name\" header=\"Name\" sortable style=\"width: 25%\"></Column>\n    <Column field=\"category\" header=\"Category\" sortable style=\"width: 25%\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\" sortable style=\"width: 25%\"></Column>\n</DataTable>",
      "<DataTable :value=\"products\" sortMode=\"multiple\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\" sortable style=\"width: 25%\"></Column>\n    <Column field=\"name\" header=\"Name\" sortable style=\"width: 25%\"></Column>\n    <Column field=\"category\" header=\"Category\" sortable style=\"width: 25%\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\" sortable style=\"width: 25%\"></Column>\n</DataTable>",
      "<DataTable :value=\"products\" sortField=\"price\" :sortOrder=\"-1\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\" sortable style=\"width: 20%\"></Column>\n    <Column field=\"name\" header=\"Name\" sortable style=\"width: 20%\"></Column>\n    <Column field=\"price\" header=\"Price\" :sortable=\"true\">\n        <template #body=\"slotProps\">\n            {{ formatCurrency(slotProps.data.price) }}\n        </template>\n    </Column>\n    <Column field=\"category\" header=\"Category\" sortable style=\"width: 20%\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\" sortable style=\"width: 20%\"></Column>\n</DataTable>",
      "<DataTable :value=\"products\" removableSort tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\" sortable style=\"width: 25%\"></Column>\n    <Column field=\"name\" header=\"Name\" sortable style=\"width: 25%\"></Column>\n    <Column field=\"category\" header=\"Category\" sortable style=\"width: 25%\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\" sortable style=\"width: 25%\"></Column>\n</DataTable>",
      "<DataTable v-model:filters=\"filters\" :value=\"customers\" paginator :rows=\"10\" dataKey=\"id\" filterDisplay=\"row\" :loading=\"loading\"\n        :globalFilterFields=\"['name', 'country.name', 'representative.name', 'status']\">\n    <template #header>\n        <div class=\"flex justify-end\">\n            <IconField>\n                <InputIcon>\n                    <i class=\"pi pi-search\" />\n                </InputIcon>\n                <InputText v-model=\"filters['global'].value\" placeholder=\"Keyword Search\" />\n            </IconField>\n        </div>\n    </template>\n    <template #empty> No customers found. </template>\n    <template #loading> Loading customers data. Please wait. </template>\n    <Column field=\"name\" header=\"Name\" style=\"min-width: 12rem\">\n        <template #body=\"{ data }\">\n            {{ data.name }}\n        </template>\n        <template #filter=\"{ filterModel, filterCallback }\">\n            <InputText v-model=\"filterModel.value\" type=\"text\" @input=\"filterCallback()\" placeholder=\"Search by name\" />\n        </template>\n    </Column>\n    <Column header=\"Country\" filterField=\"country.name\" style=\"min-width: 12rem\">\n        <template #body=\"{ data }\">\n            <div class=\"flex items-center gap-2\">\n                <img alt=\"flag\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`flag flag-${data.country.code}`\" style=\"width: 24px\" />\n                <span>{{ data.country.name }}</span>\n            </div>\n        </template>\n        <template #filter=\"{ filterModel, filterCallback }\">\n            <InputText v-model=\"filterModel.value\" type=\"text\" @input=\"filterCallback()\" placeholder=\"Search by country\" />\n        </template>\n    </Column>\n    <Column header=\"Agent\" filterField=\"representative\" :showFilterMenu=\"false\" style=\"min-width: 14rem\">\n        <template #body=\"{ data }\">\n            <div class=\"flex items-center gap-2\">\n                <img :alt=\"data.representative.name\" :src=\"`https://primefaces.org/cdn/primevue/images/avatar/${data.representative.image}`\" style=\"width: 32px\" />\n                <span>{{ data.representative.name }}</span>\n            </div>\n        </template>\n        <template #filter=\"{ filterModel, filterCallback }\">\n            <MultiSelect v-model=\"filterModel.value\" @change=\"filterCallback()\" :options=\"representatives\" optionLabel=\"name\" placeholder=\"Any\" style=\"min-width: 14rem\" :maxSelectedLabels=\"1\">\n                <template #option=\"slotProps\">\n                    <div class=\"flex items-center gap-2\">\n                        <img :alt=\"slotProps.option.name\" :src=\"`https://primefaces.org/cdn/primevue/images/avatar/${slotProps.option.image}`\" style=\"width: 32px\" />\n                        <span>{{ slotProps.option.name }}</span>\n                    </div>\n                </template>\n            </MultiSelect>\n        </template>\n    </Column>\n    <Column field=\"status\" header=\"Status\" :showFilterMenu=\"false\" style=\"min-width: 12rem\">\n        <template #body=\"{ data }\">\n            <Tag :value=\"data.status\" :severity=\"getSeverity(data.status)\" />\n        </template>\n        <template #filter=\"{ filterModel, filterCallback }\">\n            <Select v-model=\"filterModel.value\" @change=\"filterCallback()\" :options=\"statuses\" placeholder=\"Select One\" style=\"min-width: 12rem\" :showClear=\"true\">\n                <template #option=\"slotProps\">\n                    <Tag :value=\"slotProps.option\" :severity=\"getSeverity(slotProps.option)\" />\n                </template>\n            </Select>\n        </template>\n    </Column>\n    <Column field=\"verified\" header=\"Verified\" dataType=\"boolean\" style=\"min-width: 6rem\">\n        <template #body=\"{ data }\">\n            <i class=\"pi\" :class=\"{ 'pi-check-circle text-green-500': data.verified, 'pi-times-circle text-red-400': !data.verified }\"></i>\n        </template>\n        <template #filter=\"{ filterModel, filterCallback }\">\n            <Checkbox v-model=\"filterModel.value\" :indeterminate=\"filterModel.value === null\" binary @change=\"filterCallback()\" />\n        </template>\n    </Column>\n</DataTable>",
      "<DataTable v-model:filters=\"filters\" :value=\"customers\" paginator showGridlines :rows=\"10\" dataKey=\"id\"\n        filterDisplay=\"menu\" :loading=\"loading\" :globalFilterFields=\"['name', 'country.name', 'representative.name', 'balance', 'status']\">\n    <template #header>\n        <div class=\"flex justify-between\">\n            <Button type=\"button\" icon=\"pi pi-filter-slash\" label=\"Clear\" variant=\"outlined\" @click=\"clearFilter()\" />\n            <IconField>\n                <InputIcon>\n                    <i class=\"pi pi-search\" />\n                </InputIcon>\n                <InputText v-model=\"filters['global'].value\" placeholder=\"Keyword Search\" />\n            </IconField>\n        </div>\n    </template>\n    <template #empty> No customers found. </template>\n    <template #loading> Loading customers data. Please wait. </template>\n    <Column field=\"name\" header=\"Name\" style=\"min-width: 12rem\">\n        <template #body=\"{ data }\">\n            {{ data.name }}\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <InputText v-model=\"filterModel.value\" type=\"text\" placeholder=\"Search by name\" />\n        </template>\n    </Column>\n    <Column header=\"Country\" filterField=\"country.name\" style=\"min-width: 12rem\">\n        <template #body=\"{ data }\">\n            <div class=\"flex items-center gap-2\">\n                <img alt=\"flag\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`flag flag-${data.country.code}`\" style=\"width: 24px\" />\n                <span>{{ data.country.name }}</span>\n            </div>\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <InputText v-model=\"filterModel.value\" type=\"text\" placeholder=\"Search by country\" />\n        </template>\n        <template #filterclear=\"{ filterCallback }\">\n            <Button type=\"button\" icon=\"pi pi-times\" @click=\"filterCallback()\" severity=\"secondary\"></Button>\n        </template>\n        <template #filterapply=\"{ filterCallback }\">\n            <Button type=\"button\" icon=\"pi pi-check\" @click=\"filterCallback()\" severity=\"success\"></Button>\n        </template>\n        <template #filterfooter>\n            <div class=\"px-4 pt-0 pb-4 text-center\">Customized Buttons</div>\n        </template>\n    </Column>\n    <Column header=\"Agent\" filterField=\"representative\" :showFilterMatchModes=\"false\" :filterMenuStyle=\"{ width: '14rem' }\" style=\"min-width: 14rem\">\n        <template #body=\"{ data }\">\n            <div class=\"flex items-center gap-2\">\n                <img :alt=\"data.representative.name\" :src=\"`https://primefaces.org/cdn/primevue/images/avatar/${data.representative.image}`\" style=\"width: 32px\" />\n                <span>{{ data.representative.name }}</span>\n            </div>\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <MultiSelect v-model=\"filterModel.value\" :options=\"representatives\" optionLabel=\"name\" placeholder=\"Any\">\n                <template #option=\"slotProps\">\n                    <div class=\"flex items-center gap-2\">\n                        <img :alt=\"slotProps.option.name\" :src=\"`https://primefaces.org/cdn/primevue/images/avatar/${slotProps.option.image}`\" style=\"width: 32px\" />\n                        <span>{{ slotProps.option.name }}</span>\n                    </div>\n                </template>\n            </MultiSelect>\n        </template>\n    </Column>\n    <Column header=\"Date\" filterField=\"date\" dataType=\"date\" style=\"min-width: 10rem\">\n        <template #body=\"{ data }\">\n            {{ formatDate(data.date) }}\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <DatePicker v-model=\"filterModel.value\" dateFormat=\"mm/dd/yy\" placeholder=\"mm/dd/yyyy\" />\n        </template>\n    </Column>\n    <Column header=\"Balance\" filterField=\"balance\" dataType=\"numeric\" style=\"min-width: 10rem\">\n        <template #body=\"{ data }\">\n            {{ formatCurrency(data.balance) }}\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <InputNumber v-model=\"filterModel.value\" mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\n        </template>\n    </Column>\n    <Column header=\"Status\" field=\"status\" :filterMenuStyle=\"{ width: '14rem' }\" style=\"min-width: 12rem\">\n        <template #body=\"{ data }\">\n            <Tag :value=\"data.status\" :severity=\"getSeverity(data.status)\" />\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <Select v-model=\"filterModel.value\" :options=\"statuses\" placeholder=\"Select One\" showClear>\n                <template #option=\"slotProps\">\n                    <Tag :value=\"slotProps.option\" :severity=\"getSeverity(slotProps.option)\" />\n                </template>\n            </Select>\n        </template>\n    </Column>\n    <Column field=\"activity\" header=\"Activity\" :showFilterMatchModes=\"false\" style=\"min-width: 12rem\">\n        <template #body=\"{ data }\">\n            <ProgressBar :value=\"data.activity\" :showValue=\"false\" style=\"height: 6px\"></ProgressBar>\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <Slider v-model=\"filterModel.value\" range class=\"m-4\"></Slider>\n            <div class=\"flex items-center justify-between px-2\">\n                <span>{{ filterModel.value ? filterModel.value[0] : 0 }}</span>\n                <span>{{ filterModel.value ? filterModel.value[1] : 100 }}</span>\n            </div>\n        </template>\n    </Column>\n    <Column field=\"verified\" header=\"Verified\" dataType=\"boolean\" bodyClass=\"text-center\" style=\"min-width: 8rem\">\n        <template #body=\"{ data }\">\n            <i class=\"pi\" :class=\"{ 'pi-check-circle text-green-500 ': data.verified, 'pi-times-circle text-red-500': !data.verified }\"></i>\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <label for=\"verified-filter\" class=\"font-bold\"> Verified </label>\n            <Checkbox v-model=\"filterModel.value\" :indeterminate=\"filterModel.value === null\" binary inputId=\"verified-filter\" />\n        </template>\n    </Column>\n</DataTable>",
      "<ToggleSwitch v-model=\"metaKey\" inputId=\"input-metakey\" />\n\n<DataTable v-model:selection=\"selectedProduct\" :value=\"products\" selectionMode=\"single\" :metaKeySelection=\"metaKey\" dataKey=\"id\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\"></Column>\n</DataTable>",
      "<ToggleSwitch v-model=\"metaKey\" inputId=\"input-metakey\" />\n\n<DataTable v-model:selection=\"selectedProducts\" :value=\"products\" selectionMode=\"multiple\" :metaKeySelection=\"metaKey\" dataKey=\"id\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\"></Column>\n</DataTable>",
      "<DataTable v-model:selection=\"selectedProduct\" :value=\"products\" dataKey=\"id\" tableStyle=\"min-width: 50rem\">\n    <Column selectionMode=\"single\" headerStyle=\"width: 3rem\"></Column>\n    <Column field=\"code\" header=\"Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\"></Column>\n</DataTable>",
      "<DataTable v-model:selection=\"selectedProducts\" :value=\"products\" dataKey=\"id\" tableStyle=\"min-width: 50rem\">\n    <Column selectionMode=\"multiple\" headerStyle=\"width: 3rem\"></Column>\n    <Column field=\"code\" header=\"Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\"></Column>\n</DataTable>",
      "<DataTable :value=\"products\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\"></Column>\n    <Column class=\"w-24 !text-end\">\n        <template #body=\"{ data }\">\n            <Button icon=\"pi pi-search\" @click=\"selectRow(data)\" severity=\"secondary\" rounded></Button>\n        </template>\n    </Column>\n</DataTable>",
      "<DataTable v-model:selection=\"selectedProduct\" :value=\"products\" selectionMode=\"single\" dataKey=\"id\" :metaKeySelection=\"false\"\n        @rowSelect=\"onRowSelect\" @rowUnselect=\"onRowUnselect\" tableStyle=\"min-width: 50rem\">\n    <Column selectionMode=\"single\" headerStyle=\"width: 3rem\"></Column>\n    <Column field=\"code\" header=\"Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\"></Column>\n</DataTable>",
      "<DataTable v-model:expandedRows=\"expandedRows\" :value=\"products\" dataKey=\"id\"\n        @rowExpand=\"onRowExpand\" @rowCollapse=\"onRowCollapse\" tableStyle=\"min-width: 60rem\">\n    <template #header>\n        <div class=\"flex flex-wrap justify-end gap-2\">\n            <Button variant=\"text\" icon=\"pi pi-plus\" label=\"Expand All\" @click=\"expandAll\" />\n            <Button variant=\"text\" icon=\"pi pi-minus\" label=\"Collapse All\" @click=\"collapseAll\" />\n        </div>\n    </template>\n    <Column expander style=\"width: 5rem\" />\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column header=\"Image\">\n        <template #body=\"slotProps\">\n            <img :src=\"`https://primefaces.org/cdn/primevue/images/product/${slotProps.data.image}`\" :alt=\"slotProps.data.image\" class=\"shadow-lg\" width=\"64\" />\n        </template>\n    </Column>\n    <Column field=\"price\" header=\"Price\">\n        <template #body=\"slotProps\">\n            {{ formatCurrency(slotProps.data.price) }}\n        </template>\n    </Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"rating\" header=\"Reviews\">\n        <template #body=\"slotProps\">\n            <Rating :modelValue=\"slotProps.data.rating\" readonly />\n        </template>\n    </Column>\n    <Column header=\"Status\">\n        <template #body=\"slotProps\">\n            <Tag :value=\"slotProps.data.inventoryStatus\" :severity=\"getSeverity(slotProps.data)\" />\n        </template>\n    </Column>\n    <template #expansion=\"slotProps\">\n        <div class=\"p-4\">\n            <h5>Orders for {{ slotProps.data.name }}</h5>\n            <DataTable :value=\"slotProps.data.orders\">\n                <Column field=\"id\" header=\"Id\" sortable></Column>\n                <Column field=\"customer\" header=\"Customer\" sortable></Column>\n                <Column field=\"date\" header=\"Date\" sortable></Column>\n                <Column field=\"amount\" header=\"Amount\" sortable>\n                    <template #body=\"slotProps\">\n                        {{ formatCurrency(slotProps.data.amount) }}\n                    </template>\n                </Column>\n                <Column field=\"status\" header=\"Status\" sortable>\n                    <template #body=\"slotProps\">\n                        <Tag :value=\"slotProps.data.status.toLowerCase()\" :severity=\"getOrderSeverity(slotProps.data)\" />\n                    </template>\n                </Column>\n                <Column headerStyle=\"width:4rem\">\n                    <template #body>\n                        <Button icon=\"pi pi-search\" />\n                    </template>\n                </Column>\n            </DataTable>\n        </div>\n    </template>\n</DataTable>",
      "<DataTable :value=\"products\" editMode=\"cell\" @cell-edit-complete=\"onCellEditComplete\"\n    :pt=\"{\n        table: { style: 'min-width: 50rem' },\n        column: {\n            bodycell: ({ state }) => ({\n                class: [{ '!py-0': state['d_editing'] }]\n            })\n        }\n    }\"\n>\n    <Column v-for=\"col of columns\" :key=\"col.field\" :field=\"col.field\" :header=\"col.header\" style=\"width: 25%\">\n        <template #body=\"{ data, field }\">\n            {{ field === 'price' ? formatCurrency(data[field]) : data[field] }}\n        </template>\n        <template #editor=\"{ data, field }\">\n            <template v-if=\"field !== 'price'\">\n                <InputText v-model=\"data[field]\" autofocus fluid />\n            </template>\n            <template v-else>\n                <InputNumber v-model=\"data[field]\" mode=\"currency\" currency=\"USD\" locale=\"en-US\" autofocus fluid />\n            </template>\n        </template>\n    </Column>\n</DataTable>",
      "<DataTable v-model:editingRows=\"editingRows\" :value=\"products\" editMode=\"row\" dataKey=\"id\" @row-edit-save=\"onRowEditSave\"\n    :pt=\"{\n        table: { style: 'min-width: 50rem' },\n        column: {\n            bodycell: ({ state }) => ({\n                style:  state['d_editing']&&'padding-top: 0.75rem; padding-bottom: 0.75rem'\n            })\n        }\n    }\"\n>\n    <Column field=\"code\" header=\"Code\" style=\"width: 20%\">\n        <template #editor=\"{ data, field }\">\n            <InputText v-model=\"data[field]\" />\n        </template>\n    </Column>\n    <Column field=\"name\" header=\"Name\" style=\"width: 20%\">\n        <template #editor=\"{ data, field }\">\n            <InputText v-model=\"data[field]\" fluid />\n        </template>\n    </Column>\n    <Column field=\"inventoryStatus\" header=\"Status\" style=\"width: 20%\">\n        <template #editor=\"{ data, field }\">\n            <Select v-model=\"data[field]\" :options=\"statuses\" optionLabel=\"label\" optionValue=\"value\" placeholder=\"Select a Status\" fluid>\n                <template #option=\"slotProps\">\n                    <Tag :value=\"slotProps.option.value\" :severity=\"getStatusLabel(slotProps.option.value)\" />\n                </template>\n            </Select>\n        </template>\n        <template #body=\"slotProps\">\n            <Tag :value=\"slotProps.data.inventoryStatus\" :severity=\"getStatusLabel(slotProps.data.inventoryStatus)\" />\n        </template>\n    </Column>\n    <Column field=\"price\" header=\"Price\" style=\"width: 20%\">\n        <template #body=\"{ data, field }\">\n            {{ formatCurrency(data[field]) }}\n        </template>\n        <template #editor=\"{ data, field }\">\n            <InputNumber v-model=\"data[field]\" mode=\"currency\" currency=\"USD\" locale=\"en-US\" fluid />\n        </template>\n    </Column>\n    <Column :rowEditor=\"true\" style=\"width: 10%; min-width: 8rem\" bodyStyle=\"text-align:center\"></Column>\n</DataTable>",
      "<DataTable :value=\"customers\" scrollable scrollHeight=\"400px\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"country.name\" header=\"Country\"></Column>\n    <Column field=\"representative.name\" header=\"Representative\"></Column>\n    <Column field=\"company\" header=\"Company\"></Column>\n</DataTable>",
      "<Button label=\"Show\" icon=\"pi pi-external-link\" @click=\"dialogVisible = true\" />\n<Dialog v-model:visible=\"dialogVisible\" header=\"Flex Scroll\" :style=\"{ width: '75vw' }\" maximizable modal :contentStyle=\"{ height: '300px' }\">\n    <DataTable :value=\"customers\" scrollable scrollHeight=\"flex\" tableStyle=\"min-width: 50rem\">\n        <Column field=\"name\" header=\"Name\"></Column>\n        <Column field=\"country.name\" header=\"Country\"></Column>\n        <Column field=\"representative.name\" header=\"Representative\"></Column>\n        <Column field=\"company\" header=\"Company\"></Column>\n    </DataTable>\n    <template #footer>\n        <Button label=\"Ok\" icon=\"pi pi-check\" @click=\"dialogVisible = false\" />\n    </template>\n</Dialog>",
      "<DataTable :value=\"customers\" scrollable scrollHeight=\"400px\">\n    <Column field=\"id\" header=\"Id\" footer=\"Id\" style=\"min-width: 100px\"></Column>\n    <Column field=\"name\" header=\"Name\" footer=\"Name\" style=\"min-width: 200px\"></Column>\n    <Column field=\"country.name\" header=\"Country\" footer=\"Country\" style=\"min-width: 200px\"></Column>\n    <Column field=\"date\" header=\"Date\" footer=\"Date\" style=\"min-width: 200px\"></Column>\n    <Column field=\"balance\" header=\"Balance\" footer=\"Balance\" style=\"min-width: 200px\">\n        <template #body=\"{ data }\">\n            {{ formatCurrency(data.balance) }}\n        </template>\n    </Column>\n    <Column field=\"company\" header=\"Company\" footer=\"Company\" style=\"min-width: 200px\"></Column>\n    <Column field=\"status\" header=\"Status\" footer=\"Status\" style=\"min-width: 200px\"></Column>\n    <Column field=\"activity\" header=\"Activity\" footer=\"Activity\" style=\"min-width: 200px\"></Column>\n    <Column field=\"representative.name\" header=\"Representative\" footer=\"Representative\" style=\"min-width: 200px\"></Column>\n</DataTable>",
      "<DataTable\n    :value=\"customers\"\n    :frozenValue=\"lockedCustomers\"\n    scrollable\n    scrollHeight=\"400px\"\n    :pt=\"{\n        table: { style: 'min-width: 50rem' },\n        bodyrow: ({ props }) => ({\n            class: [{ 'font-bold': props.frozenRow }]\n        })\n    }\"\n>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"country.name\" header=\"Country\"></Column>\n    <Column field=\"representative.name\" header=\"Representative\"></Column>\n    <Column field=\"status\" header=\"Status\"></Column>\n    <Column style=\"flex: 0 0 4rem\">\n        <template #body=\"{ data, frozenRow, index }\">\n            <Button type=\"button\" :icon=\"frozenRow ? 'pi pi-lock-open' : 'pi pi-lock'\" :disabled=\"frozenRow ? false : lockedCustomers.length >= 2\" text size=\"small\" @click=\"toggleLock(data, frozenRow, index)\" />\n        </template>\n    </Column>\n</DataTable>",
      "<ToggleButton v-model=\"balanceFrozen\" onIcon=\"pi pi-lock\" offIcon=\"pi pi-lock-open\" onLabel=\"Balance\" offLabel=\"Balance\" />\n<DataTable :value=\"customers\" scrollable scrollHeight=\"400px\" class=\"mt-6\">\n    <Column field=\"name\" header=\"Name\" style=\"min-width: 200px\" frozen class=\"font-bold\"></Column>\n    <Column field=\"id\" header=\"Id\" style=\"min-width: 100px\"></Column>\n    <Column field=\"name\" header=\"Name\" style=\"min-width: 200px\"></Column>\n    <Column field=\"country.name\" header=\"Country\" style=\"min-width: 200px\"></Column>\n    <Column field=\"date\" header=\"Date\" style=\"min-width: 200px\"></Column>\n    <Column field=\"company\" header=\"Company\" style=\"min-width: 200px\"></Column>\n    <Column field=\"status\" header=\"Status\" style=\"min-width: 200px\"></Column>\n    <Column field=\"activity\" header=\"Activity\" style=\"min-width: 200px\"></Column>\n    <Column field=\"representative.name\" header=\"Representative\" style=\"min-width: 200px\"></Column>\n    <Column field=\"balance\" header=\"Balance\" style=\"min-width: 200px\" alignFrozen=\"right\" :frozen=\"balanceFrozen\">\n        <template #body=\"{ data }\">\n            <span class=\"font-bold\">{{ formatCurrency(data.balance) }}</span>\n        </template>\n    </Column>\n</DataTable>",
      "<DataTable :value=\"cars\" scrollable scrollHeight=\"400px\" :virtualScrollerOptions=\"{ itemSize: 44 }\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"id\" header=\"Id\" style=\"width: 20%; height: 44px\"></Column>\n    <Column field=\"vin\" header=\"Vin\" style=\"width: 20%; height: 44px\"></Column>\n    <Column field=\"year\" header=\"Year\" style=\"width: 20%; height: 44px\"></Column>\n    <Column field=\"brand\" header=\"Brand\" style=\"width: 20%; height: 44px\"></Column>\n    <Column field=\"color\" header=\"Color\" style=\"width: 20%; height: 44px\"></Column>\n</DataTable>",
      "<DataTable :value=\"virtualCars\" scrollable scrollHeight=\"400px\" tableStyle=\"min-width: 50rem\"\n        :virtualScrollerOptions=\"{ lazy: true, onLazyLoad: loadCarsLazy, itemSize: 44, delay: 200, showLoader: true, loading: lazyLoading, numToleratedItems: 10 }\">\n    <Column field=\"id\" header=\"Id\" style=\"width: 20%; height: 44px\">\n        <template #loading>\n            <div class=\"flex items-center\" :style=\"{ height: '17px', 'flex-grow': '1', overflow: 'hidden' }\">\n                <Skeleton width=\"60%\" height=\"1rem\" />\n            </div>\n        </template>\n    </Column>\n    <Column field=\"vin\" header=\"Vin\" style=\"width: 20%; height: 44px\">\n        <template #loading>\n            <div class=\"flex items-center\" :style=\"{ height: '17px', 'flex-grow': '1', overflow: 'hidden' }\">\n                <Skeleton width=\"40%\" height=\"1rem\" />\n            </div>\n        </template>\n    </Column>\n    <Column field=\"year\" header=\"Year\" style=\"width: 20%; height: 44px\">\n        <template #loading>\n            <div class=\"flex items-center\" :style=\"{ height: '17px', 'flex-grow': '1', overflow: 'hidden' }\">\n                <Skeleton width=\"30%\" height=\"1rem\" />\n            </div>\n        </template>\n    </Column>\n    <Column field=\"brand\" header=\"Brand\" style=\"width: 20%; height: 44px\">\n        <template #loading>\n            <div class=\"flex items-center\" :style=\"{ height: '17px', 'flex-grow': '1', overflow: 'hidden' }\">\n                <Skeleton width=\"40%\" height=\"1rem\" />\n            </div>\n        </template>\n    </Column>\n    <Column field=\"color\" header=\"Color\" style=\"width: 20%; height: 44px\">\n        <template #loading>\n            <div class=\"flex items-center\" :style=\"{ height: '17px', 'flex-grow': '1', overflow: 'hidden' }\">\n                <Skeleton width=\"60%\" height=\"1rem\" />\n            </div>\n        </template>\n    </Column>\n</DataTable>",
      "<DataTable :value=\"sales\" tableStyle=\"min-width: 50rem\">\n    <ColumnGroup type=\"header\">\n        <Row>\n            <Column header=\"Product\" :rowspan=\"3\" />\n            <Column header=\"Sale Rate\" :colspan=\"4\" />\n        </Row>\n        <Row>\n            <Column header=\"Sales\" :colspan=\"2\" />\n            <Column header=\"Profits\" :colspan=\"2\" />\n        </Row>\n        <Row>\n            <Column header=\"Last Year\" sortable field=\"lastYearSale\" />\n            <Column header=\"This Year\" sortable field=\"thisYearSale\" />\n            <Column header=\"Last Year\" sortable field=\"lastYearProfit\" />\n            <Column header=\"This Year\" sortable field=\"thisYearProfit\" />\n        </Row>\n    </ColumnGroup>\n    <Column field=\"product\" />\n    <Column field=\"lastYearSale\">\n        <template #body=\"slotProps\"> {{ slotProps.data.lastYearSale }}% </template>\n    </Column>\n    <Column field=\"thisYearSale\">\n        <template #body=\"slotProps\"> {{ slotProps.data.thisYearSale }}% </template>\n    </Column>\n    <Column field=\"lastYearProfit\">\n        <template #body=\"slotProps\">\n            {{ formatCurrency(slotProps.data.lastYearProfit) }}\n        </template>\n    </Column>\n    <Column field=\"thisYearProfit\">\n        <template #body=\"slotProps\">\n            {{ formatCurrency(slotProps.data.thisYearProfit) }}\n        </template>\n    </Column>\n    <ColumnGroup type=\"footer\">\n        <Row>\n            <Column footer=\"Totals:\" :colspan=\"3\" footerStyle=\"text-align:right\" />\n            <Column :footer=\"lastYearTotal\" />\n            <Column :footer=\"thisYearTotal\" />\n        </Row>\n    </ColumnGroup>\n</DataTable>",
      "<DataTable :value=\"customers\" rowGroupMode=\"subheader\" groupRowsBy=\"representative.name\" sortMode=\"single\"\n        sortField=\"representative.name\" :sortOrder=\"1\" scrollable scrollHeight=\"400px\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"representative.name\" header=\"Representative\"></Column>\n    <Column field=\"name\" header=\"Name\" style=\"min-width: 200px\"></Column>\n    <Column field=\"country\" header=\"Country\" style=\"min-width: 200px\">\n        <template #body=\"slotProps\">\n            <div class=\"flex items-center gap-2\">\n                <img alt=\"flag\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`flag flag-${slotProps.data.country.code}`\" style=\"width: 24px\" />\n                <span>{{ slotProps.data.country.name }}</span>\n            </div>\n        </template>\n    </Column>\n    <Column field=\"company\" header=\"Company\" style=\"min-width: 200px\"></Column>\n    <Column field=\"status\" header=\"Status\" style=\"min-width: 200px\">\n        <template #body=\"slotProps\">\n            <Tag :value=\"slotProps.data.status\" :severity=\"getSeverity(slotProps.data.status)\" />\n        </template>\n    </Column>\n    <Column field=\"date\" header=\"Date\" style=\"min-width: 200px\"></Column>\n    <template #groupheader=\"slotProps\">\n        <div class=\"flex items-center gap-2\">\n            <img :alt=\"slotProps.data.representative.name\" :src=\"`https://primefaces.org/cdn/primevue/images/avatar/${slotProps.data.representative.image}`\" width=\"32\" style=\"vertical-align: middle\" />\n            <span>{{ slotProps.data.representative.name }}</span>\n        </div>\n    </template>\n    <template #groupfooter=\"slotProps\">\n        <div class=\"flex justify-end font-bold w-full\">Total Customers: {{ calculateCustomerTotal(slotProps.data.representative.name) }}</div>\n    </template>\n</DataTable>",
      "<DataTable v-model:expandedRowGroups=\"expandedRowGroups\" :value=\"customers\" tableStyle=\"min-width: 50rem\"\n        expandableRowGroups rowGroupMode=\"subheader\" groupRowsBy=\"representative.name\" @rowgroup-expand=\"onRowGroupExpand\" @rowgroup-collapse=\"onRowGroupCollapse\"\n        sortMode=\"single\" sortField=\"representative.name\" :sortOrder=\"1\">\n    <template #groupheader=\"slotProps\">\n        <img :alt=\"slotProps.data.representative.name\" :src=\"`https://primefaces.org/cdn/primevue/images/avatar/${slotProps.data.representative.image}`\" width=\"32\" style=\"vertical-align: middle; display: inline-block\" class=\"ml-2\" />\n        <span class=\"align-middle ml-2 font-bold leading-normal\">{{ slotProps.data.representative.name }}</span>\n    </template>\n    <Column field=\"representative.name\" header=\"Representative\"></Column>\n    <Column field=\"name\" header=\"Name\" style=\"width: 20%\"></Column>\n    <Column field=\"country\" header=\"Country\" style=\"width: 20%\">\n        <template #body=\"slotProps\">\n            <div class=\"flex items-center gap-2\">\n                <img alt=\"flag\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`flag flag-${slotProps.data.country.code}`\" style=\"width: 24px\" />\n                <span>{{ slotProps.data.country.name }}</span>\n            </div>\n        </template>\n    </Column>\n    <Column field=\"company\" header=\"Company\" style=\"width: 20%\"></Column>\n    <Column field=\"status\" header=\"Status\" style=\"width: 20%\">\n        <template #body=\"slotProps\">\n            <Tag :value=\"slotProps.data.status\" :severity=\"getSeverity(slotProps.data.status)\" />\n        </template>\n    </Column>\n    <Column field=\"date\" header=\"Date\" style=\"width: 20%\"></Column>\n    <template #groupfooter=\"slotProps\">\n        <div class=\"flex justify-end font-bold w-full\">Total Customers: {{ calculateCustomerTotal(slotProps.data.representative.name) }}</div>\n    </template>\n</DataTable>",
      "<DataTable :value=\"customers\" rowGroupMode=\"rowspan\" groupRowsBy=\"representative.name\" sortMode=\"single\" sortField=\"representative.name\" :sortOrder=\"1\" tableStyle=\"min-width: 50rem\">\n    <Column header=\"#\" headerStyle=\"width:3rem\">\n        <template #body=\"slotProps\">\n            {{ slotProps.index + 1 }}\n        </template>\n    </Column>\n    <Column field=\"representative.name\" header=\"Representative\" style=\"min-width: 200px\">\n        <template #body=\"slotProps\">\n            <div class=\"flex items-center gap-2\">\n                <img :alt=\"slotProps.data.representative.name\" :src=\"`https://primefaces.org/cdn/primevue/images/avatar/${slotProps.data.representative.image}`\" width=\"32\" style=\"vertical-align: middle\" />\n                <span>{{ slotProps.data.representative.name }}</span>\n            </div>\n        </template>\n    </Column>\n    <Column field=\"name\" header=\"Name\" style=\"min-width: 200px\"></Column>\n    <Column field=\"country\" header=\"Country\" style=\"min-width: 150px\">\n        <template #body=\"slotProps\">\n            <div class=\"flex items-center gap-2\">\n                <img alt=\"flag\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`flag flag-${slotProps.data.country.code}`\" style=\"width: 24px\" />\n                <span>{{ slotProps.data.country.name }}</span>\n            </div>\n        </template>\n    </Column>\n    <Column field=\"company\" header=\"Company\" style=\"min-width: 200px\"></Column>\n    <Column field=\"status\" header=\"Status\" style=\"min-width: 100px\">\n        <template #body=\"slotProps\">\n            <Tag :value=\"slotProps.data.status\" :severity=\"getSeverity(slotProps.data.status)\" />\n        </template>\n    </Column>\n</DataTable>",
      "<DataTable :value=\"products\" :rowClass=\"rowClass\" :rowStyle=\"rowStyle\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\">\n        <template #body=\"slotProps\">\n            <Badge :value=\"slotProps.data.quantity\" :severity=\"stockSeverity(slotProps.data)\" />\n        </template>\n    </Column>\n</DataTable>",
      "<DataTable :value=\"products\" resizableColumns columnResizeMode=\"fit\" showGridlines tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\"></Column>\n</DataTable>",
      "<DataTable :value=\"products\" resizableColumns columnResizeMode=\"expand\" showGridlines tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\"></Column>\n</DataTable>",
      "<DataTable :value=\"products\" :reorderableColumns=\"true\" @columnReorder=\"onColReorder\" @rowReorder=\"onRowReorder\" tableStyle=\"min-width: 50rem\">\n    <Column rowReorder headerStyle=\"width: 3rem\" :reorderableColumn=\"false\" />\n    <Column v-for=\"col of columns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\"></Column>\n</DataTable>",
      "<DataTable :value=\"products\" tableStyle=\"min-width: 50rem\">\n    <template #header>\n        <div style=\"text-align:left\">\n            <MultiSelect :modelValue=\"selectedColumns\" :options=\"columns\" optionLabel=\"header\" @update:modelValue=\"onToggle\"\n                display=\"chip\" placeholder=\"Select Columns\" />\n        </div>\n    </template>\n    <Column field=\"code\" header=\"Code\" />\n    <Column v-for=\"(col, index) of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field + '_' + index\"></Column>\n</DataTable>",
      "<DataTable :value=\"products\" ref=\"dt\" tableStyle=\"min-width: 50rem\">\n    <template #header>\n        <div class=\"text-end pb-4\">\n            <Button icon=\"pi pi-external-link\" label=\"Export\" @click=\"exportCSV($event)\" />\n        </div>\n    </template>\n    <Column field=\"code\" header=\"Code\" exportHeader=\"Product Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"quantity\" header=\"Quantity\"></Column>\n</DataTable>",
      "<ContextMenu ref=\"cm\" :model=\"menuModel\" @hide=\"selectedProduct = null\" />\n<DataTable v-model:contextMenuSelection=\"selectedProduct\" :value=\"products\" contextMenu\n        @row-contextmenu=\"onRowContextMenu\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"code\" header=\"Code\"></Column>\n    <Column field=\"name\" header=\"Name\"></Column>\n    <Column field=\"category\" header=\"Category\"></Column>\n    <Column field=\"price\" header=\"Price\">\n        <template #body=\"slotProps\">\n            {{ formatCurrency(slotProps.data.price) }}\n        </template>\n    </Column>\n</DataTable>",
      "<DataTable v-model:filters=\"filters\" v-model:selection=\"selectedCustomer\" :value=\"customers\"\n    stateStorage=\"session\" stateKey=\"dt-state-demo-session\" paginator :rows=\"5\" filterDisplay=\"menu\"\n    selectionMode=\"single\" dataKey=\"id\" :globalFilterFields=\"['name', 'country.name', 'representative.name', 'status']\" tableStyle=\"min-width: 50rem\">\n    <template #header>\n        <IconField>\n            <InputIcon>\n                <i class=\"pi pi-search\" />\n            </InputIcon>\n            <InputText v-model=\"filters['global'].value\" placeholder=\"Global Search\" />\n        </IconField>\n    </template>\n    <Column field=\"name\" header=\"Name\" sortable style=\"width: 25%\">\n        <template #filter=\"{ filterModel }\">\n            <InputText v-model=\"filterModel.value\" type=\"text\" placeholder=\"Search by name\" />\n        </template>\n    </Column>\n    <Column header=\"Country\" sortable sortField=\"country.name\" filterField=\"country.name\" filterMatchMode=\"contains\" style=\"width: 25%\">\n        <template #body=\"{ data }\">\n            <div class=\"flex items-center gap-2\">\n                <img alt=\"flag\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`flag flag-${data.country.code}`\" style=\"width: 24px\" />\n                <span>{{ data.country.name }}</span>\n            </div>\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <InputText v-model=\"filterModel.value\" type=\"text\" placeholder=\"Search by country\" />\n        </template>\n    </Column>\n    <Column header=\"Representative\" sortable sortField=\"representative.name\" filterField=\"representative\" :showFilterMatchModes=\"false\" :filterMenuStyle=\"{ width: '14rem' }\" style=\"width: 25%\">\n        <template #body=\"{ data }\">\n            <div class=\"flex items-center gap-2\">\n                <img :alt=\"data.representative.name\" :src=\"`https://primefaces.org/cdn/primevue/images/avatar/${data.representative.image}`\" style=\"width: 32px\" />\n                <span>{{ data.representative.name }}</span>\n            </div>\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <MultiSelect v-model=\"filterModel.value\" :options=\"representatives\" optionLabel=\"name\" placeholder=\"Any\">\n                <template #option=\"slotProps\">\n                    <div class=\"flex items-center gap-2\">\n                        <img :alt=\"slotProps.option.name\" :src=\"`https://primefaces.org/cdn/primevue/images/avatar/${slotProps.option.image}`\" style=\"width: 32px\" />\n                        <span>{{ slotProps.option.name }}</span>\n                    </div>\n                </template>\n            </MultiSelect>\n        </template>\n    </Column>\n    <Column field=\"status\" header=\"Status\" sortable filterMatchMode=\"equals\" style=\"width: 25%\">\n        <template #body=\"{ data }\">\n            <Tag :value=\"data.status\" :severity=\"getSeverity(data.status)\" />\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <Select v-model=\"filterModel.value\" :options=\"statuses\" placeholder=\"Select One\" showClear>\n                <template #option=\"slotProps\">\n                    <Tag :value=\"slotProps.option\" :severity=\"getSeverity(slotProps.option)\" />\n                </template>\n            </Select>\n        </template>\n    </Column>\n    <template #empty> No customers found. </template>\n</DataTable>",
      "<DataTable v-model:filters=\"filters\" v-model:selection=\"selectedCustomers\" :value=\"customers\" paginator :rows=\"10\" dataKey=\"id\" filterDisplay=\"menu\"\n    :globalFilterFields=\"['name', 'country.name', 'representative.name', 'balance', 'status']\">\n    <template #header>\n        <div class=\"flex justify-between\">\n            <Button type=\"button\" icon=\"pi pi-filter-slash\" label=\"Clear\" variant=\"outlined\" @click=\"clearFilter()\" />\n            <IconField>\n                <InputIcon>\n                    <i class=\"pi pi-search\" />\n                </InputIcon>\n                <InputText v-model=\"filters['global'].value\" placeholder=\"Keyword Search\" />\n            </IconField>\n        </div>\n    </template>\n    <template #empty> No customers found. </template>\n    <Column selectionMode=\"multiple\" headerStyle=\"width: 3rem\"></Column>\n    <Column field=\"name\" header=\"Name\" sortable style=\"min-width: 14rem\">\n        <template #body=\"{ data }\">\n            {{ data.name }}\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <InputText v-model=\"filterModel.value\" type=\"text\" placeholder=\"Search by name\" />\n        </template>\n    </Column>\n    <Column header=\"Country\" sortable sortField=\"country.name\" filterField=\"country.name\" style=\"min-width: 14rem\">\n        <template #body=\"{ data }\">\n            <div class=\"flex items-center gap-2\">\n                <img alt=\"flag\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`flag flag-${data.country.code}`\" style=\"width: 24px\" />\n                <span>{{ data.country.name }}</span>\n            </div>\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <InputText v-model=\"filterModel.value\" type=\"text\" placeholder=\"Search by country\" />\n        </template>\n    </Column>\n    <Column header=\"Agent\" sortable sortField=\"representative.name\" filterField=\"representative\" :showFilterMatchModes=\"false\" :filterMenuStyle=\"{ width: '14rem' }\" style=\"min-width: 14rem\">\n        <template #body=\"{ data }\">\n            <div class=\"flex items-center gap-2\">\n                <img :alt=\"data.representative.name\" :src=\"`https://primefaces.org/cdn/primevue/images/avatar/${data.representative.image}`\" style=\"width: 32px\" />\n                <span>{{ data.representative.name }}</span>\n            </div>\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <MultiSelect v-model=\"filterModel.value\" :options=\"representatives\" optionLabel=\"name\" placeholder=\"Any\">\n                <template #option=\"slotProps\">\n                    <div class=\"flex items-center gap-2\">\n                        <img :alt=\"slotProps.option.name\" :src=\"`https://primefaces.org/cdn/primevue/images/avatar/${slotProps.option.image}`\" style=\"width: 32px\" />\n                        <span>{{ slotProps.option.name }}</span>\n                    </div>\n                </template>\n            </MultiSelect>\n        </template>\n    </Column>\n    <Column field=\"date\" header=\"Date\" sortable filterField=\"date\" dataType=\"date\" style=\"min-width: 10rem\">\n        <template #body=\"{ data }\">\n            {{ formatDate(data.date) }}\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <DatePicker v-model=\"filterModel.value\" dateFormat=\"mm/dd/yy\" placeholder=\"mm/dd/yyyy\" />\n        </template>\n    </Column>\n    <Column field=\"balance\" header=\"Balance\" sortable filterField=\"balance\" dataType=\"numeric\" style=\"min-width: 10rem\">\n        <template #body=\"{ data }\">\n            {{ formatCurrency(data.balance) }}\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <InputNumber v-model=\"filterModel.value\" mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\n        </template>\n    </Column>\n    <Column header=\"Status\" field=\"status\" sortable :filterMenuStyle=\"{ width: '14rem' }\" style=\"min-width: 12rem\">\n        <template #body=\"{ data }\">\n            <Tag :value=\"data.status\" :severity=\"getSeverity(data.status)\" />\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <Select v-model=\"filterModel.value\" :options=\"statuses\" placeholder=\"Select One\" showClear>\n                <template #option=\"slotProps\">\n                    <Tag :value=\"slotProps.option\" :severity=\"getSeverity(slotProps.option)\" />\n                </template>\n            </Select>\n        </template>\n    </Column>\n    <Column field=\"activity\" header=\"Activity\" sortable :showFilterMatchModes=\"false\" style=\"min-width: 12rem\">\n        <template #body=\"{ data }\">\n            <ProgressBar :value=\"data.activity\" :showValue=\"false\" style=\"height: 6px\"></ProgressBar>\n        </template>\n        <template #filter=\"{ filterModel }\">\n            <Slider v-model=\"filterModel.value\" range class=\"m-4\"></Slider>\n            <div class=\"flex items-center justify-between px-2\">\n                <span>{{ filterModel.value ? filterModel.value[0] : 0 }}</span>\n                <span>{{ filterModel.value ? filterModel.value[1] : 100 }}</span>\n            </div>\n        </template>\n    </Column>\n    <Column headerStyle=\"width: 5rem; text-align: center\" bodyStyle=\"text-align: center; overflow: visible\">\n        <template #body>\n            <Button type=\"button\" icon=\"pi pi-cog\" rounded />\n        </template>\n    </Column>\n</DataTable>",
      "<Toolbar class=\"mb-6\">\n    <template #start>\n        <Button label=\"New\" icon=\"pi pi-plus\" class=\"mr-2\" @click=\"openNew\" />\n        <Button label=\"Delete\" icon=\"pi pi-trash\" severity=\"danger\" variant=\"outlined\" @click=\"confirmDeleteSelected\" :disabled=\"!selectedProducts || !selectedProducts.length\" />\n    </template>\n\n    <template #end>\n        <FileUpload mode=\"basic\" accept=\"image/*\" :maxFileSize=\"1000000\" label=\"Import\" customUpload chooseLabel=\"Import\" class=\"mr-2\" auto :chooseButtonProps=\"{ severity: 'secondary' }\" />\n        <Button label=\"Export\" icon=\"pi pi-upload\" severity=\"secondary\" @click=\"exportCSV($event)\" />\n    </template>\n</Toolbar>\n\n<DataTable\n    ref=\"dt\"\n    v-model:selection=\"selectedProducts\"\n    :value=\"products\"\n    dataKey=\"id\"\n    :paginator=\"true\"\n    :rows=\"10\"\n    :filters=\"filters\"\n    paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\n    :rowsPerPageOptions=\"[5, 10, 25]\"\n    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} products\"\n>\n    <template #header>\n        <div class=\"flex flex-wrap gap-2 items-center justify-between\">\n            <h4 class=\"m-0\">Manage Products</h4>\n            <IconField>\n                <InputIcon>\n                    <i class=\"pi pi-search\" />\n                </InputIcon>\n                <InputText v-model=\"filters['global'].value\" placeholder=\"Search...\" />\n            </IconField>\n        </div>\n    </template>\n\n    <Column selectionMode=\"multiple\" style=\"width: 3rem\" :exportable=\"false\"></Column>\n    <Column field=\"code\" header=\"Code\" sortable style=\"min-width: 12rem\"></Column>\n    <Column field=\"name\" header=\"Name\" sortable style=\"min-width: 16rem\"></Column>\n    <Column header=\"Image\">\n        <template #body=\"slotProps\">\n            <img :src=\"`https://primefaces.org/cdn/primevue/images/product/${slotProps.data.image}`\" :alt=\"slotProps.data.image\" class=\"rounded\" style=\"width: 64px\" />\n        </template>\n    </Column>\n    <Column field=\"price\" header=\"Price\" sortable style=\"min-width: 8rem\">\n        <template #body=\"slotProps\">\n            {{ formatCurrency(slotProps.data.price) }}\n        </template>\n    </Column>\n    <Column field=\"category\" header=\"Category\" sortable style=\"min-width: 10rem\"></Column>\n    <Column field=\"rating\" header=\"Reviews\" sortable style=\"min-width: 12rem\">\n        <template #body=\"slotProps\">\n            <Rating :modelValue=\"slotProps.data.rating\" :readonly=\"true\" />\n        </template>\n    </Column>\n    <Column field=\"inventoryStatus\" header=\"Status\" sortable style=\"min-width: 12rem\">\n        <template #body=\"slotProps\">\n            <Tag :value=\"slotProps.data.inventoryStatus\" :severity=\"getStatusLabel(slotProps.data.inventoryStatus)\" />\n        </template>\n    </Column>\n    <Column :exportable=\"false\" style=\"min-width: 12rem\">\n        <template #body=\"slotProps\">\n            <Button icon=\"pi pi-pencil\" variant=\"outlined\" rounded class=\"mr-2\" @click=\"editProduct(slotProps.data)\" />\n            <Button icon=\"pi pi-trash\" variant=\"outlined\" rounded severity=\"danger\" @click=\"confirmDeleteProduct(slotProps.data)\" />\n        </template>\n    </Column>\n</DataTable>"
    ],
    "props": {
      "value": "readonly T[] | undefined | null",
      "dataKey": "keyof T | ((item: NoInfer<T>) => string) | undefined",
      "rows": "number | undefined",
      "first": "number | undefined",
      "totalRecords": "number | undefined",
      "paginator": "boolean | undefined",
      "paginatorPosition": "HintedString<'top' | 'bottom' | 'both'> | undefined",
      "alwaysShowPaginator": "boolean | undefined",
      "paginatorTemplate": "any | string",
      "pageLinkSize": "number | undefined",
      "rowsPerPageOptions": "number[] | undefined",
      "currentPageReportTemplate": "string | undefined",
      "lazy": "boolean | undefined",
      "loading": "boolean | undefined",
      "loadingIcon": "string | undefined",
      "sortField": "keyof T | ((item: NoInfer<T>) => string) | undefined",
      "sortOrder": "number | undefined",
      "nullSortOrder": "number",
      "defaultSortOrder": "number | undefined",
      "multiSortMeta": "DataTableSortMeta[] | undefined",
      "sortMode": "HintedString<'single' | 'multiple'> | undefined",
      "removableSort": "boolean | undefined",
      "filters": "DataTableFilterMeta",
      "filterDisplay": "HintedString<'menu' | 'row'> | undefined",
      "globalFilterFields": "(keyof T | ((data: NoInfer<T>) => string))[] | undefined",
      "filterLocale": "string | undefined",
      "selection": "NoInfer<T>[] | NoInfer<T> | undefined",
      "selectionMode": "HintedString<'single' | 'multiple'> | undefined",
      "compareSelectionBy": "HintedString<'equals' | 'deepEquals'> | undefined",
      "metaKeySelection": "boolean | undefined",
      "contextMenu": "boolean | undefined",
      "contextMenuSelection": "NoInfer<T> | NoInfer<T>[] | undefined",
      "selectAll": "Nullable<boolean>",
      "rowHover": "boolean | undefined",
      "csvSeparator": "string | undefined",
      "exportFilename": "string | undefined",
      "exportFunction": "(options: DataTableExportFunctionOptions) => any",
      "resizableColumns": "boolean | undefined",
      "columnResizeMode": "HintedString<'fit' | 'expand'> | undefined",
      "reorderableColumns": "boolean | undefined",
      "expandedRows": "NoInfer<T>[] | DataTableExpandedRows | null",
      "expandedRowIcon": "string | undefined",
      "collapsedRowIcon": "string | undefined",
      "rowGroupMode": "HintedString<'subheader' | 'rowspan'> | undefined",
      "groupRowsBy": "((field: NoInfer<T>) => object) | (keyof T)[] | keyof T | undefined",
      "expandableRowGroups": "boolean | undefined",
      "expandedRowGroups": "NoInfer<T>[] | DataTableExpandedRows",
      "stateStorage": "HintedString<'session' | 'local'> | undefined",
      "stateKey": "string | undefined",
      "editMode": "HintedString<'cell' | 'row'> | undefined",
      "editingRows": "NoInfer<T>[] | DataTableEditingRows",
      "rowClass": "(data: NoInfer<T>) => string | object | undefined",
      "rowStyle": "(data: NoInfer<T>) => object | object[] | undefined",
      "scrollable": "boolean | undefined",
      "scrollHeight": "HintedString<'flex'> | undefined",
      "virtualScrollerOptions": "VirtualScrollerProps",
      "frozenValue": "NoInfer<T>[] | undefined | null",
      "breakpoint": "string | undefined",
      "showHeaders": "boolean | undefined",
      "showGridlines": "boolean | undefined",
      "stripedRows": "boolean | undefined",
      "highlightOnSelect": "boolean | undefined",
      "size": "HintedString<'small' | 'large'> | undefined",
      "tableStyle": "string | object | undefined",
      "tableClass": "string | object | undefined",
      "tableProps": "TableHTMLAttributes | undefined",
      "filterInputProps": "InputHTMLAttributes | undefined",
      "filterButtonProps": "Partial<DataTableFilterButtonPropsOptions> | undefined",
      "editButtonProps": "DataTableEditButtonPropsOptions | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<DataTablePassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:first'": "void",
      "'update:rows'": "void",
      "'update:sortField'": "void",
      "'update:sortOrder'": "void",
      "'update:multiSortMeta'": "void",
      "'update:selection'": "void",
      "'update:contextMenuSelection'": "void",
      "'update:expandedRows'": "void",
      "'update:expandedRowGroups'": "void",
      "'update:filters'": "void",
      "'update:editingRows'": "void",
      "page": "void",
      "sort": "void",
      "filter": "void",
      "'value-change'": "void",
      "'row-click'": "void",
      "'row-dblclick'": "void",
      "'row-contextmenu'": "void",
      "'row-select'": "void",
      "'row-select-all'": "void",
      "'row-unselect-all'": "void",
      "'row-unselect'": "void",
      "'select-all-change'": "void",
      "'column-resize-end'": "void",
      "'column-reorder'": "void",
      "'row-reorder'": "void",
      "'row-expand'": "void",
      "'row-collapse'": "void",
      "'rowgroup-expand'": "void",
      "'rowgroup-collapse'": "void",
      "'cell-edit-init'": "void",
      "'cell-edit-complete'": "void",
      "'cell-edit-cancel'": "void",
      "'row-edit-init'": "void",
      "'row-edit-save'": "void",
      "'row-edit-cancel'": "void",
      "'state-restore'": "void",
      "'state-save'": "void"
    },
    "slots": {},
    "logic": {
      "composables": [
        "useDown"
      ],
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "provide",
        "data",
        "first",
        "rows",
        "sortField",
        "sortOrder",
        "nullSortOrder",
        "multiSortMeta",
        "handler",
        "function",
        "mounted",
        "if",
        "beforeUnmount",
        "updated",
        "columnProp",
        "onPage",
        "onColumnHeaderClick",
        "sortSingle",
        "for",
        "sortMultiple",
        "multisortField",
        "addMultiSortField",
        "getActiveFilters",
        "filter",
        "executeLocalFilter",
        "onRowClick",
        "onRowDblClick",
        "onRowRightClick",
        "onRowTouchEnd",
        "onRowKeyDown",
        "onArrowDownKey",
        "onArrowUpKey",
        "onHomeKey",
        "onEndKey",
        "onEnterKey",
        "onSpaceKey",
        "onTabKey",
        "findNextSelectableRow",
        "findPrevSelectableRow",
        "findFirstSelectableRow",
        "findLastSelectableRow",
        "focusRowChange",
        "toggleRowWithRadio",
        "toggleRowWithCheckbox",
        "toggleRowsWithCheckbox",
        "isSingleSelectionMode",
        "isMultipleSelectionMode",
        "isSelected",
        "findIndexInSelection",
        "findIndex",
        "updateSelectionKeys",
        "updateEditingRowKeys",
        "equals",
        "selectRange",
        "generateCSV",
        "exportCSV",
        "resetPage",
        "onColumnResizeStart",
        "onColumnResize",
        "onColumnResizeEnd",
        "resizeTableCells",
        "child",
        "bindColumnResizeEvents",
        "unbindColumnResizeEvents",
        "onColumnHeaderMouseDown",
        "onColumnHeaderDragStart",
        "onColumnHeaderDragOver",
        "onColumnHeaderDragLeave",
        "onColumnHeaderDrop",
        "findParentHeader",
        "while",
        "findColumnByKey",
        "onRowMouseDown",
        "onRowDragStart",
        "onRowDragOver",
        "onRowDragLeave",
        "onRowDragEnd",
        "onRowDrop",
        "toggleRow",
        "toggleRowGroup",
        "isRowGroupExpanded",
        "isStateful",
        "getStorage",
        "saveState",
        "restoreState",
        "catch",
        "saveColumnWidths",
        "addColumnWidthStyles",
        "restoreColumnWidths",
        "onCellEditInit",
        "onCellEditComplete",
        "onCellEditCancel",
        "onRowEditInit",
        "onRowEditSave",
        "onRowEditCancel",
        "onEditingMetaChange",
        "clearEditingMetaData",
        "createLazyLoadEvent",
        "hasGlobalFilter",
        "onFilterChange",
        "onFilterApply",
        "cloneFilters",
        "updateReorderableColumns",
        "createStyleElement",
        "destroyStyleElement",
        "dataToRender",
        "getVirtualScrollerRef",
        "hasSpacerStyle",
        "columns",
        "columnGroups",
        "headerColumnGroup",
        "footerColumnGroup",
        "hasFilters",
        "processedData",
        "totalRecordsLength",
        "empty",
        "paginatorTop",
        "paginatorBottom",
        "sorted",
        "allRowsSelected",
        "groupRowSortField",
        "headerFilterButtonProps",
        "rowEditButtonProps",
        "virtualScrollerDisabled",
        "dataP"
      ]
    }
  },
  "dataview": {
    "title": "DataView",
    "description": "DataView displays data in grid or list layout with pagination and sorting features.",
    "examples": [
      "<DataView :value=\"products\">\n    <template #list=\"slotProps\">\n        <div class=\"flex flex-col\">\n            <div v-for=\"(item, index) in slotProps.items\" :key=\"index\">\n                <div class=\"flex flex-col sm:flex-row sm:items-center p-6 gap-4\" :class=\"{ 'border-t border-surface-200 dark:border-surface-700': index !== 0 }\">\n                    <div class=\"md:w-40 relative\">\n                        <img class=\"block xl:block mx-auto rounded w-full\" :src=\"`https://primefaces.org/cdn/primevue/images/product/${item.image}`\" :alt=\"item.name\" />\n                        <div class=\"absolute bg-black/70 rounded-border\" style=\"left: 4px; top: 4px\">\n                            <Tag :value=\"item.inventoryStatus\" :severity=\"getSeverity(item)\"></Tag>\n                        </div>\n                    </div>\n                    <div class=\"flex flex-col md:flex-row justify-between md:items-center flex-1 gap-6\">\n                        <div class=\"flex flex-row md:flex-col justify-between items-start gap-2\">\n                            <div>\n                                <span class=\"font-medium text-surface-500 dark:text-surface-400 text-sm\">{{ item.category }}</span>\n                                <div class=\"text-lg font-medium mt-2\">{{ item.name }}</div>\n                            </div>\n                            <div class=\"bg-surface-100 p-1\" style=\"border-radius: 30px\">\n                                <div class=\"bg-surface-0 flex items-center gap-2 justify-center py-1 px-2\" style=\"border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)\">\n                                    <span class=\"text-surface-900 font-medium text-sm\">{{ item.rating }}</span>\n                                    <i class=\"pi pi-star-fill text-yellow-500\"></i>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"flex flex-col md:items-end gap-8\">\n                            <span class=\"text-xl font-semibold\">${{ item.price }}</span>\n                            <div class=\"flex flex-row-reverse md:flex-row gap-2\">\n                                <Button icon=\"pi pi-heart\" variant=\"outlined\"></Button>\n                                <Button icon=\"pi pi-shopping-cart\" label=\"Buy Now\" :disabled=\"item.inventoryStatus === 'OUTOFSTOCK'\" class=\"flex-auto md:flex-initial whitespace-nowrap\"></Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </template>\n</DataView>",
      "<DataView :value=\"products\" paginator :rows=\"5\">\n    <template #list=\"slotProps\">\n        <div class=\"flex flex-col\">\n            <div v-for=\"(item, index) in slotProps.items\" :key=\"index\">\n                <div class=\"flex flex-col sm:flex-row sm:items-center p-6 gap-4\" :class=\"{ 'border-t border-surface-200 dark:border-surface-700': index !== 0 }\">\n                    <div class=\"md:w-40 relative\">\n                        <img class=\"block xl:block mx-auto rounded w-full\" :src=\"`https://primefaces.org/cdn/primevue/images/product/${item.image}`\" :alt=\"item.name\" />\n                        <div class=\"absolute bg-black/70 rounded-border\" style=\"left: 4px; top: 4px\">\n                            <Tag :value=\"item.inventoryStatus\" :severity=\"getSeverity(item)\"></Tag>\n                        </div>\n                    </div>\n                    <div class=\"flex flex-col md:flex-row justify-between md:items-center flex-1 gap-6\">\n                        <div class=\"flex flex-row md:flex-col justify-between items-start gap-2\">\n                            <div>\n                                <span class=\"font-medium text-surface-500 dark:text-surface-400 text-sm\">{{ item.category }}</span>\n                                <div class=\"text-lg font-medium mt-2\">{{ item.name }}</div>\n                            </div>\n                            <div class=\"bg-surface-100 p-1\" style=\"border-radius: 30px\">\n                                <div class=\"bg-surface-0 flex items-center gap-2 justify-center py-1 px-2\" style=\"border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)\">\n                                    <span class=\"text-surface-900 font-medium text-sm\">{{ item.rating }}</span>\n                                    <i class=\"pi pi-star-fill text-yellow-500\"></i>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"flex flex-col md:items-end gap-8\">\n                            <span class=\"text-xl font-semibold\">${{ item.price }}</span>\n                            <div class=\"flex flex-row-reverse md:flex-row gap-2\">\n                                <Button icon=\"pi pi-heart\" variant=\"outlined\"></Button>\n                                <Button icon=\"pi pi-shopping-cart\" label=\"Buy Now\" :disabled=\"item.inventoryStatus === 'OUTOFSTOCK'\" class=\"flex-auto md:flex-initial whitespace-nowrap\"></Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </template>\n</DataView>",
      "<DataView :value=\"products\" :sortOrder=\"sortOrder\" :sortField=\"sortField\">\n    <template #header>\n        <Select v-model=\"sortKey\" :options=\"sortOptions\" optionLabel=\"label\" placeholder=\"Sort By Price\" @change=\"onSortChange($event)\" />\n    </template>\n    <template #list=\"slotProps\">\n        <div class=\"flex flex-col\">\n            <div v-for=\"(item, index) in slotProps.items\" :key=\"index\">\n                <div class=\"flex flex-col sm:flex-row sm:items-center p-6 gap-4\" :class=\"{ 'border-t border-surface-200 dark:border-surface-700': index !== 0 }\">\n                    <div class=\"md:w-40 relative\">\n                        <img class=\"block xl:block mx-auto rounded w-full\" :src=\"`https://primefaces.org/cdn/primevue/images/product/${item.image}`\" :alt=\"item.name\" />\n                        <div class=\"absolute bg-black/70 rounded-border\" style=\"left: 4px; top: 4px\">\n                            <Tag :value=\"item.inventoryStatus\" :severity=\"getSeverity(item)\"></Tag>\n                        </div>\n                    </div>\n                    <div class=\"flex flex-col md:flex-row justify-between md:items-center flex-1 gap-6\">\n                        <div class=\"flex flex-row md:flex-col justify-between items-start gap-2\">\n                            <div>\n                                <span class=\"font-medium text-surface-500 dark:text-surface-400 text-sm\">{{ item.category }}</span>\n                                <div class=\"text-lg font-medium mt-2\">{{ item.name }}</div>\n                            </div>\n                            <div class=\"bg-surface-100 p-1\" style=\"border-radius: 30px\">\n                                <div class=\"bg-surface-0 flex items-center gap-2 justify-center py-1 px-2\" style=\"border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)\">\n                                    <span class=\"text-surface-900 font-medium text-sm\">{{ item.rating }}</span>\n                                    <i class=\"pi pi-star-fill text-yellow-500\"></i>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"flex flex-col md:items-end gap-8\">\n                            <span class=\"text-xl font-semibold\">${{ item.price }}</span>\n                            <div class=\"flex flex-row-reverse md:flex-row gap-2\">\n                                <Button icon=\"pi pi-heart\" variant=\"outlined\"></Button>\n                                <Button icon=\"pi pi-shopping-cart\" label=\"Buy Now\" :disabled=\"item.inventoryStatus === 'OUTOFSTOCK'\" class=\"flex-auto md:flex-initial whitespace-nowrap\"></Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </template>\n</DataView>",
      "<DataView :value=\"products\" :layout=\"layout\">\n    <template #header>\n        <div class=\"flex justify-end\">\n            <SelectButton v-model=\"layout\" :options=\"options\" :allowEmpty=\"false\">\n                <template #option=\"{ option }\">\n                    <i :class=\"[option === 'list' ? 'pi pi-bars' : 'pi pi-table']\" />\n                </template>\n            </SelectButton>\n        </div>\n    </template>\n\n    <template #list=\"slotProps\">\n        <div class=\"flex flex-col\">\n            <div v-for=\"(item, index) in slotProps.items\" :key=\"index\">\n                <div class=\"flex flex-col sm:flex-row sm:items-center p-6 gap-4\" :class=\"{ 'border-t border-surface-200 dark:border-surface-700': index !== 0 }\">\n                    <div class=\"md:w-40 relative\">\n                        <img class=\"block xl:block mx-auto rounded w-full\" :src=\"`https://primefaces.org/cdn/primevue/images/product/${item.image}`\" :alt=\"item.name\" />\n                        <div class=\"absolute bg-black/70 rounded-border\" style=\"left: 4px; top: 4px\">\n                            <Tag :value=\"item.inventoryStatus\" :severity=\"getSeverity(item)\"></Tag>\n                        </div>\n                    </div>\n                    <div class=\"flex flex-col md:flex-row justify-between md:items-center flex-1 gap-6\">\n                        <div class=\"flex flex-row md:flex-col justify-between items-start gap-2\">\n                            <div>\n                                <span class=\"font-medium text-surface-500 dark:text-surface-400 text-sm\">{{ item.category }}</span>\n                                <div class=\"text-lg font-medium mt-2\">{{ item.name }}</div>\n                            </div>\n                            <div class=\"bg-surface-100 p-1\" style=\"border-radius: 30px\">\n                                <div class=\"bg-surface-0 flex items-center gap-2 justify-center py-1 px-2\" style=\"border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)\">\n                                    <span class=\"text-surface-900 font-medium text-sm\">{{ item.rating }}</span>\n                                    <i class=\"pi pi-star-fill text-yellow-500\"></i>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"flex flex-col md:items-end gap-8\">\n                            <span class=\"text-xl font-semibold\">${{ item.price }}</span>\n                            <div class=\"flex flex-row-reverse md:flex-row gap-2\">\n                                <Button icon=\"pi pi-heart\" variant=\"outlined\"></Button>\n                                <Button icon=\"pi pi-shopping-cart\" label=\"Buy Now\" :disabled=\"item.inventoryStatus === 'OUTOFSTOCK'\" class=\"flex-auto md:flex-initial whitespace-nowrap\"></Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </template>\n\n    <template #grid=\"slotProps\">\n        <div class=\"grid grid-cols-12 gap-4\">\n            <div v-for=\"(item, index) in slotProps.items\" :key=\"index\" class=\"col-span-12 sm:col-span-6 md:col-span-4 xl:col-span-6 p-2\">\n                <div class=\"p-6 border border-surface-200 dark:border-surface-700 bg-surface-0 dark:bg-surface-900 rounded flex flex-col\">\n                    <div class=\"bg-surface-50 flex justify-center rounded p-4\">\n                        <div class=\"relative mx-auto\">\n                            <img class=\"rounded w-full\" :src=\"`https://primefaces.org/cdn/primevue/images/product/${item.image}`\" :alt=\"item.name\" style=\"max-width: 300px\"/>\n                            <div class=\"absolute bg-black/70 rounded-border\" style=\"left: 4px; top: 4px\">\n                                <Tag :value=\"item.inventoryStatus\" :severity=\"getSeverity(item)\"></Tag>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"pt-6\">\n                        <div class=\"flex flex-row justify-between items-start gap-2\">\n                            <div>\n                                <span class=\"font-medium text-surface-500 dark:text-surface-400 text-sm\">{{ item.category }}</span>\n                                <div class=\"text-lg font-medium mt-1\">{{ item.name }}</div>\n                            </div>\n                            <div class=\"bg-surface-100 p-1\" style=\"border-radius: 30px\">\n                                <div class=\"bg-surface-0 flex items-center gap-2 justify-center py-1 px-2\" style=\"border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)\">\n                                    <span class=\"text-surface-900 font-medium text-sm\">{{ item.rating }}</span>\n                                    <i class=\"pi pi-star-fill text-yellow-500\"></i>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"flex flex-col gap-6 mt-6\">\n                            <span class=\"text-2xl font-semibold\">${{ item.price }}</span>\n                            <div class=\"flex gap-2\">\n                                <Button icon=\"pi pi-shopping-cart\" label=\"Buy Now\" :disabled=\"item.inventoryStatus === 'OUTOFSTOCK'\" class=\"flex-auto whitespace-nowrap\"></Button>\n                                <Button icon=\"pi pi-heart\" variant=\"outlined\"></Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </template>\n</DataView>",
      "<DataView :value=\"products\" :layout=\"layout\">\n    <template #header>\n        <div class=\"flex justify-end\">\n            <SelectButton v-model=\"layout\" :options=\"options\" :allowEmpty=\"false\">\n                <template #option=\"{ option }\">\n                    <i :class=\"[option === 'list' ? 'pi pi-bars' : 'pi pi-table']\" />\n                </template>\n            </SelectButton>\n        </div>\n    </template>\n\n    <template #list>\n        <div class=\"flex flex-col\">\n            <div v-for=\"i in 6\" :key=\"i\">\n                <div class=\"flex flex-col xl:flex-row xl:items-start p-6 gap-6\" :class=\"{ 'border-t border-surface-200 dark:border-surface-700': i !== 0 }\">\n                    <Skeleton class=\"!w-9/12 sm:!w-64 xl:!w-40 !h-24 mx-auto\" />\n                    <div class=\"flex flex-col sm:flex-row justify-between items-center xl:items-start flex-1 gap-6\">\n                        <div class=\"flex flex-col items-center sm:items-start gap-4\">\n                            <Skeleton width=\"8rem\" height=\"2rem\" />\n                            <Skeleton width=\"6rem\" height=\"1rem\" />\n\n                            <div class=\"flex items-center gap-4\">\n                                <Skeleton width=\"6rem\" height=\"1rem\" />\n                                <Skeleton width=\"3rem\" height=\"1rem\" />\n                            </div>\n                        </div>\n                        <div class=\"flex sm:flex-col items-center sm:items-end gap-4 sm:gap-2\">\n                            <Skeleton width=\"4rem\" height=\"2rem\" />\n                            <Skeleton size=\"3rem\" shape=\"circle\" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </template>\n\n    <template #grid>\n        <div class=\"grid grid-cols-12 gap-4\">\n            <div v-for=\"i in 6\" :key=\"i\" class=\"col-span-12 sm:col-span-6 xl:col-span-4 p-2\">\n                <div class=\"p-6 border border-surface-200 dark:border-surface-700 bg-surface-0 dark:bg-surface-900 rounded\">\n                    <div class=\"flex flex-wrap items-center justify-between gap-2\">\n                        <Skeleton width=\"6rem\" height=\"2rem\" />\n                        <Skeleton width=\"3rem\" height=\"1rem\" />\n                    </div>\n                    <div class=\"flex flex-col items-center gap-4 py-8\">\n                        <Skeleton width=\"75%\" height=\"10rem\" />\n                        <Skeleton width=\"8rem\" height=\"2rem\" />\n                        <Skeleton width=\"6rem\" height=\"1rem\" />\n                    </div>\n                    <div class=\"flex items-center justify-between\">\n                        <Skeleton width=\"4rem\" height=\"2rem\" />\n                        <Skeleton width=\"6rem\" height=\"1rem\" shape=\"circle\" size=\"3rem\" />\n                    </div>\n                </div>\n            </div>\n        </div>\n    </template>\n</DataView>"
    ],
    "props": {
      "value": "T[] | null | undefined",
      "layout": "HintedString<'list' | 'grid'> | undefined",
      "rows": "number | undefined",
      "first": "number | undefined",
      "totalRecords": "number | undefined",
      "paginator": "boolean | undefined",
      "paginatorPosition": "HintedString<'top' | 'bottom' | 'both'> | undefined",
      "alwaysShowPaginator": "boolean | undefined",
      "paginatorTemplate": "string | undefined",
      "pageLinkSize": "number | undefined",
      "rowsPerPageOptions": "number[] | undefined",
      "currentPageReportTemplate": "string | undefined",
      "sortField": "string | ((item: any) => string) | null | undefined",
      "sortOrder": "number | null | undefined",
      "lazy": "boolean | undefined",
      "dataKey": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<DataViewPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:first'": "void",
      "'update:rows'": "void",
      "page": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "first",
        "rows",
        "sortField",
        "sortOrder",
        "getKey",
        "onPage",
        "sort",
        "resetPage",
        "getTotalRecords",
        "empty",
        "emptyMessageText",
        "paginatorTop",
        "paginatorBottom",
        "items",
        "if"
      ]
    }
  },
  "datepicker": {
    "title": "DatePicker",
    "description": "DatePicker is a form component for date inputs.",
    "examples": [
      "<DatePicker v-model=\"date\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4\">\n    <div class=\"flex flex-col gap-1\">\n        <DatePicker name=\"date\" fluid />\n        <Message v-if=\"$form.date?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.date.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<DatePicker v-model=\"date\" dateFormat=\"dd/mm/yy\" />",
      "<DatePicker v-model=\"buttondisplay\" showIcon fluid :showOnFocus=\"false\" />\n<DatePicker v-model=\"icondisplay\" showIcon fluid iconDisplay=\"input\" />\n<DatePicker v-model=\"templatedisplay\" showIcon fluid iconDisplay=\"input\" timeOnly>\n    <template #inputicon=\"slotProps\">\n        <i class=\"pi pi-clock\" @click=\"slotProps.clickCallback\" />\n    </template>\n</DatePicker>",
      "<DatePicker v-model=\"date\" :minDate=\"minDate\" :maxDate=\"maxDate\" :manualInput=\"false\" />",
      "<DatePicker v-model=\"dates\" selectionMode=\"multiple\" :manualInput=\"false\" />",
      "<DatePicker v-model=\"dates\" selectionMode=\"range\" :manualInput=\"false\" />",
      "<DatePicker v-model=\"date\" showButtonBar placeholder=\"Basic\" />\n<DatePicker v-model=\"dates\" showButtonBar placeholder=\"Customized\" selectionMode=\"range\" :manualInput=\"false\">\n    <template #buttonbar=\"{ todayCallback, clearCallback }\">\n        <div class=\"flex justify-between w-full\">\n            <div class=\"flex gap-2\">\n                <Button size=\"small\" label=\"Exact\" severity=\"secondary\" />\n                <Button size=\"small\" label=\"Flexible\" severity=\"secondary\" />\n            </div>\n            <div class=\"flex gap-2\">\n                <Button size=\"small\" label=\"Today\" @click=\"todayCallback\" variant=\"outlined\" />\n                <Button size=\"small\" icon=\"pi pi-times\" severity=\"danger\" variant=\"outlined\" @click=\"clearCallback\" />\n            </div>\n        </div>\n    </template>\n</DatePicker>",
      "<DatePicker id=\"datepicker-12h\" v-model=\"datetime12h\" showTime hourFormat=\"12\" fluid />\n<DatePicker id=\"datepicker-24h\" v-model=\"datetime24h\" showTime hourFormat=\"24\" fluid />\n<DatePicker id=\"datepicker-timeonly\" v-model=\"time\" timeOnly fluid />",
      "<DatePicker v-model=\"date\" view=\"month\" dateFormat=\"mm/yy\" />",
      "<DatePicker v-model=\"date\" view=\"year\" dateFormat=\"yy\" />",
      "<DatePicker v-model=\"date\" :numberOfMonths=\"2\" />",
      "<DatePicker v-model=\"dateTypeModel\" />\n<DatePicker v-model=\"stringTypeModel\" updateModelType=\"string\" />",
      "<DatePicker v-model=\"date\">\n    <template #date=\"slotProps\">\n        <strong v-if=\"slotProps.date.day > 10 && slotProps.date.day < 15\" style=\"text-decoration: line-through\">{{ slotProps.date.day }}</strong>\n        <template v-else>{{ slotProps.date.day }}</template>\n    </template>\n</DatePicker>",
      "<DatePicker v-model=\"date\" inline showWeek class=\"w-full sm:w-[30rem]\" />",
      "<FloatLabel>\n    <DatePicker v-model=\"value1\" inputId=\"over_label\" showIcon iconDisplay=\"input\" />\n    <label for=\"over_label\">Over Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"in\">\n    <DatePicker v-model=\"value2\" inputId=\"in_label\" showIcon iconDisplay=\"input\" variant=\"filled\" />\n    <label for=\"in_label\">In Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"on\">\n    <DatePicker v-model=\"value3\" inputId=\"on_label\" showIcon iconDisplay=\"input\" />\n    <label for=\"on_label\">On Label</label>\n</FloatLabel>",
      "<IftaLabel>\n    <DatePicker v-model=\"value\" inputId=\"date\" showIcon iconDisplay=\"input\" variant=\"filled\" />\n    <label for=\"date\">Date</label>\n</IftaLabel>",
      "<DatePicker v-model=\"date\" showClear />",
      "<DatePicker v-model=\"value1\" size=\"small\" placeholder=\"Small\" showIcon iconDisplay=\"input\" />\n<DatePicker v-model=\"value2\" placeholder=\"Normal\" showIcon iconDisplay=\"input\" />\n<DatePicker v-model=\"value3\" size=\"large\" placeholder=\"Large\" showIcon iconDisplay=\"input\" />",
      "<DatePicker v-model=\"date\" fluid />",
      "<DatePicker v-model=\"date\" variant=\"filled\" />",
      "<DatePicker v-model=\"date\" disabled />",
      "<DatePicker v-model=\"date1\" :invalid=\"!date1\" placeholder=\"Date\" />\n<DatePicker v-model=\"date2\" :invalid=\"!date2\" variant=\"filled\" placeholder=\"Date\" />",
      "<label for=\"date1\">Date</label>\n<DatePicker inputId=\"date1\" />\n\n<span id=\"date2\">Date</span>\n<DatePicker aria-labelledby=\"date2\" />\n\n<DatePicker aria-label=\"Date\" />"
    ],
    "props": {
      "modelValue": "Date | Array<Date> | Array<Date | null> | undefined | null",
      "defaultValue": "Date | Array<Date> | Array<Date | null> | undefined | null",
      "name": "string | undefined",
      "selectionMode": "HintedString<'single' | 'multiple' | 'range'> | undefined",
      "dateFormat": "string | undefined",
      "updateModelType": "HintedString<'date' | 'string'> | undefined",
      "inline": "boolean | undefined",
      "showOtherMonths": "boolean | undefined",
      "selectOtherMonths": "boolean | undefined",
      "showIcon": "boolean | undefined",
      "iconDisplay": "HintedString<'button' | 'input'> | undefined",
      "icon": "string | undefined",
      "prevIcon": "string | undefined",
      "nextIcon": "string | undefined",
      "incrementIcon": "string | undefined",
      "decrementIcon": "string | undefined",
      "numberOfMonths": "number | undefined",
      "responsiveOptions": "DatePickerResponsiveOptions[]",
      "breakpoint": "string | undefined",
      "view": "HintedString<'date' | 'month' | 'year'> | undefined",
      "minDate": "Date | undefined",
      "maxDate": "Date | undefined",
      "disabledDates": "Date[] | undefined",
      "disabledDays": "number[] | undefined",
      "maxDateCount": "number | undefined",
      "showOnFocus": "boolean | undefined",
      "autoZIndex": "boolean | undefined",
      "baseZIndex": "number | undefined",
      "showButtonBar": "boolean | undefined",
      "shortYearCutoff": "string | undefined",
      "showTime": "boolean | undefined",
      "timeOnly": "boolean | undefined",
      "hourFormat": "HintedString<'12' | '24'> | undefined",
      "stepHour": "number | undefined",
      "stepMinute": "number | undefined",
      "stepSecond": "number | undefined",
      "showSeconds": "boolean | undefined",
      "hideOnDateTimeSelect": "boolean | undefined",
      "hideOnRangeSelection": "boolean | undefined",
      "timeSeparator": "string | undefined",
      "showWeek": "boolean | undefined",
      "manualInput": "boolean | undefined",
      "showClear": "boolean | undefined",
      "size": "HintedString<'small' | 'large'> | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "variant": "HintedString<'outlined' | 'filled'> | undefined | null",
      "readonly": "boolean | undefined",
      "placeholder": "string | undefined",
      "required": "boolean | undefined",
      "appendTo": "HintedString<'body' | 'self'> | undefined | HTMLElement",
      "inputId": "string | undefined",
      "inputStyle": "object | undefined",
      "inputClass": "string | object | undefined",
      "panelStyle": "object | undefined",
      "panelClass": "string | object | undefined",
      "todayButtonProps": "object | undefined",
      "clearButtonProps": "object | undefined",
      "navigatorButtonProps": "object | undefined",
      "timepickerButtonProps": "object | undefined",
      "fluid": "boolean | undefined",
      "ariaLabelledby": "string | undefined",
      "ariaLabel": "string | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<DatePickerPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "input": "void",
      "'date-select'": "void",
      "show": "void",
      "hide": "void",
      "'today-click'": "void",
      "'clear-click'": "void",
      "'month-change'": "void",
      "'year-change'": "void",
      "focus": "void",
      "blur": "void",
      "keydown": "void"
    },
    "slots": {},
    "logic": {
      "composables": [
        "useUp",
        "useDown",
        "useLeave"
      ],
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "handler",
        "if",
        "showTime",
        "minDate",
        "maxDate",
        "months",
        "numberOfMonths",
        "responsiveOptions",
        "currentView",
        "view",
        "created",
        "mounted",
        "updated",
        "beforeUnmount",
        "isSelected",
        "for",
        "isMonthSelected",
        "isYearSelected",
        "isDateEquals",
        "isDateBetween",
        "getFirstDayOfMonthIndex",
        "getDaysCountInMonth",
        "getDaysCountInPrevMonth",
        "getPreviousMonthAndYear",
        "getNextMonthAndYear",
        "daylightSavingAdjust",
        "isToday",
        "isSelectable",
        "onOverlayEnter",
        "onOverlayEnterComplete",
        "onOverlayAfterLeave",
        "onOverlayLeave",
        "onPrevButtonClick",
        "onNextButtonClick",
        "navBackward",
        "navForward",
        "decrementYear",
        "decrementDecade",
        "incrementYear",
        "incrementDecade",
        "switchToMonthView",
        "switchToYearView",
        "isEnabled",
        "updateCurrentTimeMeta",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "bindScrollListener",
        "unbindScrollListener",
        "bindResizeListener",
        "unbindResizeListener",
        "bindMatchMediaListener",
        "unbindMatchMediaListener",
        "bindMatchMediaOrientationListener",
        "unbindMatchMediaOrientationListener",
        "isOutsideClicked",
        "isNavIconClicked",
        "alignOverlay",
        "onButtonClick",
        "isDateDisabled",
        "isDayDisabled",
        "onMonthDropdownChange",
        "onYearDropdownChange",
        "onDateSelect",
        "selectDate",
        "updateModel",
        "shouldSelectDate",
        "isSingleSelection",
        "isRangeSelection",
        "isMultipleSelection",
        "formatValue",
        "catch",
        "formatDateTime",
        "formatDate",
        "while",
        "formatTime",
        "onTodayButtonClick",
        "onClearButtonClick",
        "onTimePickerElementMouseDown",
        "onTimePickerElementMouseUp",
        "onTimePickerElementMouseLeave",
        "onTimePickerElementKeyDown",
        "onTimePickerElementKeyUp",
        "repeat",
        "switch",
        "convertTo24Hour",
        "validateTime",
        "incrementHour",
        "decrementHour",
        "incrementMinute",
        "decrementMinute",
        "incrementSecond",
        "decrementSecond",
        "updateModelTime",
        "toggleAMPM",
        "clearTimePickerTimer",
        "onMonthSelect",
        "onYearSelect",
        "updateCurrentMetaData",
        "isValidSelection",
        "parseValue",
        "parseValueForComparison",
        "parseDateTime",
        "populateTime",
        "parseTime",
        "parseDate",
        "getWeekNumber",
        "onDateCellKeydown",
        "navigateToMonth",
        "onMonthCellKeydown",
        "onYearCellKeydown",
        "updateFocus",
        "initFocusableCell",
        "trapFocus",
        "onContainerButtonKeydown",
        "onInput",
        "onInputClick",
        "onFocus",
        "onBlur",
        "onKeyDown",
        "overlayRef",
        "inputRef",
        "previousButtonRef",
        "nextButtonRef",
        "getMonthName",
        "getYear",
        "onClearClick",
        "onOverlayClick",
        "onOverlayKeyDown",
        "onOverlayMouseUp",
        "createResponsiveStyle",
        "child",
        "and",
        "destroyResponsiveStyleElement",
        "dayDataP",
        "viewDate",
        "inputFieldValue",
        "weekDays",
        "ticksTo1970",
        "sundayIndex",
        "datePattern",
        "monthPickerValues",
        "yearPickerValues",
        "formattedCurrentHour",
        "formattedCurrentMinute",
        "formattedCurrentSecond",
        "todayLabel",
        "clearLabel",
        "weekHeaderLabel",
        "monthNames",
        "switchViewButtonDisabled",
        "isClearIconVisible",
        "panelId",
        "containerDataP",
        "panelDataP",
        "inputIconDataP",
        "timePickerDataP",
        "hourIncrementCallbacks",
        "hourDecrementCallbacks",
        "minuteIncrementCallbacks",
        "minuteDecrementCallbacks",
        "secondIncrementCallbacks",
        "secondDecrementCallbacks"
      ],
      "emits": [
        "show",
        "hide"
      ]
    }
  },
  "deferredcontent": {
    "title": "DeferredContent",
    "description": "DeferredContent postpones the loading the content that is initially not in the viewport until it becomes visible on scroll.",
    "examples": [
      "<DeferredContent @load=\"onImageLoad\">\n    <img src=\"/images/nature/nature4.jpg\" alt=\"Nature\" class=\"rounded-xl w-full md:w-96 block sm:mx-auto\" />\n</DeferredContent>",
      "<DeferredContent @load=\"onDataLoad\" role=\"region\" aria-live=\"polite\" aria-label=\"Content loaded after page scrolled down\">\n    <DataTable :value=\"products\">\n        <Column field=\"code\" header=\"Code\"></Column>\n        <Column field=\"name\" header=\"Name\"></Column>\n        <Column field=\"category\" header=\"Category\"></Column>\n        <Column field=\"quantity\" header=\"Quantity\"></Column>\n    </DataTable>\n</DeferredContent>",
      "<DeferredContent role=\"region\" aria-live=\"polite\" aria-label=\"Content loaded after page scrolled down\">\n    Content\n</DeferredContent>"
    ],
    "props": {
      "dt": "DesignToken<any>",
      "pt": "PassThrough<DeferredContentPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "load": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref"
      ],
      "methods": [
        "data",
        "mounted",
        "beforeUnmount",
        "bindScrollListener",
        "unbindScrollListener",
        "shouldLoad",
        "load"
      ]
    }
  },
  "dialog": {
    "title": "Dialog",
    "description": "Dialog is a container to display content in an overlay window.",
    "examples": [
      "<Button label=\"Show\" @click=\"visible = true\" />\n\n<Dialog v-model:visible=\"visible\" modal header=\"Edit Profile\" :style=\"{ width: '25rem' }\">\n    <span class=\"text-surface-500 dark:text-surface-400 block mb-8\">Update your information.</span>\n    <div class=\"flex items-center gap-4 mb-4\">\n        <label for=\"username\" class=\"font-semibold w-24\">Username</label>\n        <InputText id=\"username\" class=\"flex-auto\" autocomplete=\"off\" />\n    </div>\n    <div class=\"flex items-center gap-4 mb-8\">\n        <label for=\"email\" class=\"font-semibold w-24\">Email</label>\n        <InputText id=\"email\" class=\"flex-auto\" autocomplete=\"off\" />\n    </div>\n    <div class=\"flex justify-end gap-2\">\n        <Button type=\"button\" label=\"Cancel\" severity=\"secondary\" @click=\"visible = false\"></Button>\n        <Button type=\"button\" label=\"Save\" @click=\"visible = false\"></Button>\n    </div>\n</Dialog>",
      "<Button label=\"Show\" @click=\"visible = true\" />\n\n<Dialog v-model:visible=\"visible\" modal header=\"Edit Profile\" :style=\"{ width: '25rem' }\">\n    <template #header>\n        <div class=\"inline-flex items-center justify-center gap-2\">\n            <Avatar image=\"https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png\" shape=\"circle\" />\n            <span class=\"font-bold whitespace-nowrap\">Amy Elsner</span>\n        </div>\n    </template>\n    <span class=\"text-surface-500 dark:text-surface-400 block mb-8\">Update your information.</span>\n    <div class=\"flex items-center gap-4 mb-4\">\n        <label for=\"username\" class=\"font-semibold w-24\">Username</label>\n        <InputText id=\"username\" class=\"flex-auto\" autocomplete=\"off\" />\n    </div>\n    <div class=\"flex items-center gap-4 mb-2\">\n        <label for=\"email\" class=\"font-semibold w-24\">Email</label>\n        <InputText id=\"email\" class=\"flex-auto\" autocomplete=\"off\" />\n    </div>\n    <template #footer>\n        <Button label=\"Cancel\" text severity=\"secondary\" @click=\"visible = false\" autofocus />\n        <Button label=\"Save\" variant=\"outlined\" severity=\"secondary\" @click=\"visible = false\" autofocus />\n    </template>\n</Dialog>",
      "<div class=\"flex flex-wrap justify-center gap-2 mb-2\">\n    <Button label=\"Left\" icon=\"pi pi-arrow-right\" @click=\"openPosition('left')\" severity=\"secondary\" style=\"min-width: 10rem\" />\n    <Button label=\"Right\" icon=\"pi pi-arrow-left\" @click=\"openPosition('right')\" severity=\"secondary\" style=\"min-width: 10rem\" />\n</div>\n<div class=\"flex flex-wrap justify-center gap-2 mb-2\">\n    <Button label=\"TopLeft\" icon=\"pi pi-arrow-down-right\" @click=\"openPosition('topleft')\" severity=\"secondary\" style=\"min-width: 10rem\" />\n    <Button label=\"Top\" icon=\"pi pi-arrow-down\" @click=\"openPosition('top')\" severity=\"secondary\" style=\"min-width: 10rem\" />\n    <Button label=\"TopRight\" icon=\"pi pi-arrow-down-left\" @click=\"openPosition('topright')\" severity=\"secondary\" style=\"min-width: 10rem\" />\n</div>\n<div class=\"flex flex-wrap justify-center gap-2\">\n    <Button label=\"BottomLeft\" icon=\"pi pi-arrow-up-right\" @click=\"openPosition('bottomleft')\" severity=\"secondary\" style=\"min-width: 10rem\" />\n    <Button label=\"Bottom\" icon=\"pi pi-arrow-up\" @click=\"openPosition('bottom')\" severity=\"secondary\" style=\"min-width: 10rem\" />\n    <Button label=\"BottomRight\" icon=\"pi pi-arrow-up-left\" @click=\"openPosition('bottomright')\" severity=\"secondary\" style=\"min-width: 10rem\" />\n</div>\n\n<Dialog v-model:visible=\"visible\" header=\"Edit Profile\" :style=\"{ width: '25rem' }\" :position=\"position\" :modal=\"true\" :draggable=\"false\">\n    <span class=\"text-surface-500 dark:text-surface-400 block mb-8\">Update your information.</span>\n    <div class=\"flex items-center gap-4 mb-4\">\n        <label for=\"username\" class=\"font-semibold w-24\">Username</label>\n        <InputText id=\"username\" class=\"flex-auto\" autocomplete=\"off\" />\n    </div>\n    <div class=\"flex items-center gap-4 mb-8\">\n        <label for=\"email\" class=\"font-semibold w-24\">Email</label>\n        <InputText id=\"email\" class=\"flex-auto\" autocomplete=\"off\" />\n    </div>\n    <div class=\"flex justify-end gap-2\">\n        <Button type=\"button\" label=\"Cancel\" severity=\"secondary\" @click=\"visible = false\"></Button>\n        <Button type=\"button\" label=\"Save\" @click=\"visible = false\"></Button>\n    </div>\n</Dialog>",
      "<Button label=\"Show\" @click=\"visible = true\" />\n\n<Dialog v-model:visible=\"visible\" maximizable modal header=\"Header\" :style=\"{ width: '50rem' }\" :breakpoints=\"{ '1199px': '75vw', '575px': '90vw' }\">\n    <p class=\"m-0\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n    </p>\n</Dialog>",
      "<Button label=\"Show\" @click=\"visible = true\" />\n\n<Dialog v-model:visible=\"visible\" modal header=\"Header\" :style=\"{ width: '50rem' }\" :breakpoints=\"{ '1199px': '75vw', '575px': '90vw' }\">\n    <p class=\"mb-8\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n    </p>\n    <p class=\"mb-8\">\n        \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim\n        ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur,\n        adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid\n        ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n    </p>\n    <p class=\"mb-8\">\n        At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa\n        qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod\n        maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae\n        non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\n    </p>\n    <p class=\"mb-8\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n    </p>\n    <p class=\"mb-8\">\n        \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim\n        ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur,\n        adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid\n        ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n    </p>\n    <p>\n        At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa\n        qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod\n        maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae\n        non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\n    </p>\n</Dialog>",
      "<Button label=\"Show\" @click=\"visible = true\" />\n\n<Dialog v-model:visible=\"visible\" header=\"Edit Profile\" :style=\"{ width: '25rem' }\">\n    <span class=\"text-surface-500 dark:text-surface-400 block mb-8\">Update your information.</span>\n    <div class=\"flex items-center gap-4 mb-4\">\n        <label for=\"username\" class=\"font-semibold w-24\">Username</label>\n        <InputText id=\"username\" class=\"flex-auto\" autocomplete=\"off\" />\n    </div>\n    <div class=\"flex items-center gap-4 mb-8\">\n        <label for=\"email\" class=\"font-semibold w-24\">Email</label>\n        <InputText id=\"email\" class=\"flex-auto\" autocomplete=\"off\" />\n    </div>\n    <div class=\"flex justify-end gap-2\">\n        <Button type=\"button\" label=\"Cancel\" severity=\"secondary\" @click=\"visible = false\"></Button>\n        <Button type=\"button\" label=\"Save\" @click=\"visible = false\"></Button>\n    </div>\n</Dialog>",
      "<Button label=\"Show\" @click=\"visible = true\" />\n\n<Dialog v-model:visible=\"visible\" modal header=\"Header\" :style=\"{ width: '50vw' }\" :breakpoints=\"{ '1199px': '75vw', '575px': '90vw' }\">\n    <p class=\"m-0\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n    </p>\n</Dialog>",
      "<Button label=\"Login\" icon=\"pi pi-user\" @click=\"visible = true\" />\n\n<Dialog v-model:visible=\"visible\" pt:root:class=\"!border-0 !bg-transparent\" pt:mask:class=\"backdrop-blur-sm\">\n    <template #container=\"{ closeCallback }\">\n        <div class=\"flex flex-col px-8 py-8 gap-6 rounded-2xl\" style=\"background-image: radial-gradient(circle at left top, var(--p-primary-400), var(--p-primary-700))\">\n            <svg width=\"35\" height=\"40\" viewBox=\"0 0 35 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" class=\"block mx-auto\">\n                <path\n                    d=\"M25.87 18.05L23.16 17.45L25.27 20.46V29.78L32.49 23.76V13.53L29.18 14.73L25.87 18.04V18.05ZM25.27 35.49L29.18 31.58V27.67L25.27 30.98V35.49ZM20.16 17.14H20.03H20.17H20.16ZM30.1 5.19L34.89 4.81L33.08 12.33L24.1 15.67L30.08 5.2L30.1 5.19ZM5.72 14.74L2.41 13.54V23.77L9.63 29.79V20.47L11.74 17.46L9.03 18.06L5.72 14.75V14.74ZM9.63 30.98L5.72 27.67V31.58L9.63 35.49V30.98ZM4.8 5.2L10.78 15.67L1.81 12.33L0 4.81L4.79 5.19L4.8 5.2ZM24.37 21.05V34.59L22.56 37.29L20.46 39.4H14.44L12.34 37.29L10.53 34.59V21.05L12.42 18.23L17.45 26.8L22.48 18.23L24.37 21.05ZM22.85 0L22.57 0.69L17.45 13.08L12.33 0.69L12.05 0H22.85Z\"\n                    fill=\"var(--p-primary-700)\"\n                />\n                <path\n                    d=\"M30.69 4.21L24.37 4.81L22.57 0.69L22.86 0H26.48L30.69 4.21ZM23.75 5.67L22.66 3.08L18.05 14.24V17.14H19.7H20.03H20.16H20.2L24.1 15.7L30.11 5.19L23.75 5.67ZM4.21002 4.21L10.53 4.81L12.33 0.69L12.05 0H8.43002L4.22002 4.21H4.21002ZM21.9 17.4L20.6 18.2H14.3L13 17.4L12.4 18.2L12.42 18.23L17.45 26.8L22.48 18.23L22.5 18.2L21.9 17.4ZM4.79002 5.19L10.8 15.7L14.7 17.14H14.74H15.2H16.85V14.24L12.24 3.09L11.15 5.68L4.79002 5.2V5.19Z\"\n                    fill=\"var(--p-primary-200)\"\n                />\n            </svg>\n            <div class=\"inline-flex flex-col gap-2\">\n                <label for=\"username\" class=\"text-primary-50 font-semibold\">Username</label>\n                <InputText id=\"username\" class=\"!bg-white/20 !border-0 !p-4 !text-primary-50 w-80\"></InputText>\n            </div>\n            <div class=\"inline-flex flex-col gap-2\">\n                <label for=\"password\" class=\"text-primary-50 font-semibold\">Password</label>\n                <InputText id=\"password\" class=\"!bg-white/20 !border-0 !p-4 !text-primary-50 w-80\" type=\"password\"></InputText>\n            </div>\n            <div class=\"flex items-center gap-4\">\n                <Button label=\"Cancel\" @click=\"closeCallback\" variant=\"text\" class=\"!p-4 w-full !text-primary-50 !border !border-white/30 hover:!bg-white/10\"></Button>\n                <Button label=\"Sign-In\" @click=\"closeCallback\" variant=\"text\" class=\"!p-4 w-full !text-primary-50 !border !border-white/30 hover:!bg-white/10\"></Button>\n            </div>\n        </div>\n    </template>\n</Dialog>",
      "<Button label=\"Show\" icon=\"pi pi-external-link\" @click=\"visible = true\" :aria-controls=\"visible ? 'dlg' : null\" :aria-expanded=\"visible ? true : false\" />\n\n<Dialog id=\"dlg\" header=\"Header\" v-model:visible=\"visible\" :style=\"{ width: '50vw' }\">\n    <p>Content</p>\n</Dialog>"
    ],
    "props": {
      "header": "string | undefined",
      "footer": "string | undefined",
      "visible": "boolean | undefined",
      "modal": "boolean | undefined",
      "contentStyle": "any",
      "contentClass": "any",
      "contentProps": "HTMLAttributes | undefined",
      "closable": "boolean | undefined",
      "dismissableMask": "boolean | undefined",
      "closeOnEscape": "boolean | undefined",
      "showHeader": "boolean | undefined",
      "blockScroll": "boolean | undefined",
      "baseZIndex": "number | undefined",
      "autoZIndex": "boolean | undefined",
      "position": "HintedString<'center' | 'top' | 'bottom' | 'left' | 'right' | 'topleft' | 'topright' | 'bottomleft' | 'bottomright'> | undefined",
      "maximizable": "boolean | undefined",
      "breakpoints": "DialogBreakpoints",
      "draggable": "boolean | undefined",
      "keepInViewport": "boolean | undefined",
      "minX": "number | undefined",
      "minY": "number | undefined",
      "appendTo": "HintedString<'body' | 'self'> | undefined | HTMLElement",
      "style": "any",
      "closeIcon": "string | undefined",
      "maximizeIcon": "string | undefined",
      "minimizeIcon": "string | undefined",
      "closeButtonProps": "object | undefined",
      "maximizeButtonProps": "object | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<DialogPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:visible'": "void",
      "hide": "void",
      "'after-hide'": "void",
      "show": "void",
      "maximize": "void",
      "unmaximize": "void",
      "dragstart": "void",
      "dragend": "void"
    },
    "slots": {},
    "logic": {
      "composables": [
        "useDown",
        "useUp",
        "useDownTarget"
      ],
      "vueImports": [
        "ref",
        "computed"
      ],
      "methods": [
        "provide",
        "data",
        "updated",
        "beforeUnmount",
        "mounted",
        "close",
        "onEnter",
        "onAfterEnter",
        "onBeforeLeave",
        "if",
        "onLeave",
        "onAfterLeave",
        "onMaskMouseDown",
        "onMaskMouseUp",
        "focus",
        "maximize",
        "enableDocumentSettings",
        "unbindDocumentState",
        "onKeyDown",
        "bindDocumentKeyDownListener",
        "unbindDocumentKeyDownListener",
        "containerRef",
        "maskRef",
        "contentRef",
        "headerContainerRef",
        "footerContainerRef",
        "maximizableRef",
        "closeButtonRef",
        "createStyle",
        "destroyStyle",
        "initDrag",
        "bindGlobalListeners",
        "unbindGlobalListeners",
        "bindDocumentDragListener",
        "unbindDocumentDragListener",
        "bindDocumentDragEndListener",
        "unbindDocumentDragEndListener",
        "maximizeIconComponent",
        "ariaLabelledById",
        "closeAriaLabel",
        "dataP"
      ],
      "emits": [
        "show",
        "hide",
        "after-hide"
      ]
    }
  },
  "dialogservice": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "install",
        "close"
      ]
    }
  },
  "divider": {
    "title": "Divider",
    "description": "Divider is used to separate contents.",
    "examples": [
      "<p class=\"m-0\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis\n    aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n</p>\n\n<Divider />\n\n<p class=\"m-0\">\n    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam\n    voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.\n</p>\n\n<Divider />\n\n<p class=\"m-0\">\n    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia\n    deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n</p>\n\n<Divider />\n\n<p class=\"m-0\">\n    Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus\n    maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.\n</p>",
      "<p class=\"m-0\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis\n    aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n</p>\n\n<Divider type=\"solid\" />\n\n<p class=\"m-0\">\n    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam\n    voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.\n</p>\n\n<Divider type=\"dotted\" />\n\n<p class=\"m-0\">\n    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia\n    deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n</p>\n\n<Divider type=\"dashed\" />\n\n<p class=\"m-0\">\n    Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus\n    maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.\n</p>",
      "<p class=\"m-0\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis\n    aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n</p>\n\n<Divider layout=\"vertical\" />\n\n<p class=\"m-0\">\n    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam\n    voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.\n</p>\n\n<Divider layout=\"vertical\" />\n\n<p class=\"m-0\">\n    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia\n    deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n</p>",
      "<p class=\"m-0\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis\n    aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n</p>\n\n<Divider align=\"left\" type=\"solid\">\n    <b>Left</b>\n</Divider>\n\n<p class=\"m-0\">\n    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam\n    voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.\n</p>\n\n<Divider align=\"center\" type=\"dotted\">\n    <b>Center</b>\n</Divider>\n\n<p class=\"m-0\">\n    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia\n    deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n</p>\n\n<Divider align=\"right\" type=\"dashed\">\n    <b>Right</b>\n</Divider>\n\n<p class=\"m-0\">\n    Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus\n    maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.\n</p>",
      "<div class=\"flex flex-col md:flex-row\">\n    <div class=\"w-full md:w-5/12 flex flex-col items-center justify-center gap-3 py-5\">\n        <div class=\"flex flex-col gap-2\">\n            <label for=\"username\">Username</label>\n            <InputText id=\"username\" type=\"text\" />\n        </div>\n        <div class=\"flex flex-col gap-2\">\n            <label for=\"password\">Password</label>\n            <InputText id=\"password\" type=\"password\" />\n        </div>\n        <div class=\"flex\">\n            <Button label=\"Login\" icon=\"pi pi-user\" class=\"w-full max-w-[17.35rem] mx-auto\"></Button>\n        </div>\n    </div>\n    <div class=\"w-full md:w-2/12\">\n        <Divider layout=\"vertical\" class=\"!hidden md:!flex\"><b>OR</b></Divider>\n        <Divider layout=\"horizontal\" class=\"!flex md:!hidden\" align=\"center\"><b>OR</b></Divider>\n    </div>\n    <div class=\"w-full md:w-5/12 flex items-center justify-center py-5\">\n        <Button label=\"Sign Up\" icon=\"pi pi-user-plus\" severity=\"success\" class=\"w-full max-w-[17.35rem] mx-auto\"></Button>\n    </div>\n</div>"
    ],
    "props": {
      "align": "HintedString<'left' | 'center' | 'right' | 'top' | 'center' | 'bottom'> | undefined",
      "layout": "HintedString<'horizontal' | 'vertical'> | undefined",
      "type": "HintedString<'solid' | 'dashed' | 'dotted'> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<DividerPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "dataP"
      ]
    }
  },
  "dock": {
    "title": "Dock",
    "description": "Dock is a navigation component consisting of menuitems.",
    "examples": [
      "<Dock :model=\"items\" :position=\"position\">\n    <template #itemicon=\"{ item }\">\n        <img v-tooltip.top=\"item.label\" :alt=\"item.label\" :src=\"item.icon\" style=\"width: 100%\" />\n    </template>\n</Dock>",
      "<Dock :model=\"items\">\n    <template #item=\"{ item }\">\n        <a v-tooltip.top=\"item.label\" href=\"#\" class=\"p-dock-item-link\" @click=\"onDockItemClick($event, item)\">\n            <img :alt=\"item.label\" :src=\"item.icon\" style=\"width: 100%\" />\n        </a>\n    </template>\n</Dock>"
    ],
    "props": {
      "model": "MenuItem[] | undefined",
      "position": "HintedString<'bottom' | 'top' | 'left' | 'right'> | undefined",
      "class": "any",
      "style": "any",
      "breakpoint": "string | undefined",
      "tooltipOptions": "DockTooltipOptions",
      "menuId": "string | undefined",
      "tabindex": "number | string | undefined",
      "ariaLabelledby": "string | undefined",
      "ariaLabel": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<DockPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "focus": "void",
      "blur": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "beforeUnmount",
        "bindMatchMediaListener",
        "unbindMatchMediaListener",
        "containerClass"
      ]
    }
  },
  "drawer": {
    "title": "Drawer",
    "description": "Drawer is a container component displayed as an overlay.",
    "examples": [
      "<div class=\"card flex justify-center\">\n    <Drawer v-model:visible=\"visible\" header=\"Drawer\">\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n    </Drawer>\n    <Button icon=\"pi pi-arrow-right\" @click=\"visible = true\" />\n</div>",
      "<div class=\"flex gap-2 justify-center\">\n    <Button icon=\"pi pi-arrow-right\" @click=\"visibleLeft = true\" />\n    <Button icon=\"pi pi-arrow-left\" @click=\"visibleRight = true\" />\n    <Button icon=\"pi pi-arrow-down\" @click=\"visibleTop = true\" />\n    <Button icon=\"pi pi-arrow-up\" @click=\"visibleBottom = true\" />\n</div>\n\n<Drawer v-model:visible=\"visibleLeft\" header=\"Left Drawer\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n</Drawer>\n\n<Drawer v-model:visible=\"visibleRight\" header=\"Right Drawer\" position=\"right\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n</Drawer>\n\n<Drawer v-model:visible=\"visibleTop\" header=\"Top Drawer\" position=\"top\" style=\"height: auto\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n</Drawer>\n\n<Drawer v-model:visible=\"visibleBottom\" header=\"Bottom Drawer\" position=\"bottom\" style=\"height: auto\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n</Drawer>",
      "<div class=\"card flex justify-center\">\n    <Drawer v-model:visible=\"visible\" header=\"Drawer\" class=\"!w-full md:!w-80 lg:!w-[30rem]\">\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n    </Drawer>\n    <Button icon=\"pi pi-arrow-right\" @click=\"visible = true\" />\n</div>",
      "<div class=\"card flex justify-center\">\n    <Drawer v-model:visible=\"visible\" header=\"Drawer\" position=\"full\">\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n    </Drawer>\n    <Button icon=\"pi pi-window-maximize\" @click=\"visible = true\" />\n</div>",
      "<Drawer v-model:visible=\"visible\">\n    <template #header>\n        <div class=\"flex items-center gap-2\">\n            <Avatar image=\"/images/avatar/amyelsner.png\" shape=\"circle\" />\n            <span class=\"font-bold\">Amy Elsner</span>\n        </div>\n    </template>\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n    <template #footer>\n        <div class=\"flex items-center gap-2\">\n            <Button label=\"Account\" icon=\"pi pi-user\" class=\"flex-auto\" variant=\"outlined\"></Button>\n            <Button label=\"Logout\" icon=\"pi pi-sign-out\" class=\"flex-auto\" severity=\"danger\" text></Button>\n        </div>\n    </template>\n</Drawer>\n<Button icon=\"pi pi-plus\" @click=\"visible = true\" />",
      "<Drawer v-model:visible=\"visible\">\n    <template #container=\"{ closeCallback }\">\n        <div class=\"flex flex-col h-full\">\n            <div class=\"flex items-center justify-between px-6 pt-4 shrink-0\">\n                <span class=\"inline-flex items-center gap-2\">\n                    <svg width=\"35\" height=\"40\" viewBox=\"0 0 35 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"...\" fill=\"var(--p-primary-color)\" />\n                        <path d=\"...\" fill=\"var(--p-text-color)\" />\n                    </svg>\n                    <span class=\"font-semibold text-2xl text-primary\">Your Logo</span>\n                </span>\n                <span>\n                    <Button type=\"button\" @click=\"closeCallback\" icon=\"pi pi-times\" rounded variant=\"outlined\"></Button>\n                </span>\n            </div>\n            <div class=\"overflow-y-auto\">\n                <ul class=\"list-none p-4 m-0\">\n                    <li>\n                        <div\n                            v-ripple\n                            v-styleclass=\"{\n                                selector: '@next',\n                                enterFromClass: 'hidden',\n                                enterActiveClass: 'animate-slidedown',\n                                leaveToClass: 'hidden',\n                                leaveActiveClass: 'animate-slideup'\n                            }\"\n                            class=\"p-4 flex items-center justify-between text-surface-500 dark:text-surface-400 cursor-pointer p-ripple\"\n                        >\n                            <span class=\"font-medium\">FAVORITES</span>\n                            <i class=\"pi pi-chevron-down\"></i>\n                        </div>\n                        <ul class=\"list-none p-0 m-0 overflow-hidden\">\n                            <li>\n                                <a v-ripple class=\"flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\">\n                                    <i class=\"pi pi-home mr-2\"></i>\n                                    <span class=\"font-medium\">Dashboard</span>\n                                </a>\n                            </li>\n                            <li>\n                                <a v-ripple class=\"flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\">\n                                    <i class=\"pi pi-bookmark mr-2\"></i>\n                                    <span class=\"font-medium\">Bookmarks</span>\n                                </a>\n                            </li>\n                            <li>\n                                <a\n                                    v-ripple\n                                    v-styleclass=\"{\n                                        selector: '@next',\n                                        enterFromClass: 'hidden',\n                                        enterActiveClass: 'animate-slidedown',\n                                        leaveToClass: 'hidden',\n                                        leaveActiveClass: 'animate-slideup'\n                                    }\"\n                                    class=\"flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\"\n                                >\n                                    <i class=\"pi pi-chart-line mr-2\"></i>\n                                    <span class=\"font-medium\">Reports</span>\n                                    <i class=\"pi pi-chevron-down ml-auto\"></i>\n                                </a>\n                                <ul class=\"list-none py-0 pl-4 pr-0 m-0 hidden overflow-y-hidden transition-all duration-[400ms] ease-in-out\">\n                                    <li>\n                                        <a\n                                            v-ripple\n                                            v-styleclass=\"{\n                                                selector: '@next',\n                                                enterFromClass: 'hidden',\n                                                enterActiveClass: 'animate-slidedown',\n                                                leaveToClass: 'hidden',\n                                                leaveActiveClass: 'animate-slideup'\n                                            }\"\n                                            class=\"flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\"\n                                        >\n                                            <i class=\"pi pi-chart-line mr-2\"></i>\n                                            <span class=\"font-medium\">Revenue</span>\n                                            <i class=\"pi pi-chevron-down ml-auto\"></i>\n                                        </a>\n                                        <ul class=\"list-none py-0 pl-4 pr-0 m-0 hidden overflow-y-hidden transition-all duration-[400ms] ease-in-out\">\n                                            <li>\n                                                <a v-ripple class=\"flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\">\n                                                    <i class=\"pi pi-table mr-2\"></i>\n                                                    <span class=\"font-medium\">View</span>\n                                                </a>\n                                            </li>\n                                            <li>\n                                                <a v-ripple class=\"flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\">\n                                                    <i class=\"pi pi-search mr-2\"></i>\n                                                    <span class=\"font-medium\">Search</span>\n                                                </a>\n                                            </li>\n                                        </ul>\n                                    </li>\n                                    <li>\n                                        <a v-ripple class=\"flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\">\n                                            <i class=\"pi pi-chart-line mr-2\"></i>\n                                            <span class=\"font-medium\">Expenses</span>\n                                        </a>\n                                    </li>\n                                </ul>\n                            </li>\n                            <li>\n                                <a v-ripple class=\"flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\">\n                                    <i class=\"pi pi-users mr-2\"></i>\n                                    <span class=\"font-medium\">Team</span>\n                                </a>\n                            </li>\n                            <li>\n                                <a v-ripple class=\"flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\">\n                                    <i class=\"pi pi-comments mr-2\"></i>\n                                    <span class=\"font-medium\">Messages</span>\n                                    <span class=\"inline-flex items-center justify-center ml-auto bg-primary text-primary-contrast rounded-full\" style=\"min-width: 1.5rem; height: 1.5rem\">3</span>\n                                </a>\n                            </li>\n                            <li>\n                                <a v-ripple class=\"flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\">\n                                    <i class=\"pi pi-calendar mr-2\"></i>\n                                    <span class=\"font-medium\">Calendar</span>\n                                </a>\n                            </li>\n                            <li>\n                                <a v-ripple class=\"flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\">\n                                    <i class=\"pi pi-cog mr-2\"></i>\n                                    <span class=\"font-medium\">Settings</span>\n                                </a>\n                            </li>\n                        </ul>\n                    </li>\n                </ul>\n                <ul class=\"list-none p-4 m-0\">\n                    <li>\n                        <div\n                            v-ripple\n                            v-styleclass=\"{\n                                selector: '@next',\n                                enterFromClass: 'hidden',\n                                enterActiveClass: 'animate-slidedown',\n                                leaveToClass: 'hidden',\n                                leaveActiveClass: 'animate-slideup'\n                            }\"\n                            class=\"p-4 flex items-center justify-between text-surface-500 dark:text-surface-400 cursor-pointer p-ripple\"\n                        >\n                            <span class=\"font-medium\">APPLICATION</span>\n                            <i class=\"pi pi-chevron-down\"></i>\n                        </div>\n                        <ul class=\"list-none p-0 m-0 overflow-hidden\">\n                            <li>\n                                <a v-ripple class=\"flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\">\n                                    <i class=\"pi pi-folder mr-2\"></i>\n                                    <span class=\"font-medium\">Projects</span>\n                                </a>\n                            </li>\n                            <li>\n                                <a v-ripple class=\"flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\">\n                                    <i class=\"pi pi-chart-bar mr-2\"></i>\n                                    <span class=\"font-medium\">Performance</span>\n                                </a>\n                            </li>\n                            <li>\n                                <a v-ripple class=\"flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\">\n                                    <i class=\"pi pi-cog mr-2\"></i>\n                                    <span class=\"font-medium\">Settings</span>\n                                </a>\n                            </li>\n                        </ul>\n                    </li>\n                </ul>\n            </div>\n            <div class=\"mt-auto\">\n                <hr class=\"mb-4 mx-4 border-t border-0 border-surface-200 dark:border-surface-700\" />\n                <a v-ripple class=\"m-4 flex items-center cursor-pointer p-4 gap-2 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple\">\n                    <Avatar image=\"/images/avatar/amyelsner.png\" shape=\"circle\" />\n                    <span class=\"font-bold\">Amy Elsner</span>\n                </a>\n            </div>\n        </div>\n    </template>\n</Drawer>\n<Button icon=\"pi pi-bars\" @click=\"visible = true\" />",
      "<Button label=\"Show\" icon=\"pi pi-external-link\" @click=\"visible = true\" :aria-controls=\"visible ? 'sbar' : null\" :aria-expanded=\"visible\"/>\n\n<Drawer id=\"sbar\" v-model:visible=\"visible\" role=\"region\" >\n    <p>Content</p>\n</Drawer>"
    ],
    "props": {
      "visible": "boolean | undefined",
      "position": "HintedString<'left' | 'right' | 'top' | 'bottom' | 'full'> | undefined",
      "header": "string | undefined",
      "baseZIndex": "number | undefined",
      "autoZIndex": "boolean | undefined",
      "dismissable": "boolean | undefined",
      "showCloseIcon": "boolean | undefined",
      "closeButtonProps": "object | undefined",
      "closeIcon": "string | undefined",
      "modal": "boolean | undefined",
      "blockScroll": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<DrawerPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean",
      "closeOnEscape": "boolean | undefined"
    },
    "emits": {
      "'update:visible'": "void",
      "show": "void",
      "'before-hide'": "void",
      "hide": "void",
      "'after-hide'": "void",
      "'after-show'": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "dismissable",
        "updated",
        "beforeUnmount",
        "hide",
        "onEnter",
        "onAfterEnter",
        "onBeforeLeave",
        "onLeave",
        "onAfterLeave",
        "onMaskClick",
        "focus",
        "if",
        "enableDocumentSettings",
        "disableDocumentSettings",
        "onKeydown",
        "containerRef",
        "maskRef",
        "contentRef",
        "headerContainerRef",
        "footerContainerRef",
        "closeButtonRef",
        "bindDocumentKeyDownListener",
        "unbindDocumentKeyDownListener",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "isOutsideClicked",
        "fullScreen",
        "closeAriaLabel",
        "dataP"
      ],
      "emits": [
        "show",
        "after-show",
        "before-hide",
        "hide",
        "after-hide"
      ]
    }
  },
  "dropdown": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "mounted"
      ]
    }
  },
  "dynamicdialog": {
    "title": "Dynamic Dialog",
    "description": "Dialogs can be created dynamically with any component as the content using a DialogService.",
    "examples": [
      "<DynamicDialog />",
      "<script setup>\n/* ProductListDemo.vue */\nconst emit = defineEmits(['cancel', 'save'])\n\nfunction buttonClick() {\n    emit('cancel', {user: 'primetime'});\n}\n\nfunction saveButtonClick() {\n    emit('save', {user: 'primetime'});\n}\n</script>",
      "<Button label=\"Select a Product\" icon=\"pi pi-search\" @click=\"showProducts\" />\n\n<DynamicDialog />"
    ],
    "props": {
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "data",
        "mounted",
        "if",
        "beforeUnmount",
        "onDialogHide",
        "onDialogAfterHide",
        "getTemplateItems"
      ]
    }
  },
  "dynamicdialogoptions": {
    "props": {},
    "emits": {},
    "slots": {}
  },
  "editor": {
    "title": "Editor",
    "description": "Editor is rich text editor component based on Quill.",
    "examples": [
      "<Editor v-model=\"value\" editorStyle=\"height: 320px\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4\">\n    <div class=\"flex flex-col gap-1\">\n        <Editor name=\"content\" editorStyle=\"height: 320px\" />\n        <Message v-if=\"$form.content?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.content.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<Editor v-model=\"value\" editorStyle=\"height: 320px\" readonly />",
      "<Editor v-model=\"value\" editorStyle=\"height: 320px\">\n    <template v-slot:toolbar>\n        <span class=\"ql-formats\">\n            <button v-tooltip.bottom=\"'Bold'\" class=\"ql-bold\"></button>\n            <button v-tooltip.bottom=\"'Italic'\" class=\"ql-italic\"></button>\n            <button v-tooltip.bottom=\"'Underline'\" class=\"ql-underline\"></button>\n        </span>\n    </template>\n</Editor>"
    ],
    "props": {
      "modelValue": "string | undefined",
      "defaultValue": "any",
      "name": "string | undefined",
      "placeholder": "string | undefined",
      "readonly": "boolean | undefined",
      "invalid": "boolean | undefined",
      "formats": "any[]",
      "editorStyle": "any",
      "modules": "any",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<EditorPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "'text-change'": "void",
      "'selection-change'": "void",
      "load": "void"
    },
    "slots": {
      "toolbar": "() => VNode[]"
    },
    "logic": {
      "vueImports": [
        "ref",
        "watch"
      ],
      "methods": [
        "function",
        "modelValue",
        "d_value",
        "readonly",
        "mounted",
        "if",
        "beforeUnmount",
        "renderValue",
        "initQuill",
        "handleLoad",
        "handleReadOnlyChange"
      ]
    }
  },
  "fieldset": {
    "title": "Fieldset",
    "description": "Fieldset is a grouping component with a content toggle feature.",
    "examples": [
      "<Fieldset legend=\"Header\">\n    <p class=\"m-0\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n    </p>\n</Fieldset>",
      "<Fieldset legend=\"Header\" :toggleable=\"true\">\n    <p class=\"m-0\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n    </p>\n</Fieldset>",
      "<Fieldset>\n    <template #legend>\n        <div class=\"flex items-center pl-2\">\n            <Avatar image=\"/images/avatar/amyelsner.png\" shape=\"circle\" />\n            <span class=\"font-bold p-2\">Amy Elsner</span>\n        </div>\n    </template>\n    <p class=\"m-0\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n    </p>\n</Fieldset>"
    ],
    "props": {
      "legend": "string | undefined",
      "toggleable": "boolean | undefined",
      "collapsed": "boolean | undefined",
      "toggleButtonProps": "AnchorHTMLAttributes | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<FieldsetPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:collapsed'": "void",
      "toggle": "void"
    },
    "slots": {
      "default": "() => VNode[]"
    },
    "logic": {
      "vueImports": [
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "collapsed",
        "toggle",
        "onKeyDown",
        "buttonAriaLabel",
        "dataP"
      ]
    }
  },
  "fileupload": {
    "title": "File Upload",
    "description": "FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.",
    "examples": [
      "<FileUpload ref=\"fileupload\" mode=\"basic\" name=\"demo[]\" url=\"/api/upload\" accept=\"image/*\" :maxFileSize=\"1000000\" @upload=\"onUpload\" />\n<Button label=\"Upload\" @click=\"upload\" severity=\"secondary\" />",
      "<FileUpload mode=\"basic\" name=\"demo[]\" url=\"/api/upload\" accept=\"image/*\" :maxFileSize=\"1000000\" @upload=\"onUpload\" :auto=\"true\" chooseLabel=\"Browse\" />",
      "<FileUpload name=\"demo[]\" url=\"/api/upload\" @upload=\"onAdvancedUpload($event)\" :multiple=\"true\" accept=\"image/*\" :maxFileSize=\"1000000\">\n    <template #empty>\n        <span>Drag and drop files to here to upload.</span>\n    </template>\n</FileUpload>",
      "<FileUpload name=\"demo[]\" url=\"/api/upload\" @upload=\"onTemplatedUpload($event)\" :multiple=\"true\" accept=\"image/*\" :maxFileSize=\"1000000\" @select=\"onSelectedFiles\">\n    <template #header=\"{ chooseCallback, uploadCallback, clearCallback, files }\">\n        <div class=\"flex flex-wrap justify-between items-center flex-1 gap-4\">\n            <div class=\"flex gap-2\">\n                <Button @click=\"chooseCallback()\" icon=\"pi pi-images\" rounded variant=\"outlined\" severity=\"secondary\"></Button>\n                <Button @click=\"uploadEvent(uploadCallback)\" icon=\"pi pi-cloud-upload\" rounded variant=\"outlined\" severity=\"success\" :disabled=\"!files || files.length === 0\"></Button>\n                <Button @click=\"clearCallback()\" icon=\"pi pi-times\" rounded variant=\"outlined\" severity=\"danger\" :disabled=\"!files || files.length === 0\"></Button>\n            </div>\n            <ProgressBar :value=\"totalSizePercent\" :showValue=\"false\" class=\"md:w-20rem h-1 w-full md:ml-auto\">\n                <span class=\"whitespace-nowrap\">{{ totalSize }}B / 1Mb</span>\n            </ProgressBar>\n        </div>\n    </template>\n    <template #content=\"{ files, uploadedFiles, removeUploadedFileCallback, removeFileCallback, messages }\">\n        <div class=\"flex flex-col gap-8 pt-4\">\n            <Message v-for=\"message of messages\" :key=\"message\" :class=\"{ 'mb-8': !files.length && !uploadedFiles.length}\" severity=\"error\">\n                {{ message }}\n            </Message>\n\n            <div v-if=\"files.length > 0\">\n                <h5>Pending</h5>\n                <div class=\"flex flex-wrap gap-4\">\n                    <div v-for=\"(file, index) of files\" :key=\"file.name + file.type + file.size\" class=\"p-8 rounded-border flex flex-col border border-surface items-center gap-4\">\n                        <div>\n                            <img role=\"presentation\" :alt=\"file.name\" :src=\"file.objectURL\" width=\"100\" height=\"50\" />\n                        </div>\n                        <span class=\"font-semibold text-ellipsis max-w-60 whitespace-nowrap overflow-hidden\">{{ file.name }}</span>\n                        <div>{{ formatSize(file.size) }}</div>\n                        <Badge value=\"Pending\" severity=\"warn\" />\n                        <Button icon=\"pi pi-times\" @click=\"onRemoveTemplatingFile(file, removeFileCallback, index)\" variant=\"outlined\" rounded severity=\"danger\" />\n                    </div>\n                </div>\n            </div>\n\n            <div v-if=\"uploadedFiles.length > 0\">\n                <h5>Completed</h5>\n                <div class=\"flex flex-wrap gap-4\">\n                    <div v-for=\"(file, index) of uploadedFiles\" :key=\"file.name + file.type + file.size\" class=\"p-8 rounded-border flex flex-col border border-surface items-center gap-4\">\n                        <div>\n                            <img role=\"presentation\" :alt=\"file.name\" :src=\"file.objectURL\" width=\"100\" height=\"50\" />\n                        </div>\n                        <span class=\"font-semibold text-ellipsis max-w-60 whitespace-nowrap overflow-hidden\">{{ file.name }}</span>\n                        <div>{{ formatSize(file.size) }}</div>\n                        <Badge value=\"Completed\" class=\"mt-4\" severity=\"success\" />\n                        <Button icon=\"pi pi-times\" @click=\"removeUploadedFileCallback(index)\" variant=\"outlined\" rounded severity=\"danger\" />\n                    </div>\n                </div>\n            </div>\n        </div>\n    </template>\n    <template #empty>\n        <div class=\"flex items-center justify-center flex-col\">\n            <i class=\"pi pi-cloud-upload !border-2 !rounded-full !p-8 !text-4xl !text-muted-color\" />\n            <p class=\"mt-6 mb-0\">Drag and drop files to here to upload.</p>\n        </div>\n    </template>\n</FileUpload>",
      "<FileUpload mode=\"basic\" @select=\"onFileSelect\" customUpload auto severity=\"secondary\" class=\"p-button-outlined\" />\n<img v-if=\"src\" :src=\"src\" alt=\"Image\" class=\"shadow-md rounded-xl w-full sm:w-64\" style=\"filter: grayscale(100%)\" />"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "computed"
      ],
      "methods": [
        "data",
        "upload",
        "onBasicUploaderClick",
        "onFileSelect",
        "if",
        "for",
        "choose",
        "uploader",
        "clear",
        "onFocus",
        "onBlur",
        "isFileSelected",
        "isIE11",
        "validate",
        "isFileTypeValid",
        "getTypeClass",
        "isWildcard",
        "getFileExtension",
        "isImage",
        "onDragEnter",
        "onDragOver",
        "onDragLeave",
        "onDrop",
        "remove",
        "removeUploadedFile",
        "clearInputElement",
        "clearIEInput",
        "formatSize",
        "isFileLimitExceeded",
        "checkFileLimit",
        "onMessageClose",
        "isAdvanced",
        "isBasic",
        "chooseButtonClass",
        "basicFileChosenLabel",
        "hasFiles",
        "hasUploadedFiles",
        "chooseDisabled",
        "uploadDisabled",
        "cancelDisabled",
        "chooseButtonLabel",
        "uploadButtonLabel",
        "cancelButtonLabel",
        "completedLabel",
        "pendingLabel"
      ],
      "emits": [
        "clear"
      ]
    }
  },
  "floatlabel": {
    "title": "FloatLabel",
    "description": "FloatLabel visually integrates a label with its form element.",
    "examples": [
      "<FloatLabel>\n    <InputText id=\"username\" v-model=\"value\" />\n    <label for=\"username\">Username</label>\n</FloatLabel>",
      "<FloatLabel variant=\"in\">\n    <InputText id=\"in_label\" v-model=\"value1\" autocomplete=\"off\" />\n    <label for=\"in_label\">In Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"on\">\n    <InputText id=\"on_label\" v-model=\"value2\" autocomplete=\"off\" />\n    <label for=\"on_label\">On Label</label>\n</FloatLabel>",
      "<FloatLabel>\n    <InputText id=\"value1\" v-model=\"value1\" :invalid=\"!value1\" />\n    <label for=\"value1\">Username</label>\n</FloatLabel>\n\n<FloatLabel variant=\"in\">\n    <InputText id=\"value2\" v-model=\"value2\" :invalid=\"!value2\" />\n    <label for=\"value2\">Username</label>\n</FloatLabel>\n\n<FloatLabel variant=\"on\">\n    <InputText id=\"value3\" v-model=\"value3\" :invalid=\"!value3\" />\n    <label for=\"value3\">Username</label>\n</FloatLabel>"
    ],
    "props": {
      "dt": "DesignToken<any>",
      "pt": "PassThrough<FloatLabelPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean",
      "variant": "HintedString<'over' | 'in' | 'on'> | undefined"
    },
    "emits": {},
    "slots": {
      "default": "() => VNode[]"
    }
  },
  "fluid": {
    "title": "Fluid",
    "description": "Fluid is a layout component to make descendant components span full width of their container.",
    "examples": [
      "<div>\n    <label for=\"non-fluid\" class=\"font-bold mb-2 block\">Non-Fluid</label>\n    <InputText id=\"non-fluid\" />\n</div>\n\n<div>\n    <label for=\"fluid\" class=\"font-bold mb-2 block\">Fluid Prop</label>\n    <InputText id=\"fluid\" fluid />\n</div>\n\n<Fluid>\n    <span class=\"font-bold mb-2 block\">Fluid Container</span>\n    <div class=\"grid grid-cols-2 gap-4\">\n        <div><InputText /></div>\n        <div><InputText /></div>\n        <div class=\"col-span-full\"><InputText /></div>\n        <div><InputText :fluid=\"false\" placeholder=\"Non-Fluid\" /></div>\n    </div>\n</Fluid>"
    ],
    "props": {
      "dt": "DesignToken<any>",
      "pt": "PassThrough<FluidPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {
      "default": "() => VNode[]"
    }
  },
  "focustrap": {
    "title": "Focus Trap",
    "description": "Focus Trap keeps focus within a certain DOM element while tabbing.",
    "examples": [
      "<div v-focustrap class=\"w-full sm:w-80 flex flex-col gap-6\">\n    <IconField>\n        <InputIcon>\n            <i class=\"pi pi-user\" />\n        </InputIcon>\n        <InputText id=\"input\" v-model=\"name\" type=\"text\" placeholder=\"Name\" autofocus fluid />\n    </IconField>\n\n    <IconField>\n        <InputIcon>\n            <i class=\"pi pi-envelope\" />\n        </InputIcon>\n        <InputText id=\"email\" v-model=\"email\" type=\"email\" placeholder=\"Email\" fluid />\n    </IconField>\n\n    <div class=\"flex items-center gap-2\">\n        <Checkbox id=\"accept\" v-model=\"accept\" name=\"accept\" value=\"Accept\" />\n        <label for=\"accept\">I agree to the terms and conditions.</label>\n    </div>\n\n    <Button type=\"submit\" label=\"Submit\" class=\"mt-2\" />\n</div>"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "_typeof",
        "function",
        "ownKeys",
        "_objectSpread",
        "forEach",
        "_defineProperty",
        "_toPropertyKey",
        "_toPrimitive",
        "extend",
        "if",
        "updated",
        "unmounted",
        "getComputedSelector",
        "bind",
        "MutationObserver",
        "unbind",
        "autoFocus",
        "autoElementFocus",
        "onFirstHiddenElementFocus",
        "onLastHiddenElementFocus",
        "createHiddenFocusableElements",
        "createFocusableElement"
      ]
    }
  },
  "galleria": {
    "title": "Galleria",
    "description": "Galleria is a content gallery component.",
    "examples": [
      "<Galleria :value=\"images\" :responsiveOptions=\"responsiveOptions\" :numVisible=\"5\" containerStyle=\"max-width: 640px\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%\" />\n    </template>\n    <template #thumbnail=\"slotProps\">\n        <img :src=\"slotProps.item.thumbnailImageSrc\" :alt=\"slotProps.item.alt\" />\n    </template>\n</Galleria>",
      "<div>\n    <Button icon=\"pi pi-minus\" @click=\"prev\" />\n    <Button icon=\"pi pi-plus\" @click=\"next\" severity=\"secondary\" class=\"ml-2\" />\n</div>\n\n<Galleria v-model:activeIndex=\"activeIndex\" :value=\"images\" :responsiveOptions=\"responsiveOptions\" :numVisible=\"5\" containerStyle=\"max-width: 640px\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%\" />\n    </template>\n    <template #thumbnail=\"slotProps\">\n        <img :src=\"slotProps.item.thumbnailImageSrc\" :alt=\"slotProps.item.alt\" />\n    </template>\n</Galleria>",
      "<Galleria :value=\"images\" :numVisible=\"5\" containerStyle=\"max-width: 640px\"\n    :showThumbnails=\"false\" :showIndicators=\"true\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block\" />\n    </template>\n</Galleria>",
      "<Galleria :value=\"images\" :numVisible=\"5\" containerStyle=\"max-width: 640px\"\n    :showThumbnails=\"false\" :showIndicators=\"true\" :changeItemOnIndicatorHover=\"true\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block\" />\n    </template>\n</Galleria>",
      "<Galleria :value=\"images\" :numVisible=\"5\" containerStyle=\"max-width: 640px\" :showThumbnails=\"false\"\n    :showIndicators=\"true\" :changeItemOnIndicatorHover=\"true\" :showIndicatorsOnItem=\"inside\" :indicatorsPosition=\"position\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block\" />\n    </template>\n</Galleria>",
      "<Galleria :value=\"images\" :numVisible=\"5\" containerStyle=\"max-width: 640px\" :showThumbnails=\"false\"\n    :showIndicators=\"true\" :changeItemOnIndicatorHover=\"true\" :showIndicatorsOnItem=\"true\" indicatorsPosition=\"left\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block\" />\n    </template>\n    <template #indicator=\"{ index }\">\n        <span style=\"color: '#ffffff', cursor: pointer\">{{ index + 1 }}</span>\n    </template>\n</Galleria>",
      "<Galleria :value=\"images\" :responsiveOptions=\"responsiveOptions\" :numVisible=\"5\" :thumbnailsPosition=\"position\" containerStyle=\"max-width: 640px\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block\" />\n    </template>\n    <template #thumbnail=\"slotProps\">\n        <div class=\"grid gap-4 justify-center\">\n            <img :src=\"slotProps.item.thumbnailImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block;\" />\n        </div>\n    </template>\n</Galleria>",
      "<Galleria :value=\"images\" :responsiveOptions=\"responsiveOptions\" :numVisible=\"5\" :circular=\"true\" containerStyle=\"max-width: 640px\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block\" />\n    </template>\n    <template #thumbnail=\"slotProps\">\n        <img :src=\"slotProps.item.thumbnailImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block\" />\n    </template>\n</Galleria>",
      "<Galleria v-model:visible=\"displayBasic\" :value=\"images\" :responsiveOptions=\"responsiveOptions\" :numVisible=\"9\" containerStyle=\"max-width: 50%\" :circular=\"true\" :fullScreen=\"true\" :showItemNavigators=\"true\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block\" />\n    </template>\n    <template #thumbnail=\"slotProps\">\n        <img :src=\"slotProps.item.thumbnailImageSrc\" :alt=\"slotProps.item.alt\" style=\"display: block\" />\n    </template>\n</Galleria>\n\n<Button label=\"Show\" icon=\"pi pi-external-link\" @click=\"displayBasic = true\" />",
      "<Galleria v-model:visible=\"displayBasic\" :value=\"images\" :responsiveOptions=\"responsiveOptions\" :numVisible=\"9\" containerStyle=\"max-width: 50%\" :circular=\"true\" :fullScreen=\"true\" :showItemNavigators=\"true\"  :showThumbnails=\"false\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block\" />\n    </template>\n    <template #thumbnail=\"slotProps\">\n        <img :src=\"slotProps.item.thumbnailImageSrc\" :alt=\"slotProps.item.alt\" style=\"display: block\" />\n    </template>\n</Galleria>\n\n<Button label=\"Show\" icon=\"pi pi-external-link\" @click=\"displayBasic = true\" />",
      "<Galleria v-model:activeIndex=\"activeIndex\" v-model:visible=\"displayCustom\" :value=\"images\" :responsiveOptions=\"responsiveOptions\" :numVisible=\"7\"\n    containerStyle=\"max-width: 850px\" :circular=\"true\" :fullScreen=\"true\" :showItemNavigators=\"true\" :showThumbnails=\"false\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block\" />\n    </template>\n    <template #thumbnail=\"slotProps\">\n        <img :src=\"slotProps.item.thumbnailImageSrc\" :alt=\"slotProps.item.alt\" style=\"display: block\" />\n    </template>\n</Galleria>",
      "<Galleria :value=\"images\" :responsiveOptions=\"responsiveOptions\" :numVisible=\"5\" :circular=\"true\" containerStyle=\"max-width: 640px\"\n    :showItemNavigators=\"true\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block;\" />\n    </template>\n    <template #thumbnail=\"slotProps\">\n        <img :src=\"slotProps.item.thumbnailImageSrc\" :alt=\"slotProps.item.alt\" style=\"display: block;\" />\n    </template>\n</Galleria>",
      "<Galleria :value=\"images\" :responsiveOptions=\"responsiveOptions\" :numVisible=\"5\" :circular=\"true\" containerStyle=\"max-width: 640px\"\n    :showItemNavigators=\"true\" :showThumbnails=\"false\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block;\" />\n    </template>\n    <template #thumbnail=\"slotProps\">\n        <img :src=\"slotProps.item.thumbnailImageSrc\" :alt=\"slotProps.item.alt\" style=\"display: block;\" />\n    </template>\n</Galleria>",
      "<Galleria :value=\"images\" :responsiveOptions=\"responsiveOptions\" :numVisible=\"5\" :circular=\"true\" containerStyle=\"max-width: 640px\" :showItemNavigators=\"true\" :showItemNavigatorsOnHover=\"true\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block\" />\n    </template>\n    <template #thumbnail=\"slotProps\">\n        <img :src=\"slotProps.item.thumbnailImageSrc\" :alt=\"slotProps.item.alt\" style=\"display: block\" />\n    </template>\n</Galleria>",
      "<Galleria :value=\"images\" :responsiveOptions=\"responsiveOptions\" :numVisible=\"5\" :circular=\"true\" containerStyle=\"max-width: 640px\"\n    :showItemNavigators=\"true\" :showThumbnails=\"false\" :showItemNavigatorsOnHover=\"true\" :showIndicators=\"true\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block;\" />\n    </template>\n    <template #thumbnail=\"slotProps\">\n            <img :src=\"slotProps.item.thumbnailImageSrc\" :alt=\"slotProps.item.alt\" style=\"display: block;\" />\n    </template>\n</Galleria>",
      "<Galleria :value=\"images\" :responsiveOptions=\"responsiveOptions\" :numVisible=\"5\" containerStyle=\"max-width: 640px\"\n    :circular=\"true\" :autoPlay=\"true\" :transitionInterval=\"2000\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block\" />\n    </template>\n    <template #thumbnail=\"slotProps\">\n        <img :src=\"slotProps.item.thumbnailImageSrc\" :alt=\"slotProps.item.alt\" style=\"display: block\" />\n    </template>\n</Galleria>",
      "<Galleria :value=\"images\" :responsiveOptions=\"responsiveOptions\" :numVisible=\"5\" containerStyle=\"max-width: 640px\">\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" style=\"width: 100%; display: block\" />\n    </template>\n    <template #thumbnail=\"slotProps\">\n        <img :src=\"slotProps.item.thumbnailImageSrc\" :alt=\"slotProps.item.alt\" style=\"display: block\" />\n    </template>\n    <template #caption=\"slotProps\">\n        <div class=\"text-xl mb-2 font-bold\">{{ slotProps.item.title }}</div>\n        <p class=\"text-white\">{{ slotProps.item.alt }}</p>\n    </template>\n</Galleria>",
      "<Galleria\n    ref=\"galleria\"\n    v-model:activeIndex=\"activeIndex\"\n    :value=\"images\"\n    :numVisible=\"5\"\n    containerStyle=\"max-width: 640px\"\n    :showThumbnails=\"showThumbnails\"\n    :showItemNavigators=\"true\"\n    :showItemNavigatorsOnHover=\"true\"\n    :circular=\"true\"\n    :autoPlay=\"isAutoPlay\"\n    :transitionInterval=\"3000\"\n    :responsiveOptions=\"responsiveOptions\"\n    :pt=\"{\n        root: {\n            class: [{ 'flex flex-col': fullScreen }]\n        },\n        content: {\n            class: ['relative', { 'flex-1 justify-center': fullScreen }]\n        },\n        thumbnails: 'absolute w-full left-0 bottom-0'\n    }\"\n>\n    <template #item=\"slotProps\">\n        <img :src=\"slotProps.item.itemImageSrc\" :alt=\"slotProps.item.alt\" :style=\"[{ width: !fullScreen ? '100%' : '', display: !fullScreen ? 'block' : '' }]\" />\n    </template>\n    <template #thumbnail=\"slotProps\">\n        <div class=\"grid gap-4 justify-center\">\n            <img :src=\"slotProps.item.thumbnailImageSrc\" :alt=\"slotProps.item.alt\" style=\"display: block\" />\n        </div>\n    </template>\n    <template #footer>\n        <div class=\"flex items-stretch bg-surface-950 text-white h-10\">\n            <button type=\"button\" @click=\"onThumbnailButtonClick\" class=\"bg-transparent border-none rounded-none hover:bg-white/10 text-white inline-flex justify-center items-center cursor-pointer px-3\">\n                <i class=\"pi pi-th-large\"></i>\n            </button>\n            <button type=\"button\" @click=\"toggleAutoSlide\" class=\"bg-transparent border-none rounded-none hover:bg-white/10 text-white inline-flex justify-center items-center cursor-pointer px-3\"><i :class=\"slideButtonIcon\"></i></button>\n            <span v-if=\"images\" class=\"flex items-center gap-4 ml-3\">\n                <span class=\"text-sm\">{{ activeIndex + 1 }}/{{ images.length }}</span>\n                <span class=\"font-bold text-sm\">{{ images[activeIndex].title }}</span>\n                <span class=\"text-sm\">{{ images[activeIndex].alt }}</span>\n            </span>\n            <button type=\"button\" @click=\"toggleFullScreen\" class=\"bg-transparent border-none rounded-none hover:bg-white/10 text-white inline-flex justify-center items-center cursor-pointer px-3 ml-auto\">\n                <i :class=\"fullScreenIcon\"></i>\n            </button>\n        </div>\n    </template>\n</Galleria>"
    ],
    "props": {
      "id": "string | undefined",
      "value": "any[]",
      "activeIndex": "number | undefined",
      "fullScreen": "boolean | undefined",
      "visible": "boolean | undefined",
      "numVisible": "number | undefined",
      "responsiveOptions": "GalleriaResponsiveOptions[]",
      "showItemNavigators": "boolean | undefined",
      "showThumbnailNavigators": "boolean | undefined",
      "showItemNavigatorsOnHover": "boolean | undefined",
      "changeItemOnIndicatorHover": "boolean | undefined",
      "circular": "boolean | undefined",
      "autoPlay": "boolean | undefined",
      "transitionInterval": "number | undefined",
      "showThumbnails": "boolean | undefined",
      "thumbnailsPosition": "HintedString<'bottom' | 'top' | 'left' | 'right'> | undefined",
      "verticalThumbnailViewPortHeight": "string | undefined",
      "showIndicators": "boolean | undefined",
      "showIndicatorsOnItem": "boolean | undefined",
      "indicatorsPosition": "HintedString<'bottom' | 'top' | 'left' | 'right'> | undefined",
      "baseZIndex": "number | undefined",
      "maskClass": "string | undefined",
      "containerStyle": "any | undefined",
      "containerClass": "any | undefined",
      "containerProps": "HTMLAttributes | undefined",
      "prevButtonProps": "ButtonHTMLAttributes | undefined",
      "nextButtonProps": "ButtonHTMLAttributes | undefined",
      "ariaLabel": "string | undefined",
      "ariaRoledescription": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<GalleriaPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:activeIndex'": "void",
      "'update:visible'": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref"
      ],
      "methods": [
        "data",
        "updated",
        "beforeUnmount",
        "if",
        "onBeforeEnter",
        "onEnter",
        "onBeforeLeave",
        "onLeave",
        "onAfterLeave",
        "onActiveItemChange",
        "maskHide",
        "containerRef",
        "maskRef",
        "onKeyDown",
        "bindDocumentKeyDownListener",
        "unbindDocumentKeyDownListener",
        "bindGlobalListeners",
        "unbindGlobalListeners",
        "focus"
      ]
    }
  },
  "iconfield": {
    "title": "IconField",
    "description": "IconField wraps an input and an icon.",
    "examples": [
      "<IconField>\n    <InputIcon class=\"pi pi-search\" />\n    <InputText v-model=\"value1\" placeholder=\"Search\" />\n</IconField>\n\n<IconField>\n    <InputText v-model=\"value2\" variant=\"filled\" />\n    <InputIcon class=\"pi pi-spin pi-spinner\" />\n</IconField>",
      "<IconField>\n    <InputIcon>\n        <svg width=\"35\" height=\"40\" viewBox=\"0 0 35 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"...\" fill=\"var(--p-primary-color)\" />\n            <path d=\"...\" fill=\"var(--p-text-color)\" />\n        </svg>\n    </InputIcon>\n    <InputText v-model=\"value\" placeholder=\"Search\" />\n</IconField>",
      "<FloatLabel>\n    <IconField>\n        <InputIcon class=\"pi pi-search\" />\n        <InputText id=\"over_label\" v-model=\"value1\" autocomplete=\"off\" />\n    </IconField>\n    <label for=\"over_label\">Over Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"in\">\n    <IconField>\n        <InputIcon class=\"pi pi-search\" />\n        <InputText id=\"in_label\" v-model=\"value2\" autocomplete=\"off\" variant=\"filled\" />\n    </IconField>\n    <label for=\"in_label\">In Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"on\">\n    <IconField>\n        <InputIcon class=\"pi pi-search\" />\n        <InputText id=\"on_label\" v-model=\"value3\" autocomplete=\"off\" />\n    </IconField>\n    <label for=\"on_label\">On Label</label>\n</FloatLabel>",
      "<IftaLabel>\n    <IconField>\n        <InputIcon class=\"pi pi-user\" />\n        <InputText id=\"username\" v-model=\"value\" variant=\"filled\" />\n    </IconField>\n    <label for=\"username\">Username</label>\n</IftaLabel>",
      "<IconField>\n    <InputIcon class=\"pi pi-search\" />\n    <InputText v-model=\"value1\" placeholder=\"Small\" size=\"small\" />\n</IconField>\n\n<IconField>\n    <InputIcon class=\"pi pi-search\" />\n    <InputText v-model=\"value2\" placeholder=\"Normal\" />\n</IconField>\n\n<IconField>\n    <InputText v-model=\"value3\" placeholder=\"Large\" size=\"large\" />\n    <InputIcon class=\"pi pi-spin pi-spinner\" />\n</IconField>"
    ],
    "props": {},
    "emits": {},
    "slots": {}
  },
  "iftalabel": {
    "title": "IftaLabel",
    "description": "IftaLabel is used to create infield top aligned labels",
    "examples": [
      "<IftaLabel>\n    <InputText id=\"username\" v-model=\"value\" />\n    <label for=\"username\">Username</label>\n</IftaLabel>",
      "<IftaLabel>\n    <InputText id=\"username\" v-model=\"value\" :invalid=\"!value\" />\n    <label for=\"username\">Username</label>\n</IftaLabel>"
    ],
    "props": {},
    "emits": {},
    "slots": {}
  },
  "image": {
    "title": "Image",
    "description": "Displays a single image with preview and tranformation options.",
    "examples": [
      "<Image src=\"/image.jpg\" alt=\"Image\" width=\"250\" />",
      "<Image src=\"/image.jpg\" alt=\"Image\" width=\"250\" preview />",
      "<Image alt=\"Image\" preview>\n    <template #previewicon>\n        <i class=\"pi pi-search\"></i>\n    </template>\n    <template #image>\n        <img src=\"/thumbnail.jpg\" alt=\"image\" />\n    </template>\n    <template #preview=\"slotProps\">\n        <img src=\"/image.jpg\" alt=\"preview\" :style=\"slotProps.style\" @click=\"slotProps.onClick\" />\n    </template>\n</Image>"
    ],
    "props": {
      "src": "string | undefined",
      "preview": "boolean | undefined",
      "imageStyle": "any",
      "imageClass": "any",
      "indicatorIcon": "string | undefined",
      "previewIcon": "string | undefined",
      "zoomInDisabled": "boolean | undefined",
      "zoomOutDisabled": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ImagePassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "show": "void",
      "hide": "void",
      "error": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "computed"
      ],
      "methods": [
        "data",
        "beforeUnmount",
        "maskRef",
        "toolbarRef",
        "onImageClick",
        "onPreviewImageClick",
        "onMaskClick",
        "onMaskKeydown",
        "onError",
        "rotateRight",
        "rotateLeft",
        "zoomIn",
        "zoomOut",
        "onBeforeEnter",
        "onEnter",
        "onBeforeLeave",
        "onLeave",
        "onAfterLeave",
        "focus",
        "hidePreview",
        "containerClass",
        "rotateClass",
        "imagePreviewStyle",
        "isZoomInDisabled",
        "isZoomOutDisabled",
        "rightAriaLabel",
        "leftAriaLabel",
        "zoomInAriaLabel",
        "zoomOutAriaLabel",
        "zoomImageAriaLabel",
        "closeAriaLabel"
      ],
      "emits": [
        "error",
        "show",
        "hide"
      ]
    }
  },
  "imagecompare": {
    "title": "ImageCompare",
    "description": "Compare two images side by side with a slider.",
    "examples": [
      "<ImageCompare class=\"shadow-lg rounded-2xl\">\n    <template #left>\n        <img src=\"~/assets/images/island1.jpg\" />\n    </template>\n    <template #right>\n        <img src=\"~/assets/images/island2.jpg\" />\n    </template>\n</ImageCompare>",
      "<ImageCompare class=\"sm:!w-96 shadow-lg rounded-2xl\">\n    <template #left>\n        <img src=\"~/assets/images/island1.jpg\" />\n    </template>\n    <template #right>\n        <img src=\"~/assets/images/island2.jpg\" />\n    </template>\n</ImageCompare>",
      "<span id=\"image_label\">Compare Images</span>\n<ImageCompare class=\"shadow-lg rounded-2xl\" aria-labelledby=\"image-label\">\n    ...\n</ImageCompare>\n\n<ImageCompare class=\"shadow-lg rounded-2xl\" aria-label=\"Compare Images\">\n    ...\n</ImageCompare>"
    ],
    "props": {
      "tabindex": "number | undefined",
      "ariaLabel": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ImageComparePassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "onSlide"
      ]
    }
  },
  "inlinemessage": {
    "props": {
      "severity": "HintedString<'success' | 'info' | 'warn' | 'error' | 'secondary' | 'contrast'> | undefined",
      "icon": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<InlineMessagePassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "iconComponent"
      ]
    }
  },
  "inplace": {
    "title": "Inplace",
    "description": "Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.",
    "examples": [
      "<Inplace>\n    <template #display> View Content </template>\n    <template #content>\n        <p class=\"m-0\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </p>\n    </template>\n</Inplace>",
      "<Inplace>\n    <template #display>\n        {{ text || 'Click to Edit' }}\n    </template>\n    <template #content=\"{ closeCallback }\">\n        <span class=\"inline-flex items-center gap-2\">\n            <InputText v-model=\"text\" autofocus />\n            <Button icon=\"pi pi-times\" text severity=\"danger\" @click=\"closeCallback\" />\n        </span>\n    </template>\n</Inplace>",
      "<Inplace>\n    <template #display>\n        <span class=\"inline-flex items-center gap-2\">\n            <span class=\"pi pi-image\"></span>\n            <span>View Photo</span>\n        </span>\n    </template>\n    <template #content>\n        <img class=\"w-full sm:w-80 shadow-md\" alt=\"Nature\" src=\"https://primefaces.org/cdn/primevue/images/nature/nature8.jpg\" />\n    </template>\n</Inplace>",
      "<Inplace @open=\"loadData\">\n    <template #display> View Data </template>\n    <template #content>\n        <DataTable :value=\"products\">\n            <Column field=\"code\" header=\"Code\"></Column>\n            <Column field=\"name\" header=\"Name\"></Column>\n            <Column field=\"category\" header=\"Category\"></Column>\n            <Column field=\"quantity\" header=\"Quantity\"></Column>\n        </DataTable>\n    </template>\n</Inplace>"
    ],
    "props": {
      "active": "boolean | undefined",
      "disabled": "boolean | undefined",
      "displayProps": "HTMLAttributes | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<InplacePassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:active'": "void",
      "open": "void",
      "close": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch"
      ],
      "methods": [
        "data",
        "active",
        "open",
        "close"
      ]
    }
  },
  "inputchips": {
    "props": {
      "modelValue": "any[]",
      "max": "number | undefined",
      "addOnBlur": "boolean | undefined",
      "allowDuplicate": "boolean | undefined",
      "separator": "string | any",
      "inputId": "string | undefined",
      "inputClass": "string | object | undefined",
      "inputStyle": "object | undefined",
      "inputProps": "InputHTMLAttributes | undefined",
      "removeTokenIcon": "string | undefined",
      "chipIcon": "string | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "variant": "HintedString<'outlined' | 'filled'> | undefined",
      "placeholder": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "ariaLabel": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<InputChipsPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "add": "void",
      "remove": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "onWrapperClick",
        "onInput",
        "onFocus",
        "onBlur",
        "onKeyDown",
        "if",
        "onPaste",
        "onContainerFocus",
        "onContainerBlur",
        "onContainerKeyDown",
        "onArrowLeftKeyOn",
        "onArrowRightKeyOn",
        "onBackspaceKeyOn",
        "updateModel",
        "addItem",
        "removeItem",
        "maxedOut",
        "focusedOptionId"
      ]
    }
  },
  "inputgroup": {
    "title": "InputGroup",
    "description": "Text, icon, buttons and other content can be grouped next to an input.",
    "examples": [
      "<InputGroup>\n    <InputGroupAddon>\n        <i class=\"pi pi-user\"></i>\n    </InputGroupAddon>\n    <InputText v-model=\"text1\" placeholder=\"Username\" />\n</InputGroup>\n\n<InputGroup>\n    <InputGroupAddon>$</InputGroupAddon>\n    <InputNumber v-model=\"number\" placeholder=\"Price\" />\n    <InputGroupAddon>.00</InputGroupAddon>\n</InputGroup>\n\n<InputGroup>\n    <InputGroupAddon>www</InputGroupAddon>\n    <InputText v-model=\"text2\" placeholder=\"Website\" />\n</InputGroup>\n\n<InputGroup>\n    <InputGroupAddon>\n        <i class=\"pi pi-map\"></i>\n    </InputGroupAddon>\n    <Select v-model=\"selectedCity\" :options=\"cities\" optionLabel=\"name\" placeholder=\"City\" />\n</InputGroup>",
      "<InputGroup class=\"sm:!w-96\">\n    <InputGroupAddon>\n        <i class=\"pi pi-clock\"></i>\n    </InputGroupAddon>\n    <InputGroupAddon>\n        <i class=\"pi pi-star-fill\"></i>\n    </InputGroupAddon>\n    <InputNumber placeholder=\"Price\" />\n    <InputGroupAddon>$</InputGroupAddon>\n    <InputGroupAddon>.00</InputGroupAddon>\n</InputGroup>",
      "<InputGroup>\n    <Button label=\"Search\" />\n    <InputText placeholder=\"Keyword\" />\n</InputGroup>\n\n<InputGroup>\n    <InputText placeholder=\"Keyword\" />\n    <InputGroupAddon>\n        <Button icon=\"pi pi-search\" severity=\"secondary\" variant=\"text\" @click=\"toggle\" />\n    </InputGroupAddon>\n</InputGroup>\n<Menu ref=\"menu\" :model=\"items\" popup class=\"!min-w-fit\" />\n\n<InputGroup>\n    <InputGroupAddon>\n        <Button icon=\"pi pi-check\" severity=\"secondary\" />\n    </InputGroupAddon>\n    <InputText placeholder=\"Vote\" />\n    <InputGroupAddon>\n        <Button icon=\"pi pi-times\" severity=\"secondary\" />\n    </InputGroupAddon>\n</InputGroup>",
      "<InputGroup>\n    <InputText placeholder=\"Price\" />\n    <InputGroupAddon>\n        <RadioButton v-model=\"radioValue1\" name=\"rb1\" value=\"rb1\" />\n    </InputGroupAddon>\n</InputGroup>\n\n<InputGroup>\n    <InputGroupAddon>\n        <Checkbox v-model=\"checked1\" :binary=\"true\" />\n    </InputGroupAddon>\n    <InputText placeholder=\"Username\" />\n</InputGroup>\n\n<InputGroup>\n    <InputGroupAddon>\n        <Checkbox v-model=\"checked2\" :binary=\"true\" />\n    </InputGroupAddon>\n    <InputText placeholder=\"Website\" />\n    <InputGroupAddon>\n        <RadioButton v-model=\"radioValue2\" name=\"rb2\" value=\"rb2\" />\n    </InputGroupAddon>\n</InputGroup>",
      "<InputGroup>\n    <InputGroupAddon>\n        <i class=\"pi pi-user\"></i>\n    </InputGroupAddon>\n    <FloatLabel>\n        <InputText id=\"over_label\" v-model=\"value1\" />\n        <label for=\"over_label\">Over Label</label>\n    </FloatLabel>\n</InputGroup>\n\n<InputGroup>\n    <InputGroupAddon>$</InputGroupAddon>\n    <FloatLabel variant=\"in\">\n        <InputText id=\"in_label\" v-model=\"value2\" />\n        <label for=\"in_label\">In Label</label>\n    </FloatLabel>\n    <InputGroupAddon>.00</InputGroupAddon>\n</InputGroup>\n\n<InputGroup>\n    <InputGroupAddon>www</InputGroupAddon>\n    <FloatLabel variant=\"on\">\n        <InputText id=\"on_label\" v-model=\"value3\" />\n        <label for=\"on_label\">On Label</label>\n    </FloatLabel>\n</InputGroup>",
      "<InputGroup class=\"md:w-80\">\n    <InputGroupAddon>\n        <i class=\"pi pi-shopping-cart\"></i>\n    </InputGroupAddon>\n    <IftaLabel>\n        <InputNumber v-model=\"value\" inputId=\"price\" mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\n        <label for=\"price\">Price</label>\n    </IftaLabel>\n</InputGroup>"
    ],
    "props": {
      "dt": "DesignToken<any>",
      "pt": "PassThrough<InputGroupPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {}
  },
  "inputgroupaddon": {
    "props": {
      "dt": "DesignToken<any>",
      "pt": "PassThrough<InputGroupAddonPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {}
  },
  "inputicon": {
    "props": {
      "dt": "DesignToken<any>",
      "pt": "PassThrough<InputIconPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "containerClass"
      ]
    }
  },
  "inputmask": {
    "title": "InputMask",
    "description": "InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.",
    "examples": [
      "<InputMask id=\"basic\" v-model=\"value\" mask=\"99-999999\" placeholder=\"99-999999\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4 w-full sm:w-56\">\n    <div class=\"flex flex-col gap-1\">\n        <InputMask name=\"serialNumber\" mask=\"99-999999\" placeholder=\"99-999999\" fluid />\n        <Message v-if=\"$form.serialNumber?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.serialNumber.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<div class=\"flex-auto\">\n    <label for=\"ssn\" class=\"font-bold block mb-2\">SSN</label>\n    <InputMask id=\"ssn\" v-model=\"value1\" mask=\"999-99-9999\" placeholder=\"999-99-9999\" fluid />\n</div>\n\n<div class=\"flex-auto\">\n    <label for=\"phone\" class=\"font-bold block mb-2\">Phone</label>\n    <InputMask id=\"phone\" v-model=\"value2\" mask=\"(999) 999-9999\" placeholder=\"(999) 999-9999\" fluid />\n</div>\n\n<div class=\"flex-auto\">\n    <label for=\"serial\" class=\"font-bold block mb-2\">Serial</label>\n    <InputMask id=\"serial\" v-model=\"value3\" mask=\"a*-999-a999\" placeholder=\"a*-999-a999\" fluid />\n</div>",
      "<InputMask v-model=\"value\" mask=\"(999) 999-9999? x99999\" placeholder=\"(999) 999-9999? x99999\" />",
      "<InputMask id=\"basic\" v-model=\"value\" placeholder=\"99/99/9999\" mask=\"99/99/9999\" slotChar=\"mm/dd/yyyy\" />",
      "<FloatLabel>\n    <InputMask id=\"over_label\" v-model=\"value1\" mask=\"999-99-9999\" />\n    <label for=\"over_label\">Over Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"in\">\n    <InputMask id=\"in_label\" v-model=\"value2\" mask=\"999-99-9999\" variant=\"filled\" />\n    <label for=\"in_label\">In Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"on\">\n    <InputMask id=\"on_label\" v-model=\"value3\" mask=\"999-99-9999\" />\n    <label for=\"on_label\">On Label</label>\n</FloatLabel>",
      "<IftaLabel>\n    <InputMask id=\"ssn\" v-model=\"value\" mask=\"999-99-9999\" variant=\"filled\" />\n    <label for=\"ssn\">SSN</label>\n</IftaLabel>",
      "<InputMask v-model=\"value1\" placeholder=\"Small\" size=\"small\" mask=\"99-999999\" />\n<InputMask v-model=\"value2\" placeholder=\"Normal\" mask=\"99-999999\" />\n<InputMask v-model=\"value3\" placeholder=\"Large\" size=\"large\" mask=\"99-999999\" />",
      "<InputMask v-model=\"value\" fluid mask=\"99-999999\" placeholder=\"99-999999\" />",
      "<InputMask id=\"basic\" v-model=\"value\" variant=\"filled\" mask=\"99-999999\" placeholder=\"99-999999\" />",
      "<InputMask mask=\"99-999999\" placeholder=\"Disabled\" disabled />",
      "<InputMask v-model=\"value1\" mask=\"99-999999\" placeholder=\"Serial Key\" :invalid=\"!value1\" />\n<InputMask v-model=\"value2\" mask=\"99-999999\" placeholder=\"Serial Key\" :invalid=\"!value2\" variant=\"filled\" />",
      "<label for=\"date\">Date</label>\n<InputMask id=\"date\" />\n\n<span id=\"phone\">Phone</span>\n<InputMask aria-labelledby=\"phone\" />\n\n<InputMask aria-label=\"Age\" />"
    ],
    "props": {
      "modelValue": "string | undefined | null",
      "defaultValue": "string | undefined | null",
      "slotChar": "string | undefined",
      "mask": "string | undefined",
      "id": "string | undefined",
      "class": "string | object | undefined",
      "placeholder": "string | undefined",
      "autoClear": "boolean | undefined",
      "unmask": "boolean | undefined",
      "readonly": "boolean | undefined",
      "invalid": "boolean | undefined",
      "name": "string | undefined",
      "size": "HintedString<'small' | 'large'> | undefined",
      "variant": "HintedString<'outlined' | 'filled'> | undefined | null",
      "fluid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<InputMaskPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "focus": "void",
      "blur": "void",
      "keydown": "void",
      "keypress": "(event: Event) => void",
      "paste": "(event: Event) => void",
      "complete": "(event: Event) => void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "mask",
        "disabled",
        "mounted",
        "updated",
        "onInput",
        "onFocus",
        "if",
        "onBlur",
        "onKeyDown",
        "onKeyPress",
        "onPaste",
        "caret",
        "isCompleted",
        "getPlaceholder",
        "seekNext",
        "seekPrev",
        "shiftL",
        "shiftR",
        "handleAndroidInput",
        "clearBuffer",
        "writeBuffer",
        "checkVal",
        "handleInputChange",
        "getUnmaskedValue",
        "unmaskValue",
        "updateModelValue",
        "updateValue",
        "initMask",
        "for",
        "isValueUpdated",
        "inputClass",
        "rootPTOptions",
        "ptmParams"
      ]
    }
  },
  "inputnumber": {
    "title": "InputNumber",
    "description": "InputNumber is an input component to provide numerical input.",
    "examples": [
      "<InputNumber v-model=\"value1\" inputId=\"integeronly\" fluid />\n<InputNumber v-model=\"value2\" inputId=\"withoutgrouping\" :useGrouping=\"false\" fluid />\n<InputNumber v-model=\"value3\" inputId=\"minmaxfraction\" :minFractionDigits=\"2\" :maxFractionDigits=\"5\" fluid />\n<InputNumber v-model=\"value4\" inputId=\"minmax\" :min=\"0\" :max=\"100\" fluid />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4 w-full sm:w-56\">\n    <div class=\"flex flex-col gap-1\">\n        <InputNumber name=\"amount\" fluid />\n        <Message v-if=\"$form.amount?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.amount.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<InputNumber v-model=\"value1\" inputId=\"locale-user\" :minFractionDigits=\"2\" fluid />\n<InputNumber v-model=\"value2\" inputId=\"locale-us\" locale=\"en-US\" :minFractionDigits=\"2\" fluid />\n<InputNumber v-model=\"value3\" inputId=\"locale-german\" locale=\"de-DE\" :minFractionDigits=\"2\" fluid />\n<InputNumber v-model=\"value4\" inputId=\"locale-indian\" locale=\"en-IN\" :minFractionDigits=\"2\" fluid />",
      "<InputNumber v-model=\"value1\" inputId=\"currency-us\" mode=\"currency\" currency=\"USD\" locale=\"en-US\" fluid />\n<InputNumber v-model=\"value2\" inputId=\"currency-germany\" mode=\"currency\" currency=\"EUR\" locale=\"de-DE\" />\n<InputNumber v-model=\"value3\" inputId=\"currency-india\" mode=\"currency\" currency=\"INR\" currencyDisplay=\"code\" locale=\"en-IN\" fluid />\n<InputNumber v-model=\"value4\" inputId=\"currency-japan\" mode=\"currency\" currency=\"JPY\" locale=\"jp-JP\" fluid />",
      "<InputNumber v-model=\"value1\" inputId=\"mile\" suffix=\" mi\" fluid />\n<InputNumber v-model=\"value2\" inputId=\"percent\" prefix=\"%\" fluid />\n<InputNumber v-model=\"value3\" inputId=\"expiry\" prefix=\"Expires in \" suffix=\" days\" fluid />\n<InputNumber v-model=\"value4\" inputId=\"temperature\" prefix=\"&uarr; \" suffix=\"℃\" :min=\"0\" :max=\"40\" fluid />",
      "<InputNumber v-model=\"value1\" inputId=\"stacked-buttons\" showButtons mode=\"currency\" currency=\"USD\" fluid />\n<InputNumber v-model=\"value2\" inputId=\"minmax-buttons\" mode=\"decimal\" showButtons :min=\"0\" :max=\"100\" fluid />\n<InputNumber v-model=\"value3\" inputId=\"horizontal-buttons\" showButtons buttonLayout=\"horizontal\" :step=\"0.25\" mode=\"currency\" currency=\"EUR\" fluid>\n    <template #incrementbuttonicon>\n        <span class=\"pi pi-plus\" />\n    </template>\n    <template #decrementbuttonicon>\n        <span class=\"pi pi-minus\" />\n    </template>\n</InputNumber>",
      "<InputNumber v-model=\"value\" showButtons buttonLayout=\"vertical\" style=\"width: 3rem\" :min=\"0\" :max=\"99\">\n    <template #incrementbuttonicon>\n        <span class=\"pi pi-plus\" />\n    </template>\n    <template #decrementbuttonicon>\n        <span class=\"pi pi-minus\" />\n    </template>\n</InputNumber>",
      "<FloatLabel>\n    <InputNumber v-model=\"value1\" inputId=\"over_label\" mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\n    <label for=\"over_label\">Over Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"in\">\n    <InputNumber v-model=\"value2\" inputId=\"in_label\" mode=\"currency\" currency=\"USD\" locale=\"en-US\" variant=\"filled\" />\n    <label for=\"in_label\">In Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"on\">\n    <InputNumber v-model=\"value3\" inputId=\"on_label\" mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\n    <label for=\"on_label\">On Label</label>\n</FloatLabel>",
      "<IftaLabel>\n    <InputNumber v-model=\"value\" inputId=\"price_input\" mode=\"currency\" currency=\"USD\" locale=\"en-US\" variant=\"filled\" />\n    <label for=\"price_input\">Price</label>\n</IftaLabel>",
      "<InputNumber v-model=\"value\" showClear />",
      "<InputNumber v-model=\"value1\" size=\"small\" placeholder=\"Small\" mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\n<InputNumber v-model=\"value2\" placeholder=\"Normal\" mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\n<InputNumber v-model=\"value3\" size=\"large\" placeholder=\"Large\" mode=\"currency\" currency=\"USD\" locale=\"en-US\" />",
      "<InputNumber v-model=\"value\" fluid mode=\"currency\" currency=\"USD\" locale=\"en-US\" />",
      "<InputNumber v-model=\"value\" variant=\"filled\" />",
      "<InputNumber v-model=\"value\" disabled prefix=\"%\" />",
      "<InputNumber v-model=\"value1\" :invalid=\"value1 === null\" mode=\"decimal\" :minFractionDigits=\"2\" placeholder=\"Amount\" />\n<InputNumber v-model=\"value2\" :invalid=\"value2 === null\" mode=\"decimal\" :minFractionDigits=\"2\" variant=\"filled\" placeholder=\"Amount\" />",
      "<label for=\"price\">Price</label>\n<InputNumber inputId=\"price\" />\n\n<span id=\"label_number\">Number</span>\n<InputNumber aria-labelledby=\"label_number\" />\n\n<InputNumber aria-label=\"Number\" />"
    ],
    "props": {
      "modelValue": "Nullable<number>",
      "defaultValue": "Nullable<number>",
      "name": "string | undefined",
      "format": "boolean | undefined",
      "showButtons": "boolean | undefined",
      "buttonLayout": "HintedString<'stacked' | 'horizontal' | 'vertical'> | undefined",
      "incrementButtonClass": "string | undefined",
      "decrementButtonClass": "string | undefined",
      "incrementButtonIcon": "string | undefined",
      "incrementIcon": "string | undefined",
      "decrementButtonIcon": "string | undefined",
      "decrementIcon": "string | undefined",
      "locale": "string | undefined",
      "localeMatcher": "HintedString<'lookup' | 'best fit'> | undefined",
      "mode": "HintedString<'decimal' | 'currency'> | undefined",
      "prefix": "string | undefined",
      "suffix": "string | undefined",
      "currency": "string | undefined",
      "currencyDisplay": "string | undefined",
      "useGrouping": "boolean | undefined",
      "minFractionDigits": "number | undefined",
      "maxFractionDigits": "number | undefined",
      "roundingMode": "RoundingMode",
      "min": "number | undefined",
      "max": "number | undefined",
      "step": "number | undefined",
      "allowEmpty": "boolean | undefined",
      "highlightOnFocus": "boolean | undefined",
      "showClear": "boolean | undefined",
      "size": "HintedString<'small' | 'large'> | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "variant": "HintedString<'outlined' | 'filled'> | undefined | null",
      "readonly": "boolean | undefined",
      "placeholder": "string | undefined",
      "fluid": "boolean | undefined",
      "inputId": "string | undefined",
      "inputClass": "string | object | undefined",
      "inputStyle": "object | undefined",
      "ariaLabelledby": "string | undefined",
      "ariaLabel": "string | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<InputNumberPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "input": "void",
      "focus": "void",
      "blur": "void"
    },
    "slots": {},
    "logic": {
      "composables": [
        "useGrouping",
        "useDown",
        "useUp",
        "useLeave"
      ],
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "handler",
        "locale",
        "localeMatcher",
        "mode",
        "currency",
        "currencyDisplay",
        "useGrouping",
        "minFractionDigits",
        "maxFractionDigits",
        "suffix",
        "prefix",
        "created",
        "mounted",
        "getOptions",
        "constructParser",
        "updateConstructParser",
        "escapeRegExp",
        "getDecimalExpression",
        "getGroupingExpression",
        "getMinusSignExpression",
        "getCurrencyExpression",
        "getPrefixExpression",
        "getSuffixExpression",
        "formatValue",
        "if",
        "parseValue",
        "repeat",
        "addWithPrecision",
        "spin",
        "onUpButtonMouseDown",
        "onUpButtonMouseUp",
        "onUpButtonMouseLeave",
        "onUpButtonKeyUp",
        "onUpButtonKeyDown",
        "onDownButtonMouseDown",
        "onDownButtonMouseUp",
        "onDownButtonMouseLeave",
        "onDownButtonKeyUp",
        "onDownButtonKeyDown",
        "onUserInput",
        "onInputKeyDown",
        "switch",
        "onInputKeyPress",
        "onPaste",
        "onClearClick",
        "allowMinusSign",
        "isMinusSign",
        "isDecimalSign",
        "isDecimalMode",
        "getDecimalCharIndexes",
        "getCharIndexes",
        "insert",
        "insertText",
        "deleteRange",
        "initCursor",
        "while",
        "onInputClick",
        "isNumeralChar",
        "resetRegex",
        "updateValue",
        "handleOnInput",
        "isValueChanged",
        "validateValue",
        "updateInput",
        "concatValues",
        "getDecimalLength",
        "updateModel",
        "onInputFocus",
        "onInputBlur",
        "clearTimer",
        "maxBoundry",
        "minBoundry",
        "upButtonListeners",
        "downButtonListeners",
        "formattedValue",
        "getFormatter",
        "dataP"
      ]
    }
  },
  "inputotp": {
    "title": "InputOtp",
    "description": "Input Otp is used to enter one time passwords.",
    "examples": [
      "<InputOtp v-model=\"value\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4\">\n    <div class=\"flex flex-col gap-1\">\n        <InputOtp name=\"passcode\" />\n        <Message v-if=\"$form.passcode?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.passcode.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<InputOtp v-model=\"value\" mask />",
      "<InputOtp v-model=\"value\" integerOnly />",
      "<InputOtp v-model=\"value\" variant=\"filled\" />",
      "<InputOtp v-model=\"value1\" size=\"small\" />\n<InputOtp v-model=\"value2\" />\n<InputOtp v-model=\"value3\" size=\"large\" />",
      "<InputOtp v-model=\"value\">\n    <template #default=\"{ attrs, events }\">\n        <input type=\"text\" v-bind=\"attrs\" v-on=\"events\" class=\"custom-otp-input\" />\n    </template>\n</InputOtp>",
      "<div class=\"flex flex-col items-center\">\n    <div class=\"font-bold text-xl mb-2\">Authenticate Your Account</div>\n    <p class=\"text-surface-500 dark:text-surface-400 block mb-8\">Please enter the code sent to your phone.</p>\n    <InputOtp v-model=\"value\" :length=\"6\" style=\"gap: 0\">\n        <template #default=\"{ attrs, events, index }\">\n            <input type=\"text\" v-bind=\"attrs\" v-on=\"events\" class=\"custom-otp-input\" />\n            <div v-if=\"index === 3\" class=\"px-4\">\n                <i class=\"pi pi-minus\" />\n            </div>\n        </template>\n    </InputOtp>\n    <div class=\"flex justify-between mt-8 self-stretch\">\n        <Button label=\"Resend Code\" link class=\"p-0\"></Button>\n        <Button label=\"Submit Code\"></Button>\n    </div>\n</div>"
    ],
    "props": {
      "modelValue": "boolean | string | undefined",
      "defaultValue": "boolean | string | undefined",
      "name": "string | undefined",
      "size": "HintedString<'small' | 'large'> | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "readonly": "boolean | undefined",
      "variant": "HintedString<'outlined' | 'filled'> | undefined | null",
      "tabindex": "number | undefined",
      "length": "number | undefined",
      "mask": "boolean | undefined",
      "integerOnly": "boolean | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<InputOtpPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "change": "void",
      "focus": "void",
      "blur": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "handler",
        "getTemplateAttrs",
        "getTemplateEvents",
        "onInput",
        "updateModel",
        "moveToPrev",
        "moveToNext",
        "findNextInput",
        "findPrevInput",
        "onFocus",
        "onBlur",
        "onClick",
        "onKeyDown",
        "switch",
        "onPaste",
        "inputMode",
        "inputType"
      ]
    }
  },
  "inputswitch": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "mounted"
      ]
    }
  },
  "inputtext": {
    "title": "InputText",
    "description": "InputText is an extension to standard input element with theming.",
    "examples": [
      "<InputText type=\"text\" v-model=\"value\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex justify-center flex-col gap-4\">\n    <div class=\"flex flex-col gap-1\">\n        <InputText name=\"username\" type=\"text\" placeholder=\"Username\" />\n        <Message v-if=\"$form.username?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.username.error?.message }}</Message>\n    </div>\n    <div class=\"flex flex-col gap-1\">\n        <InputText name=\"email\" type=\"text\" placeholder=\"Email\" />\n        <Message v-if=\"$form.email?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.email.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<FloatLabel>\n    <InputText id=\"over_label\" v-model=\"value1\" />\n    <label for=\"over_label\">Over Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"in\">\n    <InputText id=\"in_label\" v-model=\"value2\" variant=\"filled\" />\n    <label for=\"in_label\">In Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"on\">\n    <InputText id=\"on_label\" v-model=\"value3\" />\n    <label for=\"on_label\">On Label</label>\n</FloatLabel>",
      "<IftaLabel>\n    <InputText id=\"username\" v-model=\"value\" variant=\"filled\" />\n    <label for=\"username\">Username</label>\n</IftaLabel>",
      "<InputText v-model=\"value1\" type=\"text\" size=\"small\" placeholder=\"Small\" />\n<InputText v-model=\"value2\" type=\"text\" placeholder=\"Normal\" />\n<InputText v-model=\"value3\" type=\"text\" size=\"large\" placeholder=\"Large\" />",
      "<InputText type=\"text\" v-model=\"value\" fluid />",
      "<div class=\"flex flex-col gap-2\">\n    <label for=\"username\">Username</label>\n    <InputText id=\"username\" v-model=\"value\" aria-describedby=\"username-help\" />\n    <Message size=\"small\" severity=\"secondary\" variant=\"simple\">Enter your username to reset your password.</Message>\n</div>",
      "<InputText type=\"text\" v-model=\"value\" variant=\"filled\" />",
      "<InputText v-model=\"value\" disabled placeholder=\"Disabled\" />",
      "<InputText v-model=\"value1\" :invalid=\"!value1\" placeholder=\"Name\" />\n<InputText v-model=\"value2\" :invalid=\"!value2\" variant=\"filled\" placeholder=\"Name\" />",
      "<label for=\"firstname\">Firstname</label>\n<InputText id=\"firstname\" />\n\n<span id=\"lastname\">Lastname</span>\n<InputText aria-labelledby=\"lastname\" />\n\n<InputText aria-label=\"Age\"/>"
    ],
    "props": {
      "modelValue": "Nullable<string>",
      "defaultValue": "Nullable<string>",
      "name": "string | undefined",
      "size": "HintedString<'small' | 'large'> | undefined | null",
      "invalid": "boolean | undefined | null",
      "variant": "HintedString<'outlined' | 'filled'> | undefined | null",
      "fluid": "boolean | undefined | null",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<InputTextPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "onInput",
        "attrs",
        "dataP"
      ]
    }
  },
  "keyfilter": {
    "title": "KeyFilter",
    "description": "A keyfilter is a directive used to block individual keystrokes based on a pattern.",
    "examples": [
      "<InputText v-keyfilter.int />\n<InputText v-keyfilter.num />\n<InputText v-keyfilter.money />\n<InputText v-keyfilter.hex />\n<InputText v-keyfilter.alpha />\n<InputText v-keyfilter.alphanum />",
      "<InputText v-model=\"spacekey\" v-keyfilter=\"/[^s]/\" />\n<InputText v-model=\"chars\" v-keyfilter=\"/^[^<>*!]+$/\" />",
      "<InputText v-model=\"text\" v-keyfilter=\"{ pattern: /^[+]?(d{1,12})?$/, validateOnly: true }\" />"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "extend",
        "updated",
        "unmounted",
        "getTarget",
        "getModifiers",
        "getRegex",
        "bindEvents",
        "function",
        "unbindEvents",
        "onInput",
        "onKeydown",
        "if",
        "onPaste",
        "for"
      ]
    }
  },
  "knob": {
    "title": "Knob",
    "description": "Knob is a form component to define number inputs with a dial.",
    "examples": [
      "<Knob v-model=\"value\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4\">\n    <div class=\"flex flex-col items-center gap-1\">\n        <Knob name=\"knob\" />\n        <Message v-if=\"$form.knob?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.knob.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<Knob v-model=\"value\" :min=\"-50\" :max=\"50\" />",
      "<Knob v-model=\"value5\" :step=\"10\" />",
      "<Knob v-model=\"value\" valueTemplate=\"{value}%\" />",
      "<Knob v-model=\"value\" :strokeWidth=\"5\" />",
      "<Knob v-model=\"value\" :size=\"200\" />",
      "<Knob v-model=\"value\" valueColor=\"SlateGray\" rangeColor=\"MediumTurquoise\" />",
      "<Knob v-model=\"value\" :size=\"150\" readonly />\n<div class=\"flex gap-2\">\n    <Button icon=\"pi pi-plus\" @click=\"value++\" :disabled=\"value >= 100\" />\n    <Button icon=\"pi pi-minus\" @click=\"value--\" :disabled=\"value <= 0\" />\n</div>",
      "<Knob v-model=\"value\" readonly />",
      "<Knob v-model=\"value\" disabled />",
      "<span id=\"label_number\">Number</span>\n<Knob aria-labelledby=\"label_number\" />\n\n<Knob aria-label=\"Number\" />"
    ],
    "props": {
      "modelValue": "number | undefined",
      "defaultValue": "any",
      "name": "string | undefined",
      "size": "number | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "readonly": "boolean | undefined",
      "step": "number | undefined",
      "min": "number | undefined",
      "max": "number | undefined",
      "valueColor": "string | undefined",
      "rangeColor": "string | undefined",
      "textColor": "string | undefined",
      "strokeWidth": "number | undefined",
      "showValue": "boolean | undefined",
      "valueTemplate": "((val: number) => string) | string | undefined",
      "tabindex": "number | undefined",
      "ariaLabelledby": "string | undefined",
      "ariaLabel": "string | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<KnobPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "change": "void"
    },
    "slots": {},
    "logic": {
      "composables": [
        "useDown",
        "useUp",
        "useMove"
      ],
      "vueImports": [
        "computed"
      ],
      "methods": [
        "data",
        "updateValueByOffset",
        "updateModel",
        "updateModelValue",
        "mapRange",
        "onClick",
        "onBlur",
        "onMouseDown",
        "onMouseUp",
        "onTouchStart",
        "onTouchEnd",
        "onMouseMove",
        "onTouchMove",
        "onKeyDown",
        "rangePath",
        "valuePath",
        "zeroRadians",
        "valueRadians",
        "minX",
        "minY",
        "maxX",
        "maxY",
        "zeroX",
        "zeroY",
        "valueX",
        "valueY",
        "largeArc",
        "sweep",
        "valueToDisplay"
      ]
    }
  },
  "listbox": {
    "title": "Listbox",
    "description": "Listbox is used to select one or more values from a list of items.",
    "examples": [
      "<Listbox v-model=\"selectedCity\" :options=\"cities\" optionLabel=\"name\" class=\"w-full md:w-56\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4 w-full sm:w-56\">\n    <div class=\"flex flex-col gap-1\">\n        <Listbox name=\"city\" :options=\"cities\" optionLabel=\"name\" fluid />\n        <Message v-if=\"$form.city?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.city.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<Listbox v-model=\"selectedCity\" :options=\"cities\" optionLabel=\"name\" checkmark :highlightOnSelect=\"false\" class=\"w-full md:w-56\" />",
      "<Listbox v-model=\"selectedCity\" :options=\"cities\" multiple optionLabel=\"name\" class=\"w-full md:w-56\" />",
      "<Listbox v-model=\"selectedCity\" :options=\"groupedCities\" optionLabel=\"label\" optionGroupLabel=\"label\" optionGroupChildren=\"items\" class=\"w-full md:w-56\" listStyle=\"max-height:250px\">\n    <template #optiongroup=\"slotProps\">\n        <div class=\"flex items-center\">\n            <img :alt=\"slotProps.option.name\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`flag flag-${slotProps.option.code.toLowerCase()} mr-2`\" style=\"width: 18px\" />\n            <div>{{ slotProps.option.label }}</div>\n        </div>\n    </template>\n</Listbox>",
      "<Listbox v-model=\"selectedCity\" :options=\"cities\" filter optionLabel=\"name\" class=\"w-full md:w-56\" />",
      "<Listbox v-model=\"selectedCountry\" :options=\"countries\" optionLabel=\"name\" class=\"w-full md:w-56\" listStyle=\"max-height:250px\">\n    <template #option=\"slotProps\">\n        <div class=\"flex items-center\">\n            <img :alt=\"slotProps.option.name\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`flag flag-${slotProps.option.code.toLowerCase()} mr-2`\" style=\"width: 18px\" />\n            <div>{{ slotProps.option.name }}</div>\n        </div>\n    </template>\n</Listbox>",
      "<Listbox v-model=\"selectedItem\" :options=\"items\" optionLabel=\"label\" optionValue=\"value\"\n    :virtualScrollerOptions=\"{ itemSize: 38 }\" class=\"w-full md:w-56\" listStyle=\"height:250px\" striped />",
      "<Listbox v-model=\"selectedCity\" :options=\"cities\" optionLabel=\"name\" :invalid=\"selectedCity === null\"  class=\"w-full md:w-56\" />",
      "<Listbox v-model=\"selectedCity\" disabled :options=\"cities\" optionLabel=\"name\" class=\"w-full md:w-56\" />",
      "<span id=\"lb\"></span>Options</span>\n<Listbox aria-labelledby=\"lb\" />\n\n<Listbox aria-label=\"City\" />"
    ],
    "props": {
      "modelValue": "any",
      "defaultValue": "any",
      "name": "string | undefined",
      "options": "any[] | undefined",
      "optionLabel": "string | ((data: any) => string) | undefined",
      "optionValue": "string | ((data: any) => any) | undefined",
      "optionDisabled": "string | ((data: any) => boolean) | undefined",
      "optionGroupLabel": "string | ((data: any) => string) | undefined",
      "optionGroupChildren": "string | ((data: any) => any[]) | undefined",
      "listStyle": "string | undefined",
      "scrollHeight": "string | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "fluid": "boolean | undefined",
      "dataKey": "string | undefined",
      "multiple": "boolean | undefined",
      "metaKeySelection": "boolean | undefined",
      "filter": "boolean | undefined",
      "filterPlaceholder": "string | undefined",
      "filterLocale": "string | undefined",
      "filterMatchMode": "HintedString<'contains' | 'startsWith' | 'endsWith'> | undefined",
      "filterFields": "string[] | undefined",
      "virtualScrollerOptions": "VirtualScrollerProps",
      "autoOptionFocus": "boolean | undefined",
      "selectOnFocus": "boolean | undefined",
      "focusOnHover": "boolean | undefined",
      "highlightOnSelect": "boolean | undefined",
      "checkmark": "boolean | undefined",
      "filterMessage": "string | undefined",
      "selectionMessage": "string | undefined",
      "emptySelectionMessage": "string | undefined",
      "emptyFilterMessage": "string | undefined",
      "emptyMessage": "string | undefined",
      "striped": "boolean | undefined",
      "tabindex": "number | string | undefined",
      "filterIcon": "string | undefined",
      "ariaLabel": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ListboxPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "change": "void",
      "focus": "void",
      "blur": "void",
      "filter": "void",
      "'item-dblclick'": "void",
      "'option-dblclick'": "void"
    },
    "slots": {},
    "logic": {
      "composables": [
        "useDown",
        "useMove"
      ],
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "options",
        "mounted",
        "getOptionIndex",
        "getOptionLabel",
        "getOptionValue",
        "getOptionRenderKey",
        "getPTOptions",
        "isOptionDisabled",
        "isOptionGroup",
        "getOptionGroupLabel",
        "getOptionGroupChildren",
        "getAriaPosInset",
        "onFirstHiddenFocus",
        "onLastHiddenFocus",
        "onFocusout",
        "onListFocus",
        "onListBlur",
        "onListKeyDown",
        "onOptionSelect",
        "onOptionMouseDown",
        "onOptionMouseMove",
        "onOptionTouchEnd",
        "onOptionDblClick",
        "onOptionSelectSingle",
        "if",
        "onOptionSelectMultiple",
        "onOptionSelectRange",
        "onFilterChange",
        "onFilterKeyDown",
        "onArrowDownKey",
        "onArrowUpKey",
        "onArrowLeftKey",
        "onHomeKey",
        "onEndKey",
        "onPageUpKey",
        "onPageDownKey",
        "onEnterKey",
        "onSpaceKey",
        "onShiftKey",
        "isOptionMatched",
        "isValidOption",
        "isValidSelectedOption",
        "isEquals",
        "isSelected",
        "findFirstOptionIndex",
        "findLastOptionIndex",
        "findNextOptionIndex",
        "findPrevOptionIndex",
        "findSelectedOptionIndex",
        "findFirstSelectedOptionIndex",
        "findLastSelectedOptionIndex",
        "findNextSelectedOptionIndex",
        "findPrevSelectedOptionIndex",
        "findNearestSelectedOptionIndex",
        "findFirstFocusedOptionIndex",
        "findLastFocusedOptionIndex",
        "searchOptions",
        "removeOption",
        "changeFocusedOptionIndex",
        "scrollInView",
        "autoUpdateModel",
        "updateModel",
        "listRef",
        "virtualScrollerRef",
        "optionsListFlat",
        "optionsListGroup",
        "visibleOptions",
        "hasSelectedOption",
        "equalityKey",
        "searchFields",
        "filterResultMessageText",
        "filterMessageText",
        "emptyFilterMessageText",
        "emptyMessageText",
        "selectionMessageText",
        "emptySelectionMessageText",
        "selectedMessageText",
        "focusedOptionId",
        "ariaSetSize",
        "virtualScrollerDisabled",
        "containerDataP"
      ]
    }
  },
  "megamenu": {
    "title": "MegaMenu",
    "description": "MegaMenu is a navigation component that displays submenus and content in columns.",
    "examples": [
      "<MegaMenu :model=\"items\" />",
      "<MegaMenu :model=\"items\" orientation=\"vertical\" />",
      "<MegaMenu :model=\"items\" class=\"p-4 bg-surface-0\" style=\"border-radius: 3rem\">\n    <template #start>\n        <svg width=\"35\" height=\"40\" viewBox=\"0 0 35 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8\">\n            <path d=\"...\" fill=\"var(--p-primary-color)\" />\n            <path d=\"...\" fill=\"var(--p-text-color)\" />\n        </svg>\n    </template>\n    <template #item=\"{ item }\">\n        <a v-if=\"item.root\" class=\"flex items-center cursor-pointer px-4 py-2 overflow-hidden relative font-semibold text-lg uppercase\" style=\"border-radius: 2rem\">\n            <span>{{ item.label }}</span>\n        </a>\n        <a v-else-if=\"!item.image\" class=\"flex items-center p-4 cursor-pointer mb-2 gap-3\">\n            <span class=\"inline-flex items-center justify-center rounded-full bg-primary text-primary-contrast w-12 h-12\">\n                <i :class=\"[item.icon, 'text-lg']\"></i>\n            </span>\n            <span class=\"inline-flex flex-col gap-1\">\n                <span class=\"font-bold text-lg\">{{ item.label }}</span>\n                <span class=\"whitespace-nowrap\">{{ item.subtext }}</span>\n            </span>\n        </a>\n        <div v-else class=\"flex flex-col items-start gap-4 p-2\">\n            <img alt=\"megamenu-demo\" :src=\"item.image\" class=\"w-full\" />\n            <span>{{ item.subtext }}</span>\n            <Button :label=\"item.label\" variant=\"outlined\" />\n        </div>\n    </template>\n    <template #end>\n        <Avatar image=\"/images/avatar/amyelsner.png\" shape=\"circle\" />\n    </template>\n</MegaMenu>",
      "<MegaMenu :model=\"items\">\n    <template #item=\"{ item }\">\n        <router-link v-if=\"item.route\" v-slot=\"{ href, navigate }\" :to=\"item.route\" custom>\n            <a v-ripple :href=\"href\" @click=\"navigate\">\n                <span :class=\"item.icon\" />\n                <span class=\"ml-2\">{{ item.label }}</span>\n            </a>\n        </router-link>\n        <a v-else v-ripple :href=\"item.url\" :target=\"item.target\">\n            <span :class=\"item.icon\" />\n            <span class=\"ml-2\">{{ item.label }}</span>\n        </a>\n    </template>\n</MegaMenu>"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "composables": [
        "useEnter"
      ],
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "activeItem",
        "mounted",
        "beforeUnmount",
        "getItemProp",
        "getItemLabel",
        "isItemDisabled",
        "isItemVisible",
        "isItemGroup",
        "isItemSeparator",
        "getProccessedItemLabel",
        "isProccessedItemGroup",
        "toggle",
        "show",
        "hide",
        "onFocus",
        "onBlur",
        "onKeyDown",
        "switch",
        "onItemChange",
        "onItemClick",
        "if",
        "onItemMouseEnter",
        "menuButtonClick",
        "menuButtonKeydown",
        "onArrowDownKey",
        "onArrowUpKey",
        "onArrowLeftKey",
        "onArrowRightKey",
        "onHomeKey",
        "onEndKey",
        "onEnterKey",
        "onSpaceKey",
        "onEscapeKey",
        "onTabKey",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "bindResizeListener",
        "unbindResizeListener",
        "bindMatchMediaListener",
        "unbindMatchMediaListener",
        "isItemMatched",
        "isValidItem",
        "isValidSelectedItem",
        "isSelected",
        "findFirstItemIndex",
        "findLastItemIndex",
        "findNextItemIndex",
        "findPrevItemIndex",
        "findSelectedItemIndex",
        "findFirstFocusedItemIndex",
        "findLastFocusedItemIndex",
        "findVisibleItem",
        "searchItems",
        "changeFocusedItemInfo",
        "scrollInView",
        "createProcessedItems",
        "containerRef",
        "menubarRef",
        "processedItems",
        "visibleItems",
        "horizontal",
        "vertical",
        "focusedItemId"
      ]
    }
  },
  "menu": {
    "title": "Menu",
    "description": "Menu displays a list of items in vertical orientation.",
    "examples": [
      "<Menu :model=\"items\" />",
      "<Menu :model=\"items\" />",
      "<Button type=\"button\" icon=\"pi pi-ellipsis-v\" @click=\"toggle\" aria-haspopup=\"true\" aria-controls=\"overlay_menu\" />\n<Menu ref=\"menu\" id=\"overlay_menu\" :model=\"items\" :popup=\"true\" />",
      "<Menu :model=\"items\" class=\"w-full md:w-60\">\n    <template #start>\n        <span class=\"inline-flex items-center gap-1 px-2 py-2\">\n            <svg width=\"35\" height=\"40\" viewBox=\"0 0 35 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8\">\n                <path d=\"...\" fill=\"var(--p-primary-color)\" />\n                <path d=\"...\" fill=\"var(--p-text-color)\" />\n            </svg>\n            <span class=\"text-xl font-semibold\">PRIME<span class=\"text-primary\">APP</span></span>\n        </span>\n    </template>\n    <template #submenulabel=\"{ item }\">\n        <span class=\"text-primary font-bold\">{{ item.label }}</span>\n    </template>\n    <template #item=\"{ item, props }\">\n        <a v-ripple class=\"flex items-center\" v-bind=\"props.action\">\n            <span :class=\"item.icon\" />\n            <span>{{ item.label }}</span>\n            <Badge v-if=\"item.badge\" class=\"ml-auto\" :value=\"item.badge\" />\n            <span v-if=\"item.shortcut\" class=\"ml-auto border border-surface rounded bg-emphasis text-muted-color text-xs p-1\">{{ item.shortcut }}</span>\n        </a>\n    </template>\n    <template #end>\n        <button v-ripple class=\"relative overflow-hidden w-full border-0 bg-transparent flex items-start p-2 pl-4 hover:bg-surface-100 dark:hover:bg-surface-800 rounded-none cursor-pointer transition-colors duration-200\">\n            <Avatar image=\"https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png\" class=\"mr-2\" shape=\"circle\" />\n            <span class=\"inline-flex flex-col items-start\">\n                <span class=\"font-bold\">Amy Elsner</span>\n                <span class=\"text-sm\">Admin</span>\n            </span>\n        </button>\n    </template>\n</Menu>",
      "<Menu :model=\"items\" />\n<Toast />",
      "<Menu :model=\"items\">\n    <template #item=\"{ item, props }\">\n        <router-link v-if=\"item.route\" v-slot=\"{ href, navigate }\" :to=\"item.route\" custom>\n            <a v-ripple :href=\"href\" v-bind=\"props.action\" @click=\"navigate\">\n                <span :class=\"item.icon\" />\n                <span class=\"ml-2\">{{ item.label }}</span>\n            </a>\n        </router-link>\n        <a v-else v-ripple :href=\"item.url\" :target=\"item.target\" v-bind=\"props.action\">\n            <span :class=\"item.icon\" />\n            <span class=\"ml-2\">{{ item.label }}</span>\n        </a>\n    </template>\n</Menu>"
    ],
    "props": {
      "model": "MenuItem[] | undefined",
      "popup": "boolean | undefined",
      "appendTo": "HintedString<'body' | 'self'> | undefined | HTMLElement",
      "autoZIndex": "boolean | undefined",
      "baseZIndex": "number | undefined",
      "tabindex": "number | string | undefined",
      "ariaLabel": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<MenuPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "focus": "void",
      "blur": "void",
      "show": "void",
      "hide": "void"
    },
    "slots": {},
    "logic": {
      "composables": [
        "useMove"
      ],
      "vueImports": [
        "ref",
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "beforeUnmount",
        "if",
        "itemClick",
        "itemMouseMove",
        "onListFocus",
        "onListBlur",
        "onListKeyDown",
        "onArrowDownKey",
        "onArrowUpKey",
        "onHomeKey",
        "onEndKey",
        "onEnterKey",
        "onSpaceKey",
        "findNextOptionIndex",
        "findPrevOptionIndex",
        "changeFocusedOptionIndex",
        "toggle",
        "show",
        "hide",
        "onEnter",
        "onLeave",
        "onAfterLeave",
        "alignOverlay",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "bindScrollListener",
        "unbindScrollListener",
        "bindResizeListener",
        "unbindResizeListener",
        "visible",
        "disabled",
        "label",
        "onOverlayClick",
        "containerRef",
        "listRef",
        "focusedOptionId",
        "dataP"
      ],
      "emits": [
        "show",
        "hide"
      ]
    }
  },
  "menubar": {
    "title": "Menubar",
    "description": "Menubar also known as Navbar, is a horizontal menu component.",
    "examples": [
      "<Menubar :model=\"items\" />",
      "<Menubar :model=\"items\">\n    <template #start>\n        <svg width=\"35\" height=\"40\" viewBox=\"0 0 35 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8\">\n            <path d=\"...\" fill=\"var(--p-primary-color)\" />\n            <path d=\"...\" fill=\"var(--p-text-color)\" />\n        </svg>\n    </template>\n    <template #item=\"{ item, props, hasSubmenu, root }\">\n        <a v-ripple class=\"flex items-center\" v-bind=\"props.action\">\n            <span>{{ item.label }}</span>\n            <Badge v-if=\"item.badge\" :class=\"{ 'ml-auto': !root, 'ml-2': root }\" :value=\"item.badge\" />\n            <span v-if=\"item.shortcut\" class=\"ml-auto border border-surface rounded bg-emphasis text-muted-color text-xs p-1\">{{ item.shortcut }}</span>\n            <i v-if=\"hasSubmenu\" :class=\"['pi pi-angle-down ml-auto', { 'pi-angle-down': root, 'pi-angle-right': !root }]\"></i>\n        </a>\n    </template>\n    <template #end>\n        <div class=\"flex items-center gap-2\">\n            <InputText placeholder=\"Search\" type=\"text\" class=\"w-32 sm:w-auto\" />\n            <Avatar image=\"/images/avatar/amyelsner.png\" shape=\"circle\" />\n        </div>\n    </template>\n</Menubar>",
      "<Menubar :model=\"items\" />\n<Toast />",
      "<Menubar :model=\"items\">\n    <template #item=\"{ item, props, hasSubmenu }\">\n        <router-link v-if=\"item.route\" v-slot=\"{ href, navigate }\" :to=\"item.route\" custom>\n            <a v-ripple :href=\"href\" v-bind=\"props.action\" @click=\"navigate\">\n                <span :class=\"item.icon\" />\n                <span>{{ item.label }}</span>\n            </a>\n        </router-link>\n        <a v-else v-ripple :href=\"item.url\" :target=\"item.target\" v-bind=\"props.action\">\n            <span :class=\"item.icon\" />\n            <span>{{ item.label }}</span>\n            <span v-if=\"hasSubmenu\" class=\"pi pi-fw pi-angle-down\" />\n        </a>\n    </template>\n</Menubar>"
    ],
    "props": {
      "model": "MenuItem[] | undefined",
      "breakpoint": "string | undefined",
      "buttonProps": "ButtonHTMLAttributes | undefined",
      "ariaLabel": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<MenubarPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "composables": [
        "useEnter",
        "useMove"
      ],
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "activeItemPath",
        "mounted",
        "beforeUnmount",
        "getItemProp",
        "getItemLabel",
        "isItemDisabled",
        "isItemVisible",
        "isItemGroup",
        "isItemSeparator",
        "getProccessedItemLabel",
        "isProccessedItemGroup",
        "toggle",
        "show",
        "hide",
        "onFocus",
        "onBlur",
        "onKeyDown",
        "onItemChange",
        "if",
        "onItemClick",
        "onItemMouseEnter",
        "onItemMouseMove",
        "menuButtonClick",
        "menuButtonKeydown",
        "onArrowDownKey",
        "onArrowUpKey",
        "onArrowLeftKey",
        "onArrowRightKey",
        "onHomeKey",
        "onEndKey",
        "onEnterKey",
        "onSpaceKey",
        "onEscapeKey",
        "onTabKey",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "bindResizeListener",
        "unbindResizeListener",
        "bindMatchMediaListener",
        "unbindMatchMediaListener",
        "isItemMatched",
        "isValidItem",
        "isValidSelectedItem",
        "isSelected",
        "findFirstItemIndex",
        "findLastItemIndex",
        "findNextItemIndex",
        "findPrevItemIndex",
        "findSelectedItemIndex",
        "findFirstFocusedItemIndex",
        "findLastFocusedItemIndex",
        "searchItems",
        "changeFocusedItemIndex",
        "scrollInView",
        "createProcessedItems",
        "containerRef",
        "menubarRef",
        "processedItems",
        "visibleItems",
        "focusedItemId"
      ]
    }
  },
  "menuitem": {
    "props": {},
    "emits": {},
    "slots": {}
  },
  "message": {
    "title": "Message",
    "description": "Message component is used to display inline messages.",
    "examples": [
      "<Message>Message Content</Message>",
      "<Message severity=\"success\">Success Message</Message>\n<Message severity=\"info\">Info Message</Message>\n<Message severity=\"warn\">Warn Message</Message>\n<Message severity=\"error\">Error Message</Message>\n<Message severity=\"secondary\">Secondary Message</Message>\n<Message severity=\"contrast\">Contrast Message</Message>",
      "<Message severity=\"info\" icon=\"pi pi-send\">Info Message</Message>\n<Message severity=\"success\">\n    <template #icon>\n        <Avatar image=\"/images/avatar/amyelsner.png\" shape=\"circle\" />\n    </template>\n    <span class=\"ml-2\">How may I help you?</span>\n</Message>",
      "<Message severity=\"success\" variant=\"outlined\">Success Message</Message>\n<Message severity=\"info\" variant=\"outlined\">Info Message</Message>\n<Message severity=\"warn\" variant=\"outlined\">Warn Message</Message>\n<Message severity=\"error\" variant=\"outlined\">Error Message</Message>\n<Message severity=\"secondary\" variant=\"outlined\">Secondary Message</Message>\n<Message severity=\"contrast\" variant=\"outlined\">Contrast Message</Message>",
      "<Message severity=\"success\" variant=\"simple\">Success Message</Message>\n<Message severity=\"info\" variant=\"simple\">Info Message</Message>\n<Message severity=\"warn\" variant=\"simple\">Warn Message</Message>\n<Message severity=\"error\" variant=\"simple\">Error Message</Message>\n<Message severity=\"secondary\" variant=\"simple\">Secondary Message</Message>\n<Message severity=\"contrast\" variant=\"simple\">Contrast Message</Message>",
      "<Message size=\"small\" icon=\"pi pi-send\">Small Message</Message>\n<Message icon=\"pi pi-user\">Normal Message</Message>\n<Message size=\"large\" icon=\"pi pi-check\">Large Message</Message>",
      "<Message v-if=\"!username || !email\" severity=\"error\" icon=\"pi pi-times-circle\" class=\"mb-2\">Validation error</Message>\n<Message v-if=\"username && email\" severity=\"success\" icon=\"pi pi-times-circle\" class=\"mb-2\">Form is valid</Message>\n<div class=\"flex flex-col gap-1\">\n    <InputText v-model=\"username\" placeholder=\"Username\" aria-label=\"username\" :invalid=\"!username\" />\n    <Message v-if=\"!username\" severity=\"error\" variant=\"simple\" size=\"small\">Username is required</Message>\n</div>\n<div class=\"flex flex-col gap-1\">\n    <InputText v-model=\"email\" placeholder=\"Email\" aria-label=\"email\" :invalid=\"!email\" />\n    <Message v-if=\"!email\" severity=\"error\" variant=\"simple\" size=\"small\">Email is not valid</Message>\n</div>",
      "<Button label=\"Show\" @click=\"addMessages()\" />\n<Button label=\"Clear\" severity=\"secondary\" class=\"ml-2\" @click=\"clearMessages()\" />\n<transition-group name=\"p-message\" tag=\"div\" class=\"flex flex-col\">\n    <Message v-for=\"msg of messages\" :key=\"msg.id\" :severity=\"msg.severity\" class=\"mt-4\">{{ msg.content }}</Message>\n</transition-group>",
      "<Message closable>Closable Message</Message>",
      "<Button label=\"Show\" @click=\"showMessage\" :disabled=\"visible\" class=\"mb-4\" />\n<Message v-if=\"visible\" severity=\"success\" :life=\"3000\">Auto Disappear Message</Message>"
    ],
    "props": {
      "severity": "HintedString<'success' | 'info' | 'warn' | 'error' | 'secondary' | 'contrast'> | undefined",
      "closable": "boolean | undefined",
      "sticky": "boolean | undefined",
      "life": "number | undefined",
      "icon": "string | undefined",
      "closeIcon": "string | undefined",
      "closeButtonProps": "ButtonHTMLAttributes | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<MessagePassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean",
      "size": "HintedString<'small' | 'large'> | undefined",
      "variant": "HintedString<'outlined' | 'simple'> | undefined"
    },
    "emits": {
      "close": "void",
      "'life-end'": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "close",
        "closeAriaLabel",
        "dataP"
      ],
      "emits": [
        "life-end"
      ]
    }
  },
  "metergroup": {
    "title": "MeterGroup",
    "description": "MeterGroup displays scalar measurements within a known range.",
    "examples": [
      "<MeterGroup :value=\"value\" />",
      "<MeterGroup :value=\"value\" />",
      "<MeterGroup :value=\"value\" />",
      "<MeterGroup :value=\"value\" labelPosition=\"start\" labelOrientation=\"vertical\" />",
      "<MeterGroup :value=\"value\" orientation=\"vertical\" labelOrientation=\"vertical\" />",
      "<MeterGroup :value=\"value\" :max=\"200\"  />",
      "<MeterGroup :value=\"value\" labelPosition=\"start\">\n    <template #label=\"{ value }\">\n        <div class=\"flex flex-wrap gap-4\">\n            <template v-for=\"val of value\" :key=\"val.label\">\n                <Card class=\"flex-1 border border-surface shadow-none\">\n                    <template #content>\n                        <div class=\"flex justify-between gap-8\">\n                            <div class=\"flex flex-col gap-1\">\n                                <span class=\"text-surface-500 dark:text-surface-400 text-sm\">{{ val.label }}</span>\n                                <span class=\"font-bold text-lg\">{{ val.value }}%</span>\n                            </div>\n                            <span class=\"w-8 h-8 rounded-full inline-flex justify-center items-center text-center\" :style=\"{ backgroundColor: `${val.color1}`, color: '#ffffff' }\">\n                                <i :class=\"val.icon\" />\n                            </span>\n                        </div>\n                    </template>\n                </Card>\n            </template>\n        </div>\n    </template>\n    <template #meter=\"slotProps\">\n        <span :class=\"slotProps.class\" :style=\"{ background: `linear-gradient(to right, ${slotProps.value.color1}, ${slotProps.value.color2})`, width: slotProps.size }\" />\n    </template>\n    <template #start=\"{ totalPercent }\">\n        <div class=\"flex justify-between mt-4 mb-2 relative\">\n            <span>Storage</span>\n            <span :style=\"{ width: totalPercent + '%' }\" class=\"absolute text-right\">{{ totalPercent }}%</span>\n            <span class=\"font-medium\">1TB</span>\n        </div>\n    </template>\n    <template #end>\n        <div class=\"flex justify-between mt-4\">\n            <Button label=\"Manage Storage\" variant=\"outlined\" size=\"small\" />\n            <Button label=\"Update Plan\" size=\"small\" />\n        </div>\n    </template>\n</MeterGroup>"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "getPTOptions",
        "percent",
        "percentValue",
        "meterCalculatedStyles",
        "totalPercent",
        "percentages",
        "dataP"
      ]
    }
  },
  "multiselect": {
    "title": "MultiSelect",
    "description": "MultiSelect is used to select multiple items from a collection.",
    "examples": [
      "<MultiSelect v-model=\"selectedCities\" :options=\"cities\" optionLabel=\"name\" filter placeholder=\"Select Cities\"\n    :maxSelectedLabels=\"3\" class=\"w-full md:w-80\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex justify-center flex-col gap-4\">\n    <div class=\"flex flex-col gap-1\">\n        <MultiSelect name=\"city\" :options=\"cities\" optionLabel=\"name\" filter placeholder=\"Select Cities\" :maxSelectedLabels=\"3\" class=\"w-full md:w-80\" />\n        <Message v-if=\"$form.city?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.city.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<MultiSelect v-model=\"selectedCities\" display=\"chip\" :options=\"cities\" optionLabel=\"name\" filter placeholder=\"Select Cities\"\n    :maxSelectedLabels=\"3\" class=\"w-full md:w-80\" />",
      "<MultiSelect v-model=\"selectedCities\" :options=\"groupedCities\" optionLabel=\"label\" filter optionGroupLabel=\"label\" optionGroupChildren=\"items\" display=\"chip\" placeholder=\"Select Cities\" class=\"w-full md:w-80\">\n    <template #optiongroup=\"slotProps\">\n        <div class=\"flex items-center\">\n            <img :alt=\"slotProps.option.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`flag flag-${slotProps.option.code.toLowerCase()} mr-2`\" style=\"width: 18px\" />\n            <div>{{ slotProps.option.label }}</div>\n        </div>\n    </template>\n</MultiSelect>",
      "<MultiSelect v-model=\"selectedCountries\" :options=\"countries\" optionLabel=\"name\" filter placeholder=\"Select Countries\" display=\"chip\" class=\"w-full md:w-80\">\n    <template #option=\"slotProps\">\n        <div class=\"flex items-center\">\n            <img :alt=\"slotProps.option.name\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`flag flag-${slotProps.option.code.toLowerCase()} mr-2`\" style=\"width: 18px\" />\n            <div>{{ slotProps.option.name }}</div>\n        </div>\n    </template>\n    <template #dropdownicon>\n        <i class=\"pi pi-map\" />\n    </template>\n    <template #filtericon>\n        <i class=\"pi pi-map-marker\" />\n    </template>\n    <template #header>\n        <div class=\"font-medium px-3 py-2\">Available Countries</div>\n    </template>\n    <template #footer>\n        <div class=\"p-3 flex justify-between\">\n            <Button label=\"Add New\" severity=\"secondary\" variant=\"text\" size=\"small\" icon=\"pi pi-plus\" />\n            <Button label=\"Remove All\" severity=\"danger\" variant=\"text\" size=\"small\" icon=\"pi pi-times\" />\n        </div>\n    </template>\n</MultiSelect>",
      "<MultiSelect v-model=\"selectedCities\" :options=\"cities\" filter optionLabel=\"name\" placeholder=\"Select Cities\"\n    :maxSelectedLabels=\"3\" class=\"w-full md:w-80\" />",
      "<MultiSelect v-model=\"selectedCities\" showClear :options=\"cities\" optionLabel=\"name\" filter placeholder=\"Select Cities\" :maxSelectedLabels=\"3\" class=\"w-full md:w-80\" />",
      "<MultiSelect placeholder=\"Loading...\" loading class=\"w-full md:w-80\"></MultiSelect>",
      "<MultiSelect v-model=\"selectedItems\" :options=\"items\" :maxSelectedLabels=\"3\" :selectAll=\"selectAll\" optionLabel=\"label\" optionValue=\"value\"\n    @selectall-change=\"onSelectAllChange($event)\" @change=\"onChange($event)\" :virtualScrollerOptions=\"{ itemSize: 44 }\" filter placeholder=\"Select Item\" class=\"w-full md:w-80\" />",
      "<MultiSelect v-model=\"selectedCities\" variant=\"filled\" :options=\"cities\" optionLabel=\"name\" filter placeholder=\"Select Cities\"\n    :maxSelectedLabels=\"3\" class=\"w-full md:w-80\" />",
      "<FloatLabel class=\"w-full md:w-80\">\n    <MultiSelect id=\"over_label\" v-model=\"value1\" :options=\"cities\" optionLabel=\"name\" filter :maxSelectedLabels=\"3\" class=\"w-full\" />\n    <label for=\"over_label\">Over Label</label>\n</FloatLabel>\n\n<FloatLabel class=\"w-full md:w-80\" variant=\"in\">\n    <MultiSelect id=\"in_label\" v-model=\"value2\" :options=\"cities\" optionLabel=\"name\" filter :maxSelectedLabels=\"3\" class=\"w-full\" variant=\"filled\" />\n    <label for=\"in_label\">In Label</label>\n</FloatLabel>\n\n<FloatLabel class=\"w-full md:w-80\" variant=\"on\">\n    <MultiSelect id=\"on_label\" v-model=\"value3\" :options=\"cities\" optionLabel=\"name\" filter :maxSelectedLabels=\"3\" class=\"w-full\" />\n    <label for=\"on_label\">On Label</label>\n</FloatLabel>",
      "<IftaLabel>\n    <MultiSelect v-model=\"selectedCities\" inputId=\"ms_cities\" :options=\"cities\" optionLabel=\"name\" filter :maxSelectedLabels=\"3\" class=\"w-full\" variant=\"filled\" />\n    <label for=\"ms_cities\">Cities</label>\n</IftaLabel>",
      "<MultiSelect v-model=\"value1\" :options=\"cities\" optionLabel=\"name\" :maxSelectedLabels=\"3\" class=\"w-full md:w-80\" size=\"small\" placeholder=\"Small\" />\n<MultiSelect v-model=\"value2\" :options=\"cities\" optionLabel=\"name\" :maxSelectedLabels=\"3\" class=\"w-full md:w-80\" placeholder=\"Normal\" />\n<MultiSelect v-model=\"value3\" :options=\"cities\" optionLabel=\"name\" :maxSelectedLabels=\"3\" class=\"w-full md:w-80\" size=\"large\" placeholder=\"Large\" />",
      "<MultiSelect v-model=\"selectedCities1\" :options=\"cities\" optionLabel=\"name\" filter placeholder=\"Select Cities\" \n        :maxSelectedLabels=\"3\" :invalid=\"selectedCities1?.length === 0\" class=\"w-full md:w-80\" />\n<MultiSelect v-model=\"selectedCities2\" :options=\"cities\" optionLabel=\"name\" filter placeholder=\"Select Cities\" \n        :maxSelectedLabels=\"3\" :invalid=\"selectedCities2?.length === 0\" class=\"w-full md:w-80\" variant=\"filled\" />",
      "<MultiSelect disabled placeholder=\"Select Cities\" class=\"w-full md:w-80\" />",
      "<span id=\"dd1\"></span>Options</span>\n<MultiSelect aria-labelledby=\"dd1\" />\n\n<MultiSelect aria-label=\"Options\" />"
    ],
    "props": {
      "modelValue": "any",
      "defaultValue": "any",
      "name": "string | undefined",
      "options": "any[] | undefined",
      "optionLabel": "string | ((data: any) => string) | undefined",
      "optionValue": "string | ((data: any) => any) | undefined",
      "optionDisabled": "string | ((data: any) => boolean) | undefined",
      "optionGroupLabel": "string | ((data: any) => string) | undefined",
      "optionGroupChildren": "string | ((data: any) => any[]) | undefined",
      "scrollHeight": "string | undefined",
      "placeholder": "string | undefined",
      "size": "HintedString<'small' | 'large'> | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "variant": "HintedString<'outlined' | 'filled'> | undefined | null",
      "fluid": "boolean | undefined",
      "inputId": "string | undefined",
      "panelStyle": "any",
      "panelClass": "any",
      "overlayStyle": "any",
      "overlayClass": "any",
      "dataKey": "string | undefined",
      "showClear": "boolean | undefined",
      "clearIcon": "string | undefined",
      "resetFilterOnClear": "boolean",
      "filter": "boolean | undefined",
      "filterPlaceholder": "string | undefined",
      "filterLocale": "string | undefined",
      "filterMatchMode": "HintedString<'contains' | 'startsWith' | 'endsWith'> | undefined",
      "filterFields": "string[] | undefined",
      "appendTo": "HintedString<'body' | 'self'> | undefined | HTMLElement",
      "display": "HintedString<'comma' | 'chip'> | undefined",
      "selectedItemsLabel": "string | undefined",
      "maxSelectedLabels": "number | undefined",
      "selectionLimit": "number | undefined",
      "showToggleAll": "boolean | undefined",
      "loading": "boolean | undefined",
      "checkboxIcon": "string | undefined",
      "dropdownIcon": "string | undefined",
      "filterIcon": "string | undefined",
      "loadingIcon": "string | undefined",
      "removeTokenIcon": "string | undefined",
      "chipIcon": "string | undefined",
      "selectAll": "boolean | undefined",
      "resetFilterOnHide": "boolean | undefined",
      "virtualScrollerOptions": "VirtualScrollerProps",
      "autoOptionFocus": "boolean | undefined",
      "autoFilterFocus": "boolean | undefined",
      "focusOnHover": "boolean | undefined",
      "highlightOnSelect": "boolean | undefined",
      "filterMessage": "string | undefined",
      "selectionMessage": "string | undefined",
      "emptySelectionMessage": "string | undefined",
      "emptyFilterMessage": "string | undefined",
      "emptyMessage": "string | undefined",
      "tabindex": "number | string | undefined",
      "ariaLabel": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<MultiSelectPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "change": "void",
      "focus": "void",
      "blur": "void",
      "'before-show'": "void",
      "'before-hide'": "void",
      "show": "void",
      "hide": "void",
      "filter": "void",
      "'selectall-change'": "void"
    },
    "slots": {},
    "logic": {
      "composables": [
        "useMove"
      ],
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "options",
        "mounted",
        "beforeUnmount",
        "if",
        "getOptionIndex",
        "getOptionLabel",
        "getOptionValue",
        "getOptionRenderKey",
        "getHeaderCheckboxPTOptions",
        "getCheckboxPTOptions",
        "isOptionDisabled",
        "isOptionGroup",
        "getOptionGroupLabel",
        "getOptionGroupChildren",
        "getAriaPosInset",
        "show",
        "hide",
        "onFocus",
        "onBlur",
        "onKeyDown",
        "switch",
        "onContainerClick",
        "onClearClick",
        "onFirstHiddenFocus",
        "onLastHiddenFocus",
        "onOptionSelect",
        "onOptionMouseMove",
        "onOptionSelectRange",
        "onFilterChange",
        "onFilterKeyDown",
        "onFilterBlur",
        "onFilterUpdated",
        "onOverlayClick",
        "onOverlayKeyDown",
        "onArrowDownKey",
        "onArrowUpKey",
        "onArrowLeftKey",
        "onHomeKey",
        "onEndKey",
        "onPageUpKey",
        "onPageDownKey",
        "onEnterKey",
        "onEscapeKey",
        "onTabKey",
        "onShiftKey",
        "onOverlayEnter",
        "onOverlayAfterEnter",
        "onOverlayLeave",
        "onOverlayAfterLeave",
        "alignOverlay",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "bindScrollListener",
        "unbindScrollListener",
        "bindResizeListener",
        "unbindResizeListener",
        "isOutsideClicked",
        "getLabelByValue",
        "getSelectedItemsLabel",
        "onToggleAll",
        "removeOption",
        "clearFilter",
        "hasFocusableElements",
        "isOptionMatched",
        "isValidOption",
        "isValidSelectedOption",
        "isEquals",
        "isSelected",
        "findFirstOptionIndex",
        "findLastOptionIndex",
        "findNextOptionIndex",
        "findPrevOptionIndex",
        "findSelectedOptionIndex",
        "findFirstSelectedOptionIndex",
        "findLastSelectedOptionIndex",
        "findNextSelectedOptionIndex",
        "findPrevSelectedOptionIndex",
        "findNearestSelectedOptionIndex",
        "findFirstFocusedOptionIndex",
        "findLastFocusedOptionIndex",
        "searchOptions",
        "changeFocusedOptionIndex",
        "scrollInView",
        "autoUpdateModel",
        "updateModel",
        "flatOptions",
        "overlayRef",
        "listRef",
        "virtualScrollerRef",
        "visibleOptions",
        "label",
        "for",
        "chipSelectedItems",
        "allSelected",
        "hasSelectedOption",
        "equalityKey",
        "searchFields",
        "maxSelectionLimitReached",
        "filterResultMessageText",
        "filterMessageText",
        "emptyFilterMessageText",
        "emptyMessageText",
        "selectionMessageText",
        "emptySelectionMessageText",
        "selectedMessageText",
        "focusedOptionId",
        "ariaSetSize",
        "toggleAllAriaLabel",
        "listAriaLabel",
        "virtualScrollerDisabled",
        "hasFluid",
        "isClearIconVisible",
        "containerDataP",
        "labelDataP",
        "dropdownIconDataP",
        "overlayDataP"
      ],
      "emits": [
        "before-show",
        "before-hide",
        "show",
        "hide"
      ]
    }
  },
  "orderlist": {
    "title": "OrderList",
    "description": "OrderList is used to sort a collection.",
    "examples": [
      "<OrderList v-model=\"products\" dataKey=\"id\" breakpoint=\"575px\" pt:pcListbox:root=\"w-full sm:w-56\">\n    <template #option=\"{ option }\">\n        {{ option.name }}\n    </template>\n</OrderList>",
      "<OrderList v-model=\"products\" dataKey=\"id\" breakpoint=\"575px\" scrollHeight=\"20rem\">\n    <template #option=\"{ option , selected }\">\n        <div class=\"flex flex-wrap p-1 items-center gap-4 w-full\">\n            <img class=\"w-12 shrink-0 rounded\" :src=\"'https://primefaces.org/cdn/primevue/images/product/' + option.image\" :alt=\"option.name\" />\n            <div class=\"flex-1 flex flex-col\">\n                <span class=\"font-medium text-sm\">{{ option.name }}</span>\n                <span :class=\"['text-sm', { 'text-surface-500 dark:text-surface-400': !selected, 'text-inherit': selected }]\">{{ option.category }}</span>\n            </div>\n            <span class=\"font-bold sm:ml-8\">${{ option.price }}</span>\n        </div>\n    </template>\n</OrderList>",
      "<span id=\"lb\">Options</span>\n<OrderList aria-labelledby=\"lb\" />\n\n<OrderList aria-label=\"City\" />"
    ],
    "props": {
      "modelValue": "any[]",
      "dataKey": "string | undefined",
      "selection": "any[]",
      "metaKeySelection": "boolean | undefined",
      "autoOptionFocus": "boolean | undefined",
      "focusOnHover": "boolean | undefined",
      "listStyle": "any",
      "responsive": "boolean | undefined",
      "breakpoint": "string | undefined",
      "striped": "boolean | undefined",
      "tabindex": "number | string | undefined",
      "scrollHeight": "string | undefined",
      "buttonProps": "object | undefined",
      "moveUpButtonProps": "object | undefined",
      "moveTopButtonProps": "object | undefined",
      "moveDownButtonProps": "object | undefined",
      "moveBottomButtonProps": "object | undefined",
      "ariaLabel": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<OrderListPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'update:selection'": "void",
      "reorder": "void",
      "'selection-change'": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "computed"
      ],
      "methods": [
        "data",
        "beforeUnmount",
        "updated",
        "mounted",
        "updateSelection",
        "onChangeSelection",
        "onListFocus",
        "onListBlur",
        "onReorderUpdate",
        "moveUp",
        "moveTop",
        "moveDown",
        "moveBottom",
        "updateListScroll",
        "createStyle",
        "destroyStyle",
        "moveDisabled",
        "moveUpAriaLabel",
        "moveTopAriaLabel",
        "moveDownAriaLabel",
        "moveBottomAriaLabel",
        "hasSelectedOption"
      ]
    }
  },
  "organizationchart": {
    "title": "OrganizationChart",
    "description": "OrganizationChart visualizes hierarchical organization data.",
    "examples": [
      "<OrganizationChart :value=\"data\">\n    <template #default=\"slotProps\">\n        <span>{{ slotProps.node.label }}</span>\n    </template>\n</OrganizationChart>",
      "<OrganizationChart v-model:selectionKeys=\"selection\" :value=\"data\" collapsible selectionMode=\"multiple\">\n    <template #person=\"slotProps\">\n        <div class=\"flex flex-col\">\n            <div class=\"flex flex-col items-center\">\n                <img :alt=\"slotProps.node.data.name\" :src=\"slotProps.node.data.image\" class=\"mb-4 w-12 h-12\" />\n                <span class=\"font-bold mb-2\">{{ slotProps.node.data.name }}</span>\n                <span>{{ slotProps.node.data.title }}</span>\n            </div>\n        </div>\n    </template>\n    <template #default=\"slotProps\">\n        <span>{{ slotProps.node.label }}</span>\n    </template>\n</OrganizationChart>",
      "<OrganizationChart v-model:selectionKeys=\"selection\" :value=\"data\" collapsible selectionMode=\"single\">\n    <template #country=\"slotProps\">\n        <div class=\"flex flex-col items-center\">\n            <img :alt=\"slotProps.node.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`w-2rem flag flag-${slotProps.node.data}`\" />\n            <div class=\"mt-4 font-medium text-lg\">{{ slotProps.node.label }}</div>\n        </div>\n    </template>\n    <template #default=\"slotProps\">\n        <span>{{slotProps.node.label}}</span>\n    </template>\n</OrganizationChart>",
      "<OrganizationChart :value=\"data\" collapsible>\n    <template #person=\"slotProps\">\n        <div class=\"flex flex-col\">\n            <div class=\"flex flex-col items-center\">\n                <img :alt=\"slotProps.node.data.name\" :src=\"slotProps.node.data.image\" class=\"mb-4 w-12 h-12\" />\n                <span class=\"font-bold mb-2\">{{ slotProps.node.data.name }}</span>\n                <span>{{ slotProps.node.data.title }}</span>\n            </div>\n        </div>\n    </template>\n    <template #default=\"slotProps\">\n        <span>{{ slotProps.node.label }}</span>\n    </template>\n</OrganizationChart>"
    ],
    "props": {
      "value": "OrganizationChartNode",
      "selectionKeys": "OrganizationChartSelectionKeys",
      "selectionMode": "HintedString<'single' | 'multiple'> | undefined",
      "collapsedKeys": "OrganizationChartCollapsedKeys",
      "collapsible": "boolean",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<OrganizationChartPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:selectionKeys'": "void",
      "'update:collapsedKeys'": "void",
      "'node-select'": "void",
      "'node-unselect'": "void",
      "'node-expand'": "void",
      "'node-collapsed'": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "watch"
      ],
      "methods": [
        "data",
        "collapsedKeys",
        "onNodeClick",
        "if",
        "onNodeToggle"
      ]
    }
  },
  "overlaybadge": {
    "props": {
      "value": "string | number",
      "severity": "HintedString<'secondary' | 'info' | 'success' | 'warn' | 'danger' | 'contrast'> | null | undefined",
      "size": "HintedString<'small' | 'large' | 'xlarge'> | null | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<OverlayBadgePassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {}
  },
  "overlaypanel": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "mounted"
      ]
    }
  },
  "paginator": {
    "title": "Paginator",
    "description": "Paginator displays data in paged format and provides navigation between pages.",
    "examples": [
      "<Paginator :rows=\"10\" :totalRecords=\"120\" :rowsPerPageOptions=\"[10, 20, 30]\"></Paginator>",
      "<Paginator v-model:first=\"first\" :rows=\"1\" :totalRecords=\"12\" template=\"FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink\" />\n\n<div class=\"p-4 text-center\">\n    <img :src=\"`https://primefaces.org/cdn/primevue/images/nature/nature${first + 1}.jpg`\" :alt=\"first\" class=\"rounded w-full sm:w-[30rem]\" />\n</div>",
      "<Paginator :rows=\"10\" :totalRecords=\"120\" template=\"FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink\"\n    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords}\" />",
      "<Paginator\n    :template=\"{\n        '640px': 'PrevPageLink CurrentPageReport NextPageLink',\n        '960px': 'FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink',\n        '1300px': 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink',\n        default: 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink JumpToPageDropdown JumpToPageInput'\n    }\"\n    :rows=\"10\"\n    :totalRecords=\"120\">\n</Paginator>",
      "<Paginator :rows=\"10\" :totalRecords=\"120\" :rowsPerPageOptions=\"[10, 20, 30]\">\n    <template #start=\"slotProps\">\n        Page: {{ slotProps.state.page }}\n        First: {{ slotProps.state.first }}\n        Rows: {{ slotProps.state.rows }}\n    </template>\n    <template #end>\n        <Button type=\"button\" icon=\"pi pi-search\" />\n    </template>\n</Paginator>",
      "<Paginator :rows=\"10\" :totalRecords=\"120\">\n    <template #container=\"{ first, last, page, pageCount, prevPageCallback, nextPageCallback, totalRecords }\">\n        <div class=\"flex items-center gap-4 border border-primary bg-transparent rounded-full w-full py-1 px-2 justify-between\">\n            <Button icon=\"pi pi-chevron-left\" rounded variant=\"text\" @click=\"prevPageCallback\" :disabled=\"page === 0\" />\n            <div class=\"text-color font-medium\">\n                <span class=\"hidden sm:block\">Showing {{ first }} to {{ last }} of {{ totalRecords }}</span>\n                <span class=\"block sm:hidden\">Page {{ page + 1 }} of {{ pageCount }}</span>\n            </div>\n            <Button icon=\"pi pi-chevron-right\" rounded variant=\"text\" @click=\"nextPageCallback\" :disabled=\"page === pageCount - 1\" />\n        </div>\n    </template>\n</Paginator>"
    ],
    "props": {
      "totalRecords": "number | undefined",
      "rows": "number | undefined",
      "first": "number | undefined",
      "pageLinkSize": "number | undefined",
      "rowsPerPageOptions": "number[] | undefined",
      "template": "any | string",
      "currentPageReportTemplate": "string | undefined",
      "alwaysShow": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<PaginatorPassThroughOptions>",
      "ptOptions": "PassThroughOptions"
    },
    "emits": {
      "'update:first'": "void",
      "'update:rows'": "void",
      "page": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "first",
        "rows",
        "totalRecords",
        "mounted",
        "changePage",
        "changePageToFirst",
        "changePageToPrev",
        "changePageLink",
        "changePageToNext",
        "changePageToLast",
        "onRowChange",
        "createStyle",
        "if",
        "and",
        "hasBreakpoints",
        "getAriaLabel",
        "templateItems",
        "for",
        "page",
        "pageCount",
        "isFirstPage",
        "isLastPage",
        "calculatePageLinkBoundaries",
        "pageLinks",
        "currentState",
        "empty",
        "currentPage",
        "last"
      ]
    }
  },
  "panel": {
    "title": "Panel",
    "description": "Panel is a grouping component providing with content toggle feature.",
    "examples": [
      "<Panel header=\"Header\">\n    <p class=\"m-0\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n    </p>\n</Panel>",
      "<Panel header=\"Header\" toggleable>\n    <p class=\"m-0\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n    </p>\n</Panel>",
      "<Panel toggleable>\n    <template #header>\n        <div class=\"flex items-center gap-2\">\n            <Avatar image=\"https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png\" shape=\"circle\" />\n            <span class=\"font-bold\">Amy Elsner</span>\n        </div>\n    </template>\n    <template #footer>\n        <div class=\"flex flex-wrap items-center justify-between gap-4\">\n            <div class=\"flex items-center gap-2\">\n                <Button icon=\"pi pi-user\" rounded text></Button>\n                <Button icon=\"pi pi-bookmark\" severity=\"secondary\" rounded text></Button>\n            </div>\n            <span class=\"text-surface-500 dark:text-surface-400\">Updated 2 hours ago</span>\n        </div>\n    </template>\n    <template #icons>\n        <Button icon=\"pi pi-cog\" severity=\"secondary\" rounded text @click=\"toggle\" />\n        <Menu ref=\"menu\" id=\"config_menu\" :model=\"items\" popup />\n    </template>\n    <p class=\"m-0\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n    </p>\n</Panel>"
    ],
    "props": {
      "header": "string",
      "toggleable": "boolean",
      "collapsed": "boolean",
      "toggleButtonProps": "object | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<PanelPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:collapsed'": "void",
      "toggle": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "collapsed",
        "toggle",
        "onKeyDown",
        "buttonAriaLabel",
        "dataP"
      ]
    }
  },
  "panelmenu": {
    "title": "PanelMenu",
    "description": "PanelMenu is a hybrid of accordion-tree components.",
    "examples": [
      "<PanelMenu :model=\"items\" />",
      "<PanelMenu :model=\"items\" multiple />",
      "<Button type=\"button\" label=\"Toggle All\" text @click=\"toggleAll\" />\n<PanelMenu v-model:expandedKeys=\"expandedKeys\" :model=\"items\" />",
      "<PanelMenu :model=\"items\">\n    <template #item=\"{ item }\">\n        <a v-ripple class=\"flex items-center px-4 py-2 cursor-pointer group\">\n            <span :class=\"[item.icon, 'text-primary group-hover:text-inherit']\" />\n            <span :class=\"['ml-2', { 'font-semibold': item.items }]\">{{ item.label }}</span>\n            <Badge v-if=\"item.badge\" class=\"ml-auto\" :value=\"item.badge\" />\n            <span v-if=\"item.shortcut\" class=\"ml-auto border border-surface rounded bg-emphasis text-muted-color text-xs p-1\">{{ item.shortcut }}</span>\n        </a>\n    </template>\n</PanelMenu>",
      "<PanelMenu :model=\"items\" />\n<Toast />",
      "<PanelMenu :model=\"items\">\n    <template #item=\"{ item }\">\n        <router-link v-if=\"item.route\" v-slot=\"{ href, navigate }\" :to=\"item.route\" custom>\n            <a v-ripple class=\"flex items-center cursor-pointer text-surface-700 dark:text-surface-0 px-4 py-2\" :href=\"href\" @click=\"navigate\">\n                <span :class=\"item.icon\" />\n                <span class=\"ml-2\">{{ item.label }}</span>\n            </a>\n        </router-link>\n        <a v-else v-ripple class=\"flex items-center cursor-pointer text-surface-700 dark:text-surface-0 px-4 py-2\" :href=\"item.url\" :target=\"item.target\">\n            <span :class=\"item.icon\" />\n            <span class=\"ml-2\">{{ item.label }}</span>\n            <span v-if=\"item.items\" class=\"pi pi-angle-down text-primary ml-auto\" />\n        </a>\n    </template>\n</PanelMenu>"
    ],
    "props": {
      "model": "MenuItem[] | undefined",
      "expandedKeys": "PanelMenuExpandedKeys",
      "multiple": "boolean | undefined",
      "tabindex": "number | string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<PanelMenuPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:expandedKeys'": "void",
      "'panel-open'": "void",
      "'panel-close'": "void"
    },
    "slots": {},
    "logic": {
      "methods": [
        "data",
        "getItemProp",
        "getItemLabel",
        "getPTOptions",
        "isItemActive",
        "isItemVisible",
        "isItemDisabled",
        "isItemFocused",
        "isItemGroup",
        "getPanelId",
        "getPanelKey",
        "getHeaderId",
        "getContentId",
        "onHeaderClick",
        "if",
        "onHeaderKeyDown",
        "onHeaderArrowDownKey",
        "onHeaderArrowUpKey",
        "onHeaderHomeKey",
        "onHeaderEndKey",
        "onHeaderEnterKey",
        "findNextHeader",
        "findPrevHeader",
        "findFirstHeader",
        "findLastHeader",
        "updateFocusedHeader",
        "changeActiveItem",
        "changeExpandedKeys",
        "changeFocusedHeader",
        "getMenuItemProps"
      ]
    }
  },
  "passthrough": {
    "title": "Pass Through",
    "description": "The Pass Through attributes is an API to access the internal DOM Structure of the components.",
    "examples": [
      "<Panel header=\"Header\" toggleable\n    :pt=\"{\n        root: 'border border-primary rounded-xl p-4',\n        header: (options) => ({\n            id: 'myPanelHeader',\n            style: {\n                'user-select': 'none'\n            },\n            class: ['flex items-center justify-between text-primary font-bold']\n        }),\n        content: { class: 'text-primary-700 dark:text-primary-200 mt-4' },\n        title: 'text-xl',\n        toggler: () => 'bg-primary text-primary-contrast hover:text-primary hover:bg-primary-contrast'\n    }\">\n    <p class=\"m-0\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n    </p>\n</Panel>",
      "<ComponentTag pt:[passthrough_key]:[attribute]=\"value\" />",
      "<Panel\n    :pt=\"{\n        root: {\n            class: 'border-1 border-solid'\n        },\n        header: {\n            'data-test-id': 'testid',\n            class: 'bg-blue-500',\n            onClick: onHeaderClick\n        }\n    }\"\n>",
      "<Panel\n    pt:root:class=\"border border-solid\"\n    pt:header:id=\"headerId\"\n    pt:header:data-test-id=\"testId\"\n    pt:header:class=\"bg-blue-500\"\n    :pt:header:onClick=\"onHeaderClick\"\n>",
      "<Button\n    type=\"button\"\n    label=\"Messages\"\n    icon=\"pi pi-inbox\"\n    badge=\"2\"\n    variant=\"outlined\"\n    severity=\"secondary\"\n    :pt=\"{\n        root: '!px-4 !py-3',\n        icon: '!text-xl !text-violet-500 dark:!text-violet-400',\n        label: '!text-lg !text-violet-500 dark:!text-violet-400',\n        pcBadge: {\n            root: '!bg-violet-500 dark:!bg-violet-400 !text-white dark:!text-black'\n        }\n    }\"\n/>",
      "<Panel header=\"Header\" :pt=\"panelPT\">\n    Content\n</Panel>"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "composables": [
        "usePassThrough"
      ],
      "methods": [
        "_typeof",
        "function",
        "ownKeys",
        "_objectSpread",
        "forEach",
        "_defineProperty",
        "_toPropertyKey",
        "_toPrimitive",
        "usePassThrough"
      ]
    }
  },
  "password": {
    "title": "Password",
    "description": "Password displays strength indicator for password fields.",
    "examples": [
      "<Password v-model=\"value\" :feedback=\"false\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4 w-full sm:w-64\">\n    <div class=\"flex flex-col gap-1\">\n        <Password name=\"password\" placeholder=\"Password\" :feedback=\"false\" fluid />\n        <template v-if=\"$form.password?.invalid\">\n            <Message v-for=\"(error, index) of $form.password.errors\" :key=\"index\" severity=\"error\" size=\"small\" variant=\"simple\">{{ error.message }}</Message>\n        </template>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<Password v-model=\"value\" />",
      "<Password v-model=\"value\" promptLabel=\"Choose a password\" weakLabel=\"Too simple\" mediumLabel=\"Average complexity\" strongLabel=\"Complex password\" />",
      "<Password v-model=\"value\" toggleMask />",
      "<Password v-model=\"value\">\n    <template #header>\n        <div class=\"font-semibold text-xm mb-4\">Reset Password</div>\n    </template>\n    <template #footer>\n        <Divider />\n        <ul class=\"pl-2 my-0 leading-normal text-sm\">\n            <li>At least one lowercase</li>\n            <li>At least one uppercase</li>\n            <li>At least one numeric</li>\n            <li>Minimum 8 characters</li>\n        </ul>\n    </template>\n</Password>",
      "<FloatLabel>\n    <Password v-model=\"value1\" inputId=\"over_label\" />\n    <label for=\"over_label\">Over Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"in\">\n    <Password v-model=\"value2\" inputId=\"in_label\" variant=\"filled\" />\n    <label for=\"in_label\">In Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"on\">\n    <Password v-model=\"value3\" inputId=\"on_label\" />\n    <label for=\"on_label\">On Label</label>\n</FloatLabel>",
      "<IftaLabel>\n    <Password v-model=\"value\" inputId=\"password\" variant=\"filled\" />\n    <label for=\"password\">Password</label>\n</IftaLabel>",
      "<Password v-model=\"value\" :feedback=\"false\" showClear inputClass=\"w-56\" />",
      "<div class=\"card flex flex-col items-center gap-4\">\n    <Password v-model=\"value1\" size=\"small\" placeholder=\"Small\" />\n    <Password v-model=\"value2\" placeholder=\"Normal\" />\n    <Password v-model=\"value3\" size=\"large\" placeholder=\"Large\" />\n</div>",
      "<Password v-model=\"value\" :feedback=\"false\" fluid />",
      "<Password v-model=\"value\" :feedback=\"false\" variant=\"filled\" />",
      "<Password disabled placeholder=\"Disabled\" />",
      "<Password v-model=\"value1\" :invalid=\"!value1\" placeholder=\"Password\" />\n<Password v-model=\"value2\" :invalid=\"!value2\" variant=\"filled\" placeholder=\"Password\" />",
      "<label for=\"pwd1\">Password</label>\n<Password inputId=\"pwd1\" />\n\n<span id=\"pwd2\">Password</span>\n<Password aria-labelledby=\"pwd2\" />\n\n<Password aria-label=\"Password\"/>"
    ],
    "props": {
      "modelValue": "Nullable<string>",
      "defaultValue": "Nullable<string>",
      "name": "string | undefined",
      "promptLabel": "string | undefined",
      "mediumRegex": "string | RegExp | undefined",
      "strongRegex": "string | RegExp | undefined",
      "weakLabel": "string | undefined",
      "mediumLabel": "string | undefined",
      "strongLabel": "string | undefined",
      "feedback": "boolean | undefined",
      "appendTo": "HintedString<'body' | 'self'> | undefined | HTMLElement",
      "toggleMask": "boolean | undefined",
      "maskIcon": "string | undefined",
      "unmaskIcon": "string | undefined",
      "showClear": "boolean | undefined",
      "size": "HintedString<'small' | 'large'> | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "variant": "HintedString<'outlined' | 'filled'> | undefined | null",
      "placeholder": "string | undefined",
      "required": "boolean | undefined",
      "fluid": "boolean | undefined",
      "autofocus": "boolean | undefined",
      "inputId": "string | undefined",
      "inputStyle": "object | undefined",
      "inputClass": "string | object | undefined",
      "inputProps": "InputHTMLAttributes | undefined",
      "panelId": "string | undefined",
      "panelClass": "string | object | undefined",
      "panelStyle": "object | undefined",
      "panelProps": "HTMLAttributes | undefined",
      "overlayId": "string | undefined",
      "overlayClass": "string | object | undefined",
      "overlayStyle": "object | undefined",
      "overlayProps": "HTMLAttributes | undefined",
      "ariaLabelledby": "string | undefined",
      "ariaLabel": "string | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<PasswordPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "change": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "beforeUnmount",
        "if",
        "onOverlayEnter",
        "onOverlayLeave",
        "onOverlayAfterLeave",
        "alignOverlay",
        "testStrength",
        "onInput",
        "onFocus",
        "onBlur",
        "onKeyUp",
        "setPasswordMeter",
        "checkPasswordStrength",
        "onInvalid",
        "bindScrollListener",
        "unbindScrollListener",
        "bindResizeListener",
        "unbindResizeListener",
        "overlayRef",
        "onMaskToggle",
        "onClearClick",
        "onOverlayClick",
        "inputType",
        "weakText",
        "mediumText",
        "strongText",
        "promptText",
        "isClearIconVisible",
        "overlayUniqueId",
        "containerDataP",
        "meterDataP",
        "overlayDataP"
      ]
    }
  },
  "picklist": {
    "title": "PickList",
    "description": "PickList is used to reorder items between different lists.",
    "examples": [
      "<PickList v-model=\"products\" dataKey=\"id\" breakpoint=\"1400px\">\n    <template #option=\"{ option  }\">\n        {{ option.name }}\n    </template>\n</PickList>",
      "<PickList v-model=\"products\" dataKey=\"id\" breakpoint=\"1400px\" scrollHeight=\"20rem\">\n    <template #option=\"{ option , selected }\">\n        <div class=\"flex flex-wrap p-1 items-center gap-4 w-full\">\n            <img class=\"w-12 shrink-0 rounded\" :src=\"'https://primefaces.org/cdn/primevue/images/product/' + option.image\" :alt=\"option.name\" />\n            <div class=\"flex-1 flex flex-col\">\n                <span class=\"font-medium text-sm\">{{ option.name }}</span>\n                <span :class=\"['text-sm', { 'text-surface-500 dark:text-surface-400': !selected, 'text-inherit': selected }]\">{{ option.category }}</span>\n            </div>\n            <span class=\"font-bold\">${{ option.price }}</span>\n        </div>\n    </template>\n</PickList>",
      "<span id=\"lb\">Options</span>\n<PickList aria-labelledby=\"lb\" />\n\n<PickList aria-label=\"City\" />"
    ],
    "props": {
      "modelValue": "any[][] | undefined",
      "selection": "any[][] | undefined",
      "dataKey": "string | undefined",
      "metaKeySelection": "boolean | undefined",
      "autoOptionFocus": "boolean | undefined",
      "focusOnHover": "boolean | undefined",
      "listStyle": "any | undefined",
      "responsive": "boolean | undefined",
      "breakpoint": "string | undefined",
      "scrollHeight": "string | undefined",
      "striped": "boolean | undefined",
      "showSourceControls": "boolean | undefined",
      "showTargetControls": "boolean | undefined",
      "buttonProps": "object | undefined",
      "moveUpButtonProps": "object | undefined",
      "moveTopButtonProps": "object | undefined",
      "moveDownButtonProps": "object | undefined",
      "moveBottomButtonProps": "object | undefined",
      "moveToTargetProps": "object | undefined",
      "moveAllToTargetProps": "object | undefined",
      "moveToSourceProps": "object | undefined",
      "moveAllToSourceProps": "object | undefined",
      "tabindex": "number | string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<PickListPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'update:selection'": "void",
      "reorder": "void",
      "'selection-change'": "void",
      "'move-to-target'": "void",
      "'move-all-to-target'": "void",
      "'move-to-source'": "void",
      "'move-all-to-source'": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "selection",
        "breakpoint",
        "updated",
        "beforeUnmount",
        "mounted",
        "updateSelection",
        "onChangeSelection",
        "onListFocus",
        "onListBlur",
        "onReorderUpdate",
        "onItemDblClick",
        "moveUp",
        "moveTop",
        "moveDown",
        "moveBottom",
        "moveToTarget",
        "moveAllToTarget",
        "moveToSource",
        "moveAllToSource",
        "onItemClick",
        "if",
        "updateListScroll",
        "initMedia",
        "destroyMedia",
        "bindMediaChangeListener",
        "unbindMediaChangeListener",
        "createStyle",
        "destroyStyle",
        "moveDisabled",
        "moveAllDisabled",
        "idSource",
        "idTarget",
        "sourceList",
        "targetList",
        "moveUpAriaLabel",
        "moveTopAriaLabel",
        "moveDownAriaLabel",
        "moveBottomAriaLabel",
        "moveToTargetAriaLabel",
        "moveAllToTargetAriaLabel",
        "moveToSourceAriaLabel",
        "moveAllToSourceAriaLabel"
      ]
    }
  },
  "popover": {
    "title": "Popover",
    "description": "Popover is a container component that can overlay other components on page.",
    "examples": [
      "<Button type=\"button\" icon=\"pi pi-share-alt\" label=\"Share\" @click=\"toggle\" />\n\n<Popover ref=\"op\">\n    <div class=\"flex flex-col gap-4 w-[25rem]\">\n        <div>\n            <span class=\"font-medium block mb-2\">Share this document</span>\n            <InputGroup>\n                <InputText value=\"https://primevue.org/12323ff26t2g243g423g234gg52hy25XADXAG3\" readonly class=\"w-[25rem]\"></InputText>\n                <InputGroupAddon>\n                    <i class=\"pi pi-copy\"></i>\n                </InputGroupAddon>\n            </InputGroup>\n        </div>\n        <div>\n            <span class=\"font-medium block mb-2\">Invite Member</span>\n            <InputGroup>\n                <InputText disabled />\n                <Button label=\"Invite\" icon=\"pi pi-users\"></Button>\n            </InputGroup>\n        </div>\n        <div>\n            <span class=\"font-medium block mb-2\">Team Members</span>\n            <ul class=\"list-none p-0 m-0 flex flex-col gap-4\">\n                <li v-for=\"member in members\" :key=\"member.name\" class=\"flex items-center gap-2\">\n                    <img :src=\"`https://primefaces.org/cdn/primevue/images/avatar/${member.image}`\" style=\"width: 32px\" />\n                    <div>\n                        <span class=\"font-medium\">{{ member.name }}</span>\n                        <div class=\"text-sm text-surface-500 dark:text-surface-400\">{{ member.email }}</div>\n                    </div>\n                    <div class=\"flex items-center gap-2 text-surface-500 dark:text-surface-400 ml-auto text-sm\">\n                        <span>{{ member.role }}</span>\n                        <i class=\"pi pi-angle-down\"></i>\n                    </div>\n                </li>\n            </ul>\n        </div>\n    </div>\n</Popover>",
      "<Button type=\"button\" :label=\"selectedMember ? selectedMember.name : 'Select Member'\" @click=\"toggle\" class=\"min-w-48\" />\n\n<Popover ref=\"op\">\n    <div class=\"flex flex-col gap-4\">\n        <div>\n            <span class=\"font-medium block mb-2\">Team Members</span>\n            <ul class=\"list-none p-0 m-0 flex flex-col\">\n                <li v-for=\"member in members\" :key=\"member.name\" class=\"flex items-center gap-2 px-2 py-3 hover:bg-emphasis cursor-pointer rounded-border\" @click=\"selectMember(member)\">\n                    <img :src=\"`https://primefaces.org/cdn/primevue/images/avatar/${member.image}`\" style=\"width: 32px\" />\n                    <div>\n                        <span class=\"font-medium\">{{ member.name }}</span>\n                        <div class=\"text-sm text-surface-500 dark:text-surface-400\">{{ member.email }}</div>\n                    </div>\n                </li>\n            </ul>\n        </div>\n    </div>\n</Popover>",
      "<DataTable :value=\"products\" :rows=\"5\" paginator tableStyle=\"min-width: 50rem\">\n    <Column field=\"id\" header=\"Id\" class=\"w-1/6\"></Column>\n    <Column field=\"code\" header=\"Code\" class=\"w-1/6\"></Column>\n    <Column field=\"name\" header=\"Name\" class=\"w-1/6\" bodyClass=\"whitespace-nowrap\"></Column>\n    <Column field=\"price\" header=\"Price\" sortable class=\"w-1/6\">\n        <template #body=\"slotProps\"> $ {{ slotProps.data.price }} </template>\n    </Column>\n    <Column header=\"Image\" class=\"w-1/6\">\n        <template #body=\"slotProps\">\n            <img :src=\"`https://primefaces.org/cdn/primevue/images/product/${slotProps.data.image}`\" :alt=\"slotProps.data.image\" class=\"w-16 shadow-sm\" />\n        </template>\n    </Column>\n    <Column header=\"Details\" class=\"w-1/6\">\n        <template #body=\"slotProps\">\n            <Button type=\"button\" @click=\"displayProduct($event, slotProps.data)\" icon=\"pi pi-search\" severity=\"secondary\" rounded></Button>\n        </template>\n    </Column>\n</DataTable>\n\n<Popover ref=\"op\">\n    <div v-if=\"selectedProduct\" class=\"rounded flex flex-col\">\n        <div class=\"flex justify-center rounded\">\n            <div class=\"relative mx-auto\">\n                <img class=\"rounded w-44 sm:w-64\" :src=\"`https://primefaces.org/cdn/primevue/images/product/${selectedProduct.image}`\" :alt=\"selectedProduct.name\" />\n                <Tag :value=\"selectedProduct.inventoryStatus\" :severity=\"getSeverity(selectedProduct)\" class=\"absolute dark:!bg-surface-900\" style=\"left: 4px; top: 4px\"></Tag>\n            </div>\n        </div>\n        <div class=\"pt-4\">\n            <div class=\"flex flex-row justify-between items-start gap-2 mb-4\">\n                <div>\n                    <span class=\"font-medium text-surface-500 dark:text-surface-400 text-sm\">{{ selectedProduct.category }}</span>\n                    <div class=\"text-lg font-medium mt-1\">{{ selectedProduct.name }}</div>\n                </div>\n                <div class=\"bg-surface-100 p-1\" style=\"border-radius: 30px\">\n                    <div class=\"bg-surface-0 flex items-center gap-2 justify-center py-1 px-2\" style=\"border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)\">\n                        <span class=\"text-surface-900 font-medium text-sm\">{{ selectedProduct.rating }}</span>\n                        <i class=\"pi pi-star-fill text-yellow-500\"></i>\n                    </div>\n                </div>\n            </div>\n            <div class=\"flex gap-2\">\n                <Button icon=\"pi pi-shopping-cart\" :label=\"`Buy Now | \\$${selectedProduct.price}`\" :disabled=\"selectedProduct.inventoryStatus === 'OUTOFSTOCK'\" class=\"flex-auto whitespace-nowrap\" @click=\"hidePopover\"></Button>\n                <Button icon=\"pi pi-heart\" variant=\"outlined\" @click=\"hidePopover\"></Button>\n            </div>\n        </div>\n    </div>\n</Popover>"
    ],
    "props": {
      "dismissable": "boolean",
      "appendTo": "HintedString<'body' | 'self'> | undefined | HTMLElement",
      "baseZIndex": "number",
      "autoZIndex": "boolean",
      "breakpoints": "PopoverBreakpoints",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<PopoverPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean",
      "closeOnEscape": "boolean | undefined"
    },
    "emits": {
      "show": "void",
      "hide": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch"
      ],
      "methods": [
        "data",
        "handler",
        "beforeUnmount",
        "if",
        "mounted",
        "toggle",
        "show",
        "hide",
        "onContentClick",
        "onEnter",
        "onLeave",
        "onAfterLeave",
        "alignOverlay",
        "onContentKeydown",
        "onButtonKeydown",
        "focus",
        "onKeyDown",
        "bindDocumentKeyDownListener",
        "unbindDocumentKeyDownListener",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "bindScrollListener",
        "unbindScrollListener",
        "bindResizeListener",
        "unbindResizeListener",
        "isTargetClicked",
        "containerRef",
        "createStyle",
        "destroyStyle",
        "onOverlayClick"
      ],
      "emits": [
        "show",
        "hide"
      ]
    }
  },
  "portal": {
    "props": {
      "appendTo": "PortalAppendToType",
      "disabled": "boolean | undefined"
    },
    "emits": {},
    "slots": {
      "default": "() => VNode[]"
    },
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "inline"
      ]
    }
  },
  "progressbar": {
    "title": "ProgressBar",
    "description": "ProgressBar is a process status indicator.",
    "examples": [
      "<ProgressBar :value=\"50\"></ProgressBar>",
      "<ProgressBar :value=\"value\"></ProgressBar>",
      "<ProgressBar :value=\"40\"> {{ value }}/100 </ProgressBar>",
      "<ProgressBar mode=\"indeterminate\" style=\"height: 6px\"></ProgressBar>",
      "<span id=\"label_status\" />\n<ProgressBar aria-labelledby=\"label_status\" />\n\n<ProgressBar aria-label=\"Status\" />"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "progressStyle",
        "indeterminate",
        "determinate",
        "dataP"
      ]
    }
  },
  "progressspinner": {
    "title": "ProgressSpinner",
    "description": "ProgressSpinner is a process status indicator.",
    "examples": [
      "<ProgressSpinner />",
      "<ProgressSpinner style=\"width: 50px; height: 50px\" strokeWidth=\"8\" fill=\"transparent\"\n    animationDuration=\".5s\" aria-label=\"Custom ProgressSpinner\" />",
      "<ProgressSpinner aria-label=\"Loading\" />"
    ],
    "props": {
      "strokeWidth": "string | undefined",
      "fill": "string | undefined",
      "animationDuration": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ProgressSpinnerPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "svgStyle"
      ]
    }
  },
  "radiobutton": {
    "title": "RadioButton",
    "description": "RadioButton is an extension to standard radio button element with theming.",
    "examples": [
      "<div class=\"flex flex-wrap gap-4\">\n    <div class=\"flex items-center gap-2\">\n        <RadioButton v-model=\"ingredient\" inputId=\"ingredient1\" name=\"pizza\" value=\"Cheese\" />\n        <label for=\"ingredient1\">Cheese</label>\n    </div>\n    <div class=\"flex items-center gap-2\">\n        <RadioButton v-model=\"ingredient\" inputId=\"ingredient2\" name=\"pizza\" value=\"Mushroom\" />\n        <label for=\"ingredient2\">Mushroom</label>\n    </div>\n    <div class=\"flex items-center gap-2\">\n        <RadioButton v-model=\"ingredient\" inputId=\"ingredient3\" name=\"pizza\" value=\"Pepper\" />\n        <label for=\"ingredient3\">Pepper</label>\n    </div>\n    <div class=\"flex items-center gap-2\">\n        <RadioButton v-model=\"ingredient\" inputId=\"ingredient4\" name=\"pizza\" value=\"Onion\" />\n        <label for=\"ingredient4\">Onion</label>\n    </div>\n</div>",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4\">\n    <div class=\"flex flex-col gap-2\">\n        <RadioButtonGroup name=\"ingredient\" class=\"flex flex-wrap gap-4\">\n            <div class=\"flex items-center gap-2\">\n                <RadioButton inputId=\"cheese\" value=\"Cheese\" />\n                <label for=\"cheese\">Cheese</label>\n            </div>\n            <div class=\"flex items-center gap-2\">\n                <RadioButton inputId=\"mushroom\" value=\"Mushroom\" />\n                <label for=\"mushroom\">Mushroom</label>\n            </div>\n            <div class=\"flex items-center gap-2\">\n                <RadioButton inputId=\"pepper\" value=\"Pepper\" />\n                <label for=\"pepper\">Pepper</label>\n            </div>\n            <div class=\"flex items-center gap-2\">\n                <RadioButton inputId=\"onion\" value=\"Onion\" />\n                <label for=\"onion\">Onion</label>\n            </div>\n        </RadioButtonGroup>\n        <Message v-if=\"$form.ingredient?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.ingredient.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<div v-for=\"category in categories\" :key=\"category.key\" class=\"flex items-center gap-2\">\n    <RadioButton v-model=\"selectedCategory\" :inputId=\"category.key\" name=\"dynamic\" :value=\"category.name\" />\n    <label :for=\"category.key\">{{ category.name }}</label>\n</div>",
      "<RadioButton v-model=\"value\" value=\"1\" variant=\"filled\" />",
      "<div class=\"flex flex-wrap gap-4\">\n    <div class=\"flex items-center gap-2\">\n        <RadioButton v-model=\"size\" inputId=\"size_small\" name=\"size\" value=\"Small\" size=\"small\" />\n        <label for=\"size_small\" class=\"text-sm\">Small</label>\n    </div>\n    <div class=\"flex items-center gap-2\">\n        <RadioButton v-model=\"size\" inputId=\"size_normal\" name=\"size\" value=\"Normal\" />\n        <label for=\"size_normal\">Normal</label>\n    </div>\n    <div class=\"flex items-center gap-2\">\n        <RadioButton v-model=\"size\" inputId=\"size_large\" name=\"size\" value=\"Large\" size=\"large\" />\n        <label for=\"size_large\" class=\"text-lg\">Large</label>\n    </div>\n</div>",
      "<RadioButton v-model=\"value\" value=\"1\" :invalid=\"value === null\" />",
      "<RadioButton v-model=\"value\" :value=\"1\" disabled />\n<RadioButton v-model=\"value\" :value=\"2\" disabled />",
      "<label for=\"rb1\">One</label>\n<RadioButton inputId=\"rb1\" />\n\n<span id=\"rb2\">Two</span>\n<RadioButton aria-labelledby=\"rb2\" />\n\n<RadioButton aria-label=\"Three\" />"
    ],
    "props": {
      "value": "any",
      "modelValue": "any",
      "defaultValue": "any",
      "name": "string | undefined",
      "binary": "boolean",
      "size": "HintedString<'small' | 'large'> | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "variant": "HintedString<'outlined' | 'filled'> | undefined | null",
      "readonly": "boolean | undefined",
      "tabindex": "number | undefined",
      "inputId": "string | undefined",
      "inputStyle": "object | undefined",
      "inputClass": "string | object | undefined",
      "ariaLabelledby": "string | undefined",
      "ariaLabel": "string | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<RadioButtonPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "change": "void",
      "focus": "void",
      "blur": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "getPTOptions",
        "onChange",
        "onFocus",
        "onBlur",
        "groupName",
        "checked",
        "dataP"
      ]
    }
  },
  "radiobuttongroup": {
    "props": {
      "modelValue": "any",
      "defaultValue": "any",
      "name": "string | undefined",
      "invalid": "boolean | undefined",
      "formControl": "any",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<RadioButtonGroupPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void"
    },
    "slots": {
      "default": "() => VNode[]"
    },
    "logic": {
      "vueImports": [
        "watch"
      ],
      "methods": [
        "data",
        "name",
        "mounted"
      ]
    }
  },
  "rating": {
    "title": "Rating",
    "description": "Rating component is a star based selection input.",
    "examples": [
      "<Rating v-model=\"value\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4 w-40\">\n    <div class=\"flex flex-col items-center gap-2\">\n        <Rating name=\"rating\" />\n        <Message v-if=\"$form.rating?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.rating.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<Rating v-model=\"value\" :stars=\"10\" />",
      "<Rating v-model=\"value\">\n    <template #onicon>\n        <img src=\"/images/rating/custom-onicon.png\" height=\"24\" width=\"24\" />\n    </template>\n    <template #officon>\n        <img src=\"/images/rating/custom-officon.png\" height=\"24\" width=\"24\" />\n    </template>\n</Rating>",
      "<Rating v-model=\"value\" readonly />",
      "<Rating v-model=\"value\" disabled />"
    ],
    "props": {
      "modelValue": "number | undefined",
      "defaultValue": "number | undefined",
      "name": "string | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "readonly": "boolean | undefined",
      "stars": "number | undefined",
      "onIcon": "string | undefined",
      "offIcon": "string | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<RatingPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "change": "void",
      "focus": "void",
      "blur": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "data",
        "getPTOptions",
        "onOptionClick",
        "onFocus",
        "onBlur",
        "onChange",
        "onOptionSelect",
        "updateModel",
        "starAriaLabel",
        "dataOption",
        "namex",
        "dataP"
      ]
    }
  },
  "ripple": {
    "title": "Ripple",
    "description": "Ripple directive adds ripple effect to the host element.",
    "examples": [
      "<div v-ripple class=\"ripple-box\">Default</div>",
      "<div v-ripple class=\"box\" style=\"border: 1px solid rgba(75, 175, 80, 0.3); --p-ripple-background: rgba(75, 175, 80, 0.3)\">Green</div>\n<div v-ripple class=\"box\" style=\"border: 1px solid rgba(255, 193, 6, 0.3); --p-ripple-background: rgba(255, 193, 6, 0.3)\">Orange</div>\n<div v-ripple class=\"box\" style=\"border: 1px solid rgba(156, 39, 176, 0.3); --p-ripple-background: rgba(156, 39, 176, 0.3)\">Purple</div>"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "composables": [
        "useDown"
      ],
      "vueImports": [
        "watch"
      ],
      "methods": [
        "_typeof",
        "function",
        "_toConsumableArray",
        "_nonIterableSpread",
        "_unsupportedIterableToArray",
        "_iterableToArray",
        "_arrayWithoutHoles",
        "_arrayLikeToArray",
        "_defineProperty",
        "_toPropertyKey",
        "_toPrimitive",
        "extend",
        "unmounted",
        "bindEvents",
        "unbindEvents",
        "createRipple",
        "remove",
        "onMouseDown",
        "setTimeout",
        "onAnimationEnd",
        "getInk"
      ]
    }
  },
  "row": {
    "props": {
      "unstyled": "boolean",
      "pt": "PassThrough<RowPassThroughOptions<any>>"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "mounted",
        "unmounted"
      ]
    }
  },
  "scrollpanel": {
    "title": "ScrollPanel",
    "description": "ScrollPanel is a cross browser, lightweight and skinnable alternative to native browser scrollbar.",
    "examples": [
      "<ScrollPanel style=\"width: 100%; height: 200px\">\n    <p>\n        Lorem ipsum dolor ...\n    </p>\n</ScrollPanel>",
      "<ScrollPanel\n    style=\"width: 100%; height: 200px\"\n    :dt=\"{\n        bar: {\n            background: '{primary.color}'\n        }\n    }\"\n>\n    ...\n</ScrollPanel>"
    ],
    "props": {
      "step": "number | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ScrollPanelPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {
      "default": "() => VNode[]"
    },
    "logic": {
      "composables": [
        "useDown",
        "useMoveListener",
        "useUpListener",
        "useListeners",
        "useMove",
        "useMoveForXBar",
        "useMoveForYBar",
        "useUp"
      ],
      "vueImports": [
        "ref",
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "updated",
        "beforeUnmount",
        "initialize",
        "calculateContainerHeight",
        "moveBar",
        "if",
        "onYBarMouseDown",
        "onXBarMouseDown",
        "onScroll",
        "onKeyDown",
        "onKeyUp",
        "repeat",
        "setTimer",
        "clearTimer",
        "onDocumentMouseMove",
        "onMouseMoveForXBar",
        "onMouseMoveForYBar",
        "onFocus",
        "onBlur",
        "onDocumentMouseUp",
        "requestAnimationFrame",
        "refresh",
        "scrollTop",
        "timeoutFrame",
        "bindDocumentMouseListeners",
        "unbindDocumentMouseListeners",
        "bindDocumentResizeListener",
        "unbindDocumentResizeListener",
        "contentId"
      ]
    }
  },
  "scrolltop": {
    "title": "ScrollTop",
    "description": "ScrollTop gets displayed after a certain scroll position and used to navigates to the top of the page quickly.",
    "examples": [
      "<ScrollTop />",
      "<ScrollPanel style=\"width: 250px; height: 200px\">\n    <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae et leo duis ut diam. Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing\n        elit ut. Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna. Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris. Semper\n        feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus. Cursus sit amet\n        dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas. Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris. Eget egestas purus viverra accumsan in nisl nisi.\n        Suscipit adipiscing bibendum est ultricies integer. Mattis aliquam faucibus purus in massa tempor nec.\n    </p>\n    <ScrollTop target=\"parent\" :threshold=\"100\" icon=\"pi pi-arrow-up\" :buttonProps=\"{ severity: 'contrast', raised: true, rounded: true }\" />\n</ScrollPanel>"
    ],
    "props": {
      "target": "HintedString<'window' | 'parent'> | undefined",
      "threshold": "number | undefined",
      "icon": "string | undefined",
      "behavior": "string | undefined",
      "buttonProps": "object | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ScrollTopPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "beforeUnmount",
        "onClick",
        "checkVisibility",
        "bindParentScrollListener",
        "bindDocumentScrollListener",
        "unbindParentScrollListener",
        "unbindDocumentScrollListener",
        "onEnter",
        "onAfterLeave",
        "containerRef",
        "scrollTopAriaLabel"
      ]
    }
  },
  "select": {
    "title": "Select",
    "description": "Select is used to choose an item from a collection of options.",
    "examples": [
      "<Select v-model=\"selectedCity\" :options=\"cities\" optionLabel=\"name\" placeholder=\"Select a City\" class=\"w-full md:w-56\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4 w-full md:w-56\">\n    <div class=\"flex flex-col gap-1\">\n        <Select name=\"city.name\" :options=\"cities\" optionLabel=\"name\" placeholder=\"Select a City\" fluid />\n        <Message v-if=\"$form.city?.name?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.city.name.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<Select v-model=\"selectedCity\" :options=\"cities\" optionLabel=\"name\" placeholder=\"Select a City\" checkmark :highlightOnSelect=\"false\" class=\"w-full md:w-56\" />",
      "<Select v-model=\"selectedCity\" editable :options=\"cities\" optionLabel=\"name\" placeholder=\"Select a City\" class=\"w-full md:w-56\" />",
      "<Select v-model=\"selectedCity\" :options=\"groupedCities\" optionLabel=\"label\" optionGroupLabel=\"label\" optionGroupChildren=\"items\" placeholder=\"Select a City\" class=\"w-full md:w-56\">\n    <template #optiongroup=\"slotProps\">\n        <div class=\"flex items-center\">\n            <img :alt=\"slotProps.option.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`mr-2 flag flag-${slotProps.option.code.toLowerCase()}`\" style=\"width: 18px\" />\n            <div>{{ slotProps.option.label }}</div>\n        </div>\n    </template>\n</Select>",
      "<Select v-model=\"selectedCountry\" :options=\"countries\" optionLabel=\"name\" placeholder=\"Select a Country\" class=\"w-full md:w-56\">\n    <template #value=\"slotProps\">\n        <div v-if=\"slotProps.value\" class=\"flex items-center\">\n            <img :alt=\"slotProps.value.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`mr-2 flag flag-${slotProps.value.code.toLowerCase()}`\" style=\"width: 18px\" />\n            <div>{{ slotProps.value.name }}</div>\n        </div>\n        <span v-else>\n            {{ slotProps.placeholder }}\n        </span>\n    </template>\n    <template #option=\"slotProps\">\n        <div class=\"flex items-center\">\n            <img :alt=\"slotProps.option.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`mr-2 flag flag-${slotProps.option.code.toLowerCase()}`\" style=\"width: 18px\" />\n            <div>{{ slotProps.option.name }}</div>\n        </div>\n    </template>\n    <template #dropdownicon>\n        <i class=\"pi pi-map\" />\n    </template>\n    <template #header>\n        <div class=\"font-medium p-3\">Available Countries</div>\n    </template>\n    <template #footer>\n        <div class=\"p-3\">\n            <Button label=\"Add New\" fluid severity=\"secondary\" variant=\"text\" size=\"small\" icon=\"pi pi-plus\" />\n        </div>\n    </template>\n</Select>",
      "<Select v-model=\"selectedCountry\" :options=\"countries\" filter optionLabel=\"name\" placeholder=\"Select a Country\" class=\"w-full md:w-56\">\n    <template #value=\"slotProps\">\n        <div v-if=\"slotProps.value\" class=\"flex items-center\">\n            <img :alt=\"slotProps.value.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`mr-2 flag flag-${slotProps.value.code.toLowerCase()}`\" style=\"width: 18px\" />\n            <div>{{ slotProps.value.name }}</div>\n        </div>\n        <span v-else>\n            {{ slotProps.placeholder }}\n        </span>\n    </template>\n    <template #option=\"slotProps\">\n        <div class=\"flex items-center\">\n            <img :alt=\"slotProps.option.label\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" :class=\"`mr-2 flag flag-${slotProps.option.code.toLowerCase()}`\" style=\"width: 18px\" />\n            <div>{{ slotProps.option.name }}</div>\n        </div>\n    </template>\n</Select>",
      "<Select placeholder=\"Loading...\" loading class=\"w-full md:w-56\" />",
      "<Select v-model=\"selectedItem\" :options=\"items\" optionLabel=\"label\" optionValue=\"value\"\n    :virtualScrollerOptions=\"{ itemSize: 38 }\" placeholder=\"Select Item\" class=\"w-full md:w-56\" />",
      "<Select v-model=\"selectedItem\" :options=\"items\" optionLabel=\"label\" optionValue=\"value\" class=\"w-full md:w-56\"\n    :virtualScrollerOptions=\"{ lazy: true, onLazyLoad: onLazyLoad, itemSize: 38, showLoader: true, loading: loading, delay: 250 }\" placeholder=\"Select Item\" />",
      "<FloatLabel class=\"w-full md:w-56\">\n    <Select v-model=\"value1\" inputId=\"over_label\" :options=\"cities\" optionLabel=\"name\" class=\"w-full\" />\n    <label for=\"over_label\">Over Label</label>\n</FloatLabel>\n\n<FloatLabel class=\"w-full md:w-56\" variant=\"in\">\n    <Select v-model=\"value2\" inputId=\"in_label\" :options=\"cities\" optionLabel=\"name\" class=\"w-full\" variant=\"filled\" />\n    <label for=\"in_label\">In Label</label>\n</FloatLabel>\n\n<FloatLabel class=\"w-full md:w-56\" variant=\"on\">\n    <Select v-model=\"value3\" inputId=\"on_label\" :options=\"cities\" optionLabel=\"name\" class=\"w-full\" />\n    <label for=\"on_label\">On Label</label>\n</FloatLabel>",
      "<IftaLabel>\n    <Select v-model=\"selectedCity\" inputId=\"dd-city\" :options=\"cities\" optionLabel=\"name\" class=\"w-full\" variant=\"filled\" />\n    <label for=\"dd-city\">City</label>\n</IftaLabel>",
      "<Select v-model=\"selectedCity\" :options=\"cities\" showClear optionLabel=\"name\" placeholder=\"Select a City\" class=\"w-full md:w-56\" />",
      "<Select v-model=\"value1\" :options=\"cities\" optionLabel=\"name\" size=\"small\" placeholder=\"Small\" class=\"w-full md:w-56\" />\n<Select v-model=\"value2\" :options=\"cities\" optionLabel=\"name\" placeholder=\"Normal\" class=\"w-full md:w-56\" />\n<Select v-model=\"value3\" :options=\"cities\" optionLabel=\"name\" size=\"large\" placeholder=\"Large\" class=\"w-full md:w-56\" />",
      "<Select v-model=\"selectedCity\" :options=\"cities\" optionLabel=\"name\" placeholder=\"Select a City\" fluid />",
      "<Select v-model=\"selectedCity\" variant=\"filled\" :options=\"cities\" optionLabel=\"name\" placeholder=\"Select a City\" class=\"w-full md:w-56\" />",
      "<Select disabled placeholder=\"Select a City\" class=\"w-full md:w-56\" />",
      "<Select v-model=\"selectedCity1\" :options=\"cities\" optionLabel=\"name\" placeholder=\"Select a City\" :invalid=\"!selectedCity1\" class=\"w-full md:w-56\" />\n<Select v-model=\"selectedCity2\" :options=\"cities\" optionLabel=\"name\" placeholder=\"Select a City\" :invalid=\"!selectedCity2\" class=\"w-full md:w-56\" variant=\"filled\" />",
      "<span id=\"dd1\"></span>Options</span>\n<select aria-labelledby=\"dd1\" />\n\n<select aria-label=\"Options\" />"
    ],
    "props": {
      "modelValue": "any",
      "defaultValue": "any",
      "name": "string | undefined",
      "options": "any[]",
      "optionLabel": "string | ((data: any) => string) | undefined",
      "optionValue": "string | ((data: any) => any) | undefined",
      "optionDisabled": "string | ((data: any) => boolean) | undefined",
      "optionGroupLabel": "string | ((data: any) => string) | undefined",
      "optionGroupChildren": "string | ((data: any) => any[]) | undefined",
      "scrollHeight": "string | undefined",
      "filter": "boolean | undefined",
      "filterPlaceholder": "string | undefined",
      "filterLocale": "string | undefined",
      "filterMatchMode": "HintedString<'contains' | 'startsWith' | 'endsWith'> | undefined",
      "filterFields": "string[] | undefined",
      "editable": "boolean | undefined",
      "placeholder": "string | undefined",
      "size": "HintedString<'small' | 'large'> | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "variant": "HintedString<'outlined' | 'filled'> | undefined | null",
      "dataKey": "string | undefined",
      "showClear": "boolean | undefined",
      "fluid": "boolean | undefined",
      "inputId": "string | undefined",
      "inputStyle": "object | undefined",
      "inputClass": "string | object | undefined",
      "labelId": "string | undefined",
      "labelStyle": "object | undefined",
      "labelClass": "string | object | undefined",
      "panelStyle": "object | undefined",
      "panelClass": "string | object | undefined",
      "overlayStyle": "object | undefined",
      "overlayClass": "string | object | undefined",
      "appendTo": "HintedString<'body' | 'self'> | undefined | HTMLElement",
      "loading": "boolean | undefined",
      "clearIcon": "string | undefined",
      "dropdownIcon": "string | undefined",
      "filterIcon": "string | undefined",
      "loadingIcon": "string | undefined",
      "resetFilterOnHide": "boolean",
      "resetFilterOnClear": "boolean",
      "virtualScrollerOptions": "VirtualScrollerProps",
      "autoOptionFocus": "boolean | undefined",
      "autoFilterFocus": "boolean | undefined",
      "selectOnFocus": "boolean | undefined",
      "focusOnHover": "boolean | undefined",
      "highlightOnSelect": "boolean | undefined",
      "checkmark": "boolean | undefined",
      "filterMessage": "string | undefined",
      "selectionMessage": "string | undefined",
      "emptySelectionMessage": "string | undefined",
      "emptyFilterMessage": "string | undefined",
      "emptyMessage": "string | undefined",
      "tabindex": "number | string | undefined",
      "ariaLabel": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<SelectPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "change": "void",
      "focus": "void",
      "blur": "void",
      "'before-show'": "void",
      "'before-hide'": "void",
      "show": "void",
      "hide": "void",
      "filter": "void"
    },
    "slots": {},
    "logic": {
      "composables": [
        "useMove"
      ],
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "modelValue",
        "options",
        "mounted",
        "updated",
        "beforeUnmount",
        "if",
        "getOptionIndex",
        "getOptionLabel",
        "getOptionValue",
        "getOptionRenderKey",
        "getPTItemOptions",
        "isOptionDisabled",
        "isOptionGroup",
        "getOptionGroupLabel",
        "getOptionGroupChildren",
        "getAriaPosInset",
        "show",
        "hide",
        "onFocus",
        "onBlur",
        "onKeyDown",
        "switch",
        "onEditableInput",
        "onContainerClick",
        "onClearClick",
        "onFirstHiddenFocus",
        "onLastHiddenFocus",
        "onOptionSelect",
        "onOptionMouseMove",
        "onFilterChange",
        "onFilterKeyDown",
        "onFilterBlur",
        "onFilterUpdated",
        "onOverlayClick",
        "onOverlayKeyDown",
        "onArrowDownKey",
        "onArrowUpKey",
        "onArrowLeftKey",
        "onHomeKey",
        "onEndKey",
        "onPageUpKey",
        "onPageDownKey",
        "onEnterKey",
        "onSpaceKey",
        "onEscapeKey",
        "onTabKey",
        "onBackspaceKey",
        "onOverlayEnter",
        "onOverlayAfterEnter",
        "onOverlayLeave",
        "onOverlayAfterLeave",
        "alignOverlay",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "bindScrollListener",
        "unbindScrollListener",
        "bindResizeListener",
        "unbindResizeListener",
        "bindLabelClickListener",
        "unbindLabelClickListener",
        "bindMatchMediaOrientationListener",
        "unbindMatchMediaOrientationListener",
        "hasFocusableElements",
        "isOptionExactMatched",
        "isOptionStartsWith",
        "isValidOption",
        "isValidSelectedOption",
        "isSelected",
        "findFirstOptionIndex",
        "findLastOptionIndex",
        "findNextOptionIndex",
        "findPrevOptionIndex",
        "findSelectedOptionIndex",
        "findFirstFocusedOptionIndex",
        "findLastFocusedOptionIndex",
        "searchOptions",
        "changeFocusedOptionIndex",
        "scrollInView",
        "autoUpdateModel",
        "updateModel",
        "flatOptions",
        "overlayRef",
        "listRef",
        "virtualScrollerRef",
        "visibleOptions",
        "hasSelectedOption",
        "label",
        "editableInputValue",
        "equalityKey",
        "searchFields",
        "filterResultMessageText",
        "filterMessageText",
        "emptyFilterMessageText",
        "emptyMessageText",
        "selectionMessageText",
        "emptySelectionMessageText",
        "selectedMessageText",
        "focusedOptionId",
        "ariaSetSize",
        "isClearIconVisible",
        "virtualScrollerDisabled",
        "containerDataP",
        "labelDataP",
        "dropdownIconDataP",
        "overlayDataP"
      ],
      "emits": [
        "before-show",
        "before-hide",
        "show",
        "hide"
      ]
    }
  },
  "selectbutton": {
    "title": "SelectButton",
    "description": "SelectButton is used to choose single or multiple items from a list using buttons.",
    "examples": [
      "<SelectButton v-model=\"value\" :options=\"options\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4\">\n    <div class=\"flex flex-col gap-1\">\n        <SelectButton name=\"selection\" :options=\"options\" />\n        <Message v-if=\"$form.selection?.invalid\" severity=\"error\">{{ $form.selection.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<SelectButton v-model=\"value\" :options=\"options\" optionLabel=\"name\" multiple aria-labelledby=\"multiple\" />",
      "<SelectButton v-model=\"value\" :options=\"options\" optionLabel=\"value\" dataKey=\"value\" aria-labelledby=\"custom\">\n    <template #option=\"slotProps\">\n        <i :class=\"slotProps.option.icon\"></i>\n    </template>\n</SelectButton>",
      "<SelectButton v-model=\"value1\" :options=\"options\" size=\"small\" />\n<SelectButton v-model=\"value2\" :options=\"options\" />\n<SelectButton v-model=\"value3\" :options=\"options\" size=\"large\" />",
      "<SelectButton v-model=\"value\" :options=\"options\" fluid />",
      "<SelectButton v-model=\"value\" :options=\"options\" disabled />\n<SelectButton v-model=\"value\" :options=\"options2\" optionDisabled=\"constant\" optionLabel=\"name\" />",
      "<SelectButton v-model=\"value\" :options=\"options\" aria-labelledby=\"basic\" allowEmpty :invalid=\"value === null\"  />"
    ],
    "props": {
      "modelValue": "any",
      "defaultValue": "any",
      "name": "string | undefined",
      "options": "any[] | undefined",
      "optionLabel": "string | ((data: any) => string) | undefined",
      "optionValue": "string | ((data: any) => any) | undefined",
      "optionDisabled": "string | ((data: any) => boolean) | undefined",
      "multiple": "boolean | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "fluid": "boolean | undefined",
      "dataKey": "string | undefined",
      "allowEmpty": "boolean | undefined",
      "ariaLabelledby": "string | undefined",
      "size": "HintedString<'small' | 'large'> | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<SelectButtonPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "change": "void",
      "focus": "void",
      "blur": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "getOptionLabel",
        "getOptionValue",
        "getOptionRenderKey",
        "isOptionDisabled",
        "isOptionReadonly",
        "onOptionSelect",
        "if",
        "isSelected",
        "equalityKey",
        "dataP"
      ]
    }
  },
  "sidebar": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "mounted"
      ]
    }
  },
  "skeleton": {
    "title": "Skeleton",
    "description": "Skeleton is a placeholder to display instead of the actual content.",
    "examples": [
      "<h5>Rectangle</h5>\n<Skeleton class=\"mb-2\"></Skeleton>\n<Skeleton width=\"10rem\" class=\"mb-2\"></Skeleton>\n<Skeleton width=\"5rem\" class=\"mb-2\"></Skeleton>\n<Skeleton height=\"2rem\" class=\"mb-2\"></Skeleton>\n<Skeleton width=\"10rem\" height=\"4rem\"></Skeleton>\n\n<h5>Rounded</h5>\n<Skeleton class=\"mb-2\" borderRadius=\"16px\"></Skeleton>\n<Skeleton width=\"10rem\" class=\"mb-2\" borderRadius=\"16px\"></Skeleton>\n<Skeleton width=\"5rem\" borderRadius=\"16px\" class=\"mb-2\"></Skeleton>\n<Skeleton height=\"2rem\" class=\"mb-2\" borderRadius=\"16px\"></Skeleton>\n<Skeleton width=\"10rem\" height=\"4rem\" borderRadius=\"16px\"></Skeleton>\n\n<h5 class=\"mt-4\">Square</h5>\n<Skeleton size=\"2rem\" class=\"mr-2\"></Skeleton>\n<Skeleton size=\"3rem\" class=\"mr-2\"></Skeleton>\n<Skeleton size=\"4rem\" class=\"mr-2\"></Skeleton>\n<Skeleton size=\"5rem\"></Skeleton>\n\n<h5 class=\"mt-4\">Circle</h5>\n<Skeleton shape=\"circle\" size=\"2rem\" class=\"mr-2\"></Skeleton>\n<Skeleton shape=\"circle\" size=\"3rem\" class=\"mr-2\"></Skeleton>\n<Skeleton shape=\"circle\" size=\"4rem\" class=\"mr-2\"></Skeleton>\n<Skeleton shape=\"circle\" size=\"5rem\"></Skeleton>",
      "<div class=\"rounded border border-surface-200 dark:border-surface-700 p-6 bg-surface-0 dark:bg-surface-900\">\n    <div class=\"flex mb-4\">\n        <Skeleton shape=\"circle\" size=\"4rem\" class=\"mr-2\"></Skeleton>\n        <div>\n            <Skeleton width=\"10rem\" class=\"mb-2\"></Skeleton>\n            <Skeleton width=\"5rem\" class=\"mb-2\"></Skeleton>\n            <Skeleton height=\".5rem\"></Skeleton>\n        </div>\n    </div>\n    <Skeleton width=\"100%\" height=\"150px\"></Skeleton>\n    <div class=\"flex justify-between mt-4\">\n        <Skeleton width=\"4rem\" height=\"2rem\"></Skeleton>\n        <Skeleton width=\"4rem\" height=\"2rem\"></Skeleton>\n    </div>\n</div>",
      "<div class=\"rounded border border-surface-200 dark:border-surface-700 p-6 bg-surface-0 dark:bg-surface-900\">\n    <ul class=\"m-0 p-0 list-none\">\n        <li class=\"mb-4\">\n            <div class=\"flex\">\n                <Skeleton shape=\"circle\" size=\"4rem\" class=\"mr-2\"></Skeleton>\n                <div class=\"self-center\" style=\"flex: 1\">\n                    <Skeleton width=\"100%\" class=\"mb-2\"></Skeleton>\n                    <Skeleton width=\"75%\"></Skeleton>\n                </div>\n            </div>\n        </li>\n        <li class=\"mb-4\">\n            <div class=\"flex\">\n                <Skeleton shape=\"circle\" size=\"4rem\" class=\"mr-2\"></Skeleton>\n                <div class=\"self-center\" style=\"flex: 1\">\n                    <Skeleton width=\"100%\" class=\"mb-2\"></Skeleton>\n                    <Skeleton width=\"75%\"></Skeleton>\n                </div>\n            </div>\n        </li>\n        <li class=\"mb-4\">\n            <div class=\"flex\">\n                <Skeleton shape=\"circle\" size=\"4rem\" class=\"mr-2\"></Skeleton>\n                <div class=\"self-center\" style=\"flex: 1\">\n                    <Skeleton width=\"100%\" class=\"mb-2\"></Skeleton>\n                    <Skeleton width=\"75%\"></Skeleton>\n                </div>\n            </div>\n        </li>\n        <li>\n            <div class=\"flex\">\n                <Skeleton shape=\"circle\" size=\"4rem\" class=\"mr-2\"></Skeleton>\n                <div class=\"self-center\" style=\"flex: 1\">\n                    <Skeleton width=\"100%\" class=\"mb-2\"></Skeleton>\n                    <Skeleton width=\"75%\"></Skeleton>\n                </div>\n            </div>\n        </li>\n    </ul>\n</div>",
      "<DataTable :value=\"products\">\n    <Column field=\"code\" header=\"Code\">\n        <template #body>\n            <Skeleton></Skeleton>\n        </template>\n    </Column>\n    <Column field=\"name\" header=\"Name\">\n        <template #body>\n            <Skeleton></Skeleton>\n        </template>\n    </Column>\n    <Column field=\"category\" header=\"Category\">\n        <template #body>\n            <Skeleton></Skeleton>\n        </template>\n    </Column>\n    <Column field=\"quantity\" header=\"Quantity\">\n        <template #body>\n            <Skeleton></Skeleton>\n        </template>\n    </Column>\n</DataTable>"
    ],
    "props": {
      "shape": "HintedString<'rectangle' | 'circle'> | undefined",
      "size": "string | undefined",
      "width": "string | undefined",
      "height": "string | undefined",
      "borderRadius": "string | undefined",
      "animation": "HintedString<'wave' | 'none'> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<SkeletonPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "containerStyle",
        "dataP"
      ]
    }
  },
  "slider": {
    "title": "Slider",
    "description": "Slider is a component to provide input with a drag handle.",
    "examples": [
      "<Slider v-model=\"value\" class=\"w-56\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4 w-full sm:w-56\">\n    <div class=\"flex flex-col gap-4\">\n        <Slider name=\"slider\" />\n        <Message v-if=\"$form.slider?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.slider.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<InputText v-model.number=\"value\" />\n<Slider v-model=\"value\" />",
      "<Slider v-model=\"value\" :step=\"20\" class=\"w-56\" />",
      "<Slider v-model=\"value\" range class=\"w-56\" />",
      "<img alt=\"user header\" class=\"w-full md:w-80 rounded mb-6\" src=\"https://primefaces.org/cdn/primevue/images/card-vue.jpg\" :style=\"filterStyle\" />\n<SelectButton v-model=\"filter\" :options=\"filterOptions\" optionLabel=\"label\" optionValue=\"value\" class=\"mb-4\" />\n<Slider v-model=\"filterValues[filter]\" class=\"w-56\" :min=\"0\" :max=\"200\" />",
      "<Slider v-model=\"value\" orientation=\"vertical\" class=\"h-56\" />",
      "<span id=\"label_number\">Number</span>\n<Slider aria-labelledby=\"label_number\" />\n\n<Slider aria-label=\"Number\" />"
    ],
    "props": {
      "modelValue": "number | number[] | undefined",
      "defaultValue": "number | number[] | undefined",
      "name": "string | undefined",
      "min": "number | undefined",
      "max": "number | undefined",
      "orientation": "HintedString<'horizontal' | 'vertical'> | undefined",
      "step": "number | undefined",
      "range": "boolean | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "tabindex": "number | undefined",
      "ariaLabelledby": "string | undefined",
      "ariaLabel": "string | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<SliderPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "change": "void",
      "slideend": "void"
    },
    "slots": {},
    "logic": {
      "composables": [
        "useDown"
      ],
      "vueImports": [
        "computed"
      ],
      "methods": [
        "beforeUnmount",
        "updateDomData",
        "setValue",
        "if",
        "updateModel",
        "onDragStart",
        "onDrag",
        "onDragEnd",
        "onBarClick",
        "onMouseDown",
        "onKeyDown",
        "onBlur",
        "decrementValue",
        "incrementValue",
        "bindDragListeners",
        "unbindDragListeners",
        "rangeStyle",
        "handleStyle",
        "rangeStartHandleStyle",
        "rangeEndHandleStyle",
        "value",
        "horizontal",
        "vertical",
        "handlePosition",
        "rangeStartPosition",
        "rangeEndPosition",
        "dataP"
      ]
    }
  },
  "speeddial": {
    "title": "Speed Dial",
    "description": "When pressed, a floating action button can display multiple primary actions that can be performed on a page.",
    "examples": [
      "<SpeedDial :model=\"items\" direction=\"up\" style=\"position: absolute; left: calc(50% - 2rem); bottom: 0\" />\n<SpeedDial :model=\"items\" direction=\"down\" style=\"position: absolute; left: calc(50% - 2rem); top: 0\" />\n<SpeedDial :model=\"items\" direction=\"left\" style=\"position: absolute; top: calc(50% - 2rem); right: 0\" />\n<SpeedDial :model=\"items\" direction=\"right\" style=\"position: absolute; top: calc(50% - 2rem); left: 0\" />",
      "<SpeedDial :model=\"items\" :radius=\"80\" type=\"circle\" :style=\"{ position: 'absolute' }\" :buttonProps=\"{ severity: 'warn', rounded: true }\" />",
      "<SpeedDial :model=\"items\" :radius=\"80\" type=\"semi-circle\" direction=\"up\" style=\"position: absolute; left: calc(50% - 2rem); bottom: 0\" />\n<SpeedDial :model=\"items\" :radius=\"80\" type=\"semi-circle\" direction=\"down\" style=\"position: absolute; left: calc(50% - 2rem); top: 0\" />\n<SpeedDial :model=\"items\" :radius=\"80\" type=\"semi-circle\" direction=\"left\" style=\"position: absolute; top: calc(50% - 2rem); right: 0\" />\n<SpeedDial :model=\"items\" :radius=\"80\" type=\"semi-circle\" direction=\"right\" style=\"position: absolute; top: calc(50% - 2rem); left: 0\" />",
      "<SpeedDial :model=\"items\" :radius=\"120\" type=\"quarter-circle\" direction=\"up-left\" :style=\"{ position: 'absolute', right: 0, bottom: 0 }\" />\n<SpeedDial :model=\"items\" :radius=\"120\" type=\"quarter-circle\" direction=\"up-right\" :style=\"{ position: 'absolute', left: 0, bottom: 0 }\" />\n<SpeedDial :model=\"items\" :radius=\"120\" type=\"quarter-circle\" direction=\"down-left\" :style=\"{ position: 'absolute', right: 0, top: 0 }\" />\n<SpeedDial :model=\"items\" :radius=\"120\" type=\"quarter-circle\" direction=\"down-right\" :style=\"{ position: 'absolute', left: 0, top: 0 }\" />",
      "<SpeedDial :model=\"items\" direction=\"up\" :style=\"{ position: 'absolute', right: 0, bottom: 0 }\" :buttonProps=\"{ severity: 'help', rounded: true }\" :tooltipOptions=\"{ position: 'left' }\" />\n<SpeedDial :model=\"items\" direction=\"up\" :style=\"{ position: 'absolute', left: 0, bottom: 0 }\" :buttonProps=\"{ severity: 'danger', rounded: true }\" :tooltipOptions=\"{ position: 'right' }\" />",
      "<SpeedDial :model=\"items\" direction=\"up\" mask :style=\"{ position: 'absolute', right: '1rem', bottom: '1rem' }\" />",
      "<SpeedDial :model=\"items\" direction=\"up\" :transitionDelay=\"80\" :style=\"{ position: 'absolute' }\" pt:menuitem=\"m-2\">\n    <template #button=\"{ toggleCallback }\">\n        <Button variant=\"outlined\" class=\"border\" @click=\"toggleCallback\">\n            <svg width=\"35\" height=\"40\" viewBox=\"0 0 35 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"...\" fill=\"var(--p-primary-color)\" />\n                <path d=\"...\" fill=\"var(--p-text-color)\" />\n            </svg>\n        </Button>\n    </template>\n    <template #item=\"{ item, toggleCallback }\">\n        <div class=\"flex flex-col items-center justify-between gap-2 p-2 border rounded border-surface-200 dark:border-surface-700 w-20 cursor-pointer\" @click=\"toggleCallback\">\n            <span :class=\"item.icon\" />\n            <span>\n                {{ item.label }}\n            </span>\n        </div>\n    </template>\n</SpeedDial>",
      "<SpeedDial aria-label=\"Options\" />"
    ],
    "props": {
      "model": "MenuItem[] | undefined",
      "visible": "boolean | undefined",
      "direction": "HintedString<'up' | 'down' | 'left' | 'right' | 'up-left' | 'up-right' | 'down-left' | 'down-right'> | undefined",
      "transitionDelay": "number | undefined",
      "type": "HintedString<'linear' | 'circle' | 'semi-circle' | 'quarter-circle'> | undefined",
      "radius": "number | undefined",
      "mask": "boolean | undefined",
      "disabled": "boolean | undefined",
      "hideOnClickOutside": "boolean | undefined",
      "buttonClass": "any",
      "maskStyle": "any",
      "maskClass": "string | undefined",
      "showIcon": "string | undefined",
      "hideIcon": "string | undefined",
      "rotateAnimation": "boolean | undefined",
      "class": "any",
      "style": "any",
      "tooltipOptions": "SpeedDialTooltipOptions",
      "buttonProps": "object | undefined",
      "actionButtonProps": "object | undefined",
      "ariaLabel": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<SpeedDialPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "click": "void",
      "show": "void",
      "hide": "void",
      "focus": "void",
      "blur": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "visible",
        "mounted",
        "if",
        "beforeUnmount",
        "getPTOptions",
        "onFocus",
        "onBlur",
        "onItemClick",
        "onClick",
        "show",
        "hide",
        "calculateTransitionDelay",
        "onTogglerKeydown",
        "onKeyDown",
        "onTogglerArrowUp",
        "onTogglerArrowDown",
        "onEnterKey",
        "onEscapeKey",
        "onArrowUp",
        "onArrowDown",
        "onArrowLeft",
        "onArrowRight",
        "onEndKey",
        "onHomeKey",
        "navigateNextItem",
        "navigatePrevItem",
        "changeFocusedOptionIndex",
        "findPrevOptionIndex",
        "findNextOptionIndex",
        "calculatePointStyle",
        "getItemStyle",
        "bindDocumentClickListener",
        "unbindDocumentClickListener",
        "isOutsideClicked",
        "isItemVisible",
        "isItemActive",
        "containerRef",
        "listRef",
        "containerClass",
        "focusedOptionId"
      ],
      "emits": [
        "show",
        "hide"
      ]
    }
  },
  "splitbutton": {
    "title": "SplitButton",
    "description": "SplitButton groups a set of commands in an overlay with a default command.",
    "examples": [
      "<SplitButton label=\"Save\" @click=\"save\" :model=\"items\" />",
      "<SplitButton label=\"Save\" icon=\"pi pi-check\" dropdownIcon=\"pi pi-cog\" @click=\"save\" :model=\"items\" />",
      "<SplitButton label=\"Save\" @click=\"save\" :model=\"items\" />",
      "<SplitButton label=\"Save\" :model=\"items\" @click=\"save\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" severity=\"secondary\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" severity=\"success\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" severity=\"info\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" severity=\"warn\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" severity=\"help\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" severity=\"danger\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" severity=\"contrast\"></SplitButton>",
      "<SplitButton label=\"Save\" @click=\"save\" :model=\"items\" disabled />",
      "<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised severity=\"secondary\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised severity=\"success\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised severity=\"info\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised severity=\"warn\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised severity=\"help\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised severity=\"danger\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised severity=\"contrast\"></SplitButton>",
      "<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" rounded></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" rounded severity=\"secondary\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" rounded severity=\"success\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" rounded severity=\"info\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" rounded severity=\"warn\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" rounded severity=\"help\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" rounded severity=\"danger\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" rounded severity=\"contrast\"></SplitButton>",
      "<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" text></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" text severity=\"secondary\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" text severity=\"success\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" text severity=\"info\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" text severity=\"warn\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" text severity=\"help\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" text severity=\"danger\"></SplitButton>",
      "<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised text></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised text severity=\"secondary\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised text severity=\"success\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised text severity=\"info\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised text severity=\"warn\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised text severity=\"help\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" raised text severity=\"danger\"></SplitButton>",
      "<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" outlined></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" outlined severity=\"secondary\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" outlined severity=\"success\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" outlined severity=\"info\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" outlined severity=\"warn\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" outlined severity=\"help\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" outlined severity=\"danger\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" @click=\"save\" outlined severity=\"contrast\"></SplitButton>",
      "<SplitButton label=\"Save\" :model=\"items\" icon=\"pi pi-plus\" size=\"small\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" icon=\"pi pi-plus\"></SplitButton>\n<SplitButton label=\"Save\" :model=\"items\" icon=\"pi pi-plus\" size=\"large\"></SplitButton>",
      "<SplitButton :model=\"items\" @click=\"save\" severity=\"contrast\">\n    <span class=\"flex items-center font-bold\">\n        <img alt=\"logo\" src=\"https://primefaces.org/cdn/primevue/images/logo.svg\" style=\"height: 1rem; margin-right: 0.5rem\" />\n        <span>PrimeVue</span>\n    </span>\n</SplitButton>",
      "<SplitButton :buttonProps=\"{'aria-label': 'Default Action'}\" :menuButtonProps=\"{'aria-label': 'More Options'}\" />"
    ],
    "props": {
      "label": "string | undefined",
      "icon": "string | undefined",
      "model": "MenuItem[] | undefined",
      "autoZIndex": "boolean | undefined",
      "baseZIndex": "number | undefined",
      "appendTo": "HintedString<'body' | 'self'> | undefined | HTMLElement",
      "disabled": "boolean | undefined",
      "fluid": "boolean | undefined",
      "class": "any | undefined",
      "style": "any | undefined",
      "buttonProps": "ButtonHTMLAttributes | undefined",
      "menuButtonProps": "ButtonHTMLAttributes | undefined",
      "menuButtonIcon": "string | undefined",
      "dropdownIcon": "string | undefined",
      "severity": "HintedString<'secondary' | 'success' | 'info' | 'warn' | 'help' | 'danger' | 'contrast'> | undefined",
      "raised": "boolean | undefined",
      "rounded": "boolean | undefined",
      "text": "boolean | undefined",
      "outlined": "boolean | undefined",
      "size": "HintedString<'small' | 'large'> | undefined",
      "plain": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<SplitButtonPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "click": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "onDropdownButtonClick",
        "onDropdownKeydown",
        "onDefaultButtonClick",
        "containerClass",
        "hasFluid"
      ]
    }
  },
  "splitter": {
    "title": "Splitter",
    "description": "Splitter is utilized to separate and resize panels.",
    "examples": [
      "<Splitter style=\"height: 300px\">\n    <SplitterPanel class=\"flex items-center justify-center\"> Panel 1 </SplitterPanel>\n    <SplitterPanel class=\"flex items-center justify-center\"> Panel 2 </SplitterPanel>\n</Splitter>",
      "<Splitter style=\"height: 300px\">\n    <SplitterPanel class=\"flex items-center justify-center\" :size=\"25\" :minSize=\"10\"> Panel 1 </SplitterPanel>\n    <SplitterPanel class=\"flex items-center justify-center\" :size=\"75\"> Panel 2 </SplitterPanel>\n</Splitter>",
      "<Splitter style=\"height: 300px\" layout=\"vertical\">\n    <SplitterPanel class=\"flex items-center justify-center\"> Panel 1 </SplitterPanel>\n    <SplitterPanel class=\"flex items-center justify-center\"> Panel 2 </SplitterPanel>\n</Splitter>",
      "<Splitter style=\"height: 300px\">\n    <SplitterPanel class=\"flex items-center justify-center\" :size=\"20\" :minSize=\"10\"> Panel 1 </SplitterPanel>\n    <SplitterPanel :size=\"80\">\n        <Splitter layout=\"vertical\">\n            <SplitterPanel class=\"flex items-center justify-center\" :size=\"15\"> Panel 2 </SplitterPanel>\n            <SplitterPanel :size=\"85\">\n                <Splitter>\n                    <SplitterPanel class=\"flex items-center justify-center\" :size=\"20\"> Panel 3 </SplitterPanel>\n                    <SplitterPanel class=\"flex items-center justify-center\" :size=\"80\"> Panel 4 </SplitterPanel>\n                </Splitter>\n            </SplitterPanel>\n        </Splitter>\n    </SplitterPanel>\n</Splitter>"
    ],
    "props": {
      "layout": "HintedString<'horizontal' | 'vertical'> | undefined",
      "gutterSize": "number | undefined",
      "stateKey": "string | undefined",
      "stateStorage": "HintedString<'local' | 'session'> | undefined",
      "step": "number | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<SplitterPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "resizestart": "void",
      "resize": "void",
      "resizeend": "void"
    },
    "slots": {},
    "logic": {
      "composables": [
        "useDown",
        "useMoveListener",
        "useUpListener",
        "useListeners"
      ],
      "vueImports": [
        "ref",
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "beforeUnmount",
        "isSplitterPanel",
        "initializePanels",
        "if",
        "onResizeStart",
        "onResize",
        "onResizeEnd",
        "repeat",
        "setTimer",
        "clearTimer",
        "onGutterKeyUp",
        "onGutterKeyDown",
        "onGutterMouseDown",
        "onGutterTouchStart",
        "onGutterTouchMove",
        "onGutterTouchEnd",
        "bindMouseListeners",
        "bindTouchListeners",
        "validateResize",
        "unbindMouseListeners",
        "unbindTouchListeners",
        "clear",
        "isStateful",
        "getStorage",
        "saveState",
        "restoreState",
        "resetState",
        "panels",
        "gutterStyle",
        "horizontal",
        "getPTOptions",
        "prevPanelMinSize",
        "nextPanelMinSize",
        "dataP"
      ]
    }
  },
  "splitterpanel": {
    "props": {
      "size": "number | undefined",
      "minSize": "number | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<SplitterPanelPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {
      "default": "() => VNode[]"
    },
    "logic": {
      "vueImports": [
        "ref",
        "computed"
      ],
      "methods": [
        "data",
        "isNested",
        "getPTOptions"
      ]
    }
  },
  "step": {
    "props": {
      "value": "string | number | undefined",
      "disabled": "boolean | undefined",
      "as": "string | Component | undefined",
      "asChild": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<StepPassThroughOptions>",
      "ptOptions": "PassThroughOptions"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "updated",
        "getPTOptions",
        "onStepClick",
        "active",
        "activeValue",
        "isStepDisabled",
        "id",
        "ariaControls",
        "a11yAttrs",
        "dataP"
      ]
    }
  },
  "stepitem": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "isActive"
      ]
    }
  },
  "steplist": {
    "props": {
      "dt": "DesignToken<any>",
      "pt": "PassThrough<StepListPassThroughOptions>",
      "ptOptions": "PassThroughOptions"
    },
    "emits": {},
    "slots": {}
  },
  "steppanel": {
    "props": {
      "value": "string | number | undefined",
      "as": "string | Component | undefined",
      "asChild": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<StepPanelPassThroughOptions>",
      "ptOptions": "PassThroughOptions"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "getPTOptions",
        "updateValue",
        "active",
        "isVertical",
        "activeValue",
        "id",
        "ariaControls",
        "a11yAttrs",
        "dataP"
      ]
    }
  },
  "steppanels": {
    "props": {
      "dt": "DesignToken<any>",
      "pt": "PassThrough<StepPanelsPassThroughOptions>",
      "ptOptions": "PassThroughOptions"
    },
    "emits": {},
    "slots": {}
  },
  "stepper": {
    "title": "Stepper",
    "description": "The Stepper component displays a wizard-like workflow by guiding users through the multi-step progression.",
    "examples": [
      "<Stepper value=\"1\">\n    <StepList>\n        <Step value=\"1\">Header I</Step>\n        <Step value=\"2\">Header II</Step>\n        <Step value=\"3\">Header III</Step>\n    </StepList>\n    <StepPanels>\n        <StepPanel v-slot=\"{ activateCallback }\" value=\"1\">\n            <div class=\"flex flex-col h-48\">\n                <div class=\"border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium\">Content I</div>\n            </div>\n            <div class=\"flex pt-6 justify-end\">\n                <Button label=\"Next\" icon=\"pi pi-arrow-right\" iconPos=\"right\" @click=\"activateCallback('2')\" />\n            </div>\n        </StepPanel>\n        <StepPanel v-slot=\"{ activateCallback }\" value=\"2\">\n            <div class=\"flex flex-col h-48\">\n                <div class=\"border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium\">Content II</div>\n            </div>\n            <div class=\"flex pt-6 justify-between\">\n                <Button label=\"Back\" severity=\"secondary\" icon=\"pi pi-arrow-left\" @click=\"activateCallback('1')\" />\n                <Button label=\"Next\" icon=\"pi pi-arrow-right\" iconPos=\"right\" @click=\"activateCallback('3')\" />\n            </div>\n        </StepPanel>\n        <StepPanel v-slot=\"{ activateCallback }\" value=\"3\">\n            <div class=\"flex flex-col h-48\">\n                <div class=\"border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium\">Content III</div>\n            </div>\n            <div class=\"pt-6\">\n                <Button label=\"Back\" severity=\"secondary\" icon=\"pi pi-arrow-left\" @click=\"activateCallback('2')\" />\n            </div>\n        </StepPanel>\n    </StepPanels>\n</Stepper>",
      "<Stepper value=\"1\">\n    <StepItem value=\"1\">\n        <Step>Header I</Step>\n        <StepPanel v-slot=\"{ activateCallback }\">\n            <div class=\"flex flex-col h-48\">\n                <div class=\"border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium\">Content I</div>\n            </div>\n             <div class=\"py-6\">\n                <Button label=\"Next\" @click=\"activateCallback('2')\" />\n            </div>\n        </StepPanel>\n    </StepItem>\n    <StepItem value=\"2\">\n        <Step>Header II</Step>\n        <StepPanel v-slot=\"{ activateCallback }\">\n            <div class=\"flex flex-col h-48\">\n                <div class=\"border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium\">Content II</div>\n            </div>\n            <div class=\"flex py-6 gap-2\">\n                <Button label=\"Back\" severity=\"secondary\" @click=\"activateCallback('1')\" />\n                <Button label=\"Next\" @click=\"activateCallback('3')\" />\n            </div>\n        </StepPanel>\n    </StepItem>\n    <StepItem value=\"3\">\n        <Step>Header III</Step>\n        <StepPanel v-slot=\"{ activateCallback }\">\n            <div class=\"flex flex-col h-48\">\n                <div class=\"border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium\">Content III</div>\n            </div>\n             <div class=\"py-6\">\n                <Button label=\"Back\" severity=\"secondary\" @click=\"activateCallback('2')\" />\n            </div>\n        </StepPanel>\n    </StepItem>\n</Stepper>",
      "<Stepper value=\"1\" linear>\n    <StepList>\n        <Step value=\"1\">Header I</Step>\n        <Step value=\"2\">Header II</Step>\n        <Step value=\"3\">Header III</Step>\n    </StepList>\n    <StepPanels>\n        <StepPanel v-slot=\"{ activateCallback }\" value=\"1\">\n            <div class=\"flex flex-col h-48\">\n                <div class=\"border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium\">Content I</div>\n            </div>\n            <div class=\"flex pt-6 justify-end\">\n                <Button label=\"Next\" icon=\"pi pi-arrow-right\" @click=\"activateCallback('2')\" />\n            </div>\n        </StepPanel>\n        <StepPanel v-slot=\"{ activateCallback }\" value=\"2\">\n            <div class=\"flex flex-col h-48\">\n                <div class=\"border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium\">Content II</div>\n            </div>\n            <div class=\"flex pt-6 justify-between\">\n                <Button label=\"Back\" severity=\"secondary\" icon=\"pi pi-arrow-left\" @click=\"activateCallback('1')\" />\n                <Button label=\"Next\" icon=\"pi pi-arrow-right\" iconPos=\"right\" @click=\"activateCallback('3')\" />\n            </div>\n        </StepPanel>\n        <StepPanel v-slot=\"{ activateCallback }\" value=\"3\">\n            <div class=\"flex flex-col h-48\">\n                <div class=\"border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium\">Content III</div>\n            </div>\n            <div class=\"pt-6\">\n                <Button label=\"Back\" severity=\"secondary\" icon=\"pi pi-arrow-left\" @click=\"activateCallback('2')\" />\n            </div>\n        </StepPanel>\n    </StepPanels>\n</Stepper>",
      "<Stepper value=\"1\" class=\"basis-[50rem]\">\n    <StepList>\n        <Step value=\"1\">Design</Step>\n        <Step value=\"2\">Development</Step>\n        <Step value=\"3\">QA</Step>\n    </StepList>\n</Stepper>",
      "<Stepper v-model:value=\"activeStep\" class=\"basis-[40rem]\">\n    <StepList>\n        <Step v-slot=\"{ activateCallback, value, a11yAttrs }\" asChild :value=\"1\">\n            <div class=\"flex flex-row flex-auto gap-2\" v-bind=\"a11yAttrs.root\">\n                <button class=\"bg-transparent border-0 inline-flex flex-col gap-2\" @click=\"activateCallback\" v-bind=\"a11yAttrs.header\">\n                    <span\n                        :class=\"[\n                            'rounded-full border-2 w-12 h-12 inline-flex items-center justify-center',\n                            { 'bg-primary text-primary-contrast border-primary': value <= activeStep, 'border-surface-200 dark:border-surface-700': value > activeStep }\n                        ]\"\n                    >\n                        <i class=\"pi pi-user\" />\n                    </span>\n                </button>\n                <Divider />\n            </div>\n        </Step>\n        <Step v-slot=\"{ activateCallback, value, a11yAttrs }\" asChild :value=\"2\">\n            <div class=\"flex flex-row flex-auto gap-2 pl-2\" v-bind=\"a11yAttrs.root\">\n                <button class=\"bg-transparent border-0 inline-flex flex-col gap-2\" @click=\"activateCallback\" v-bind=\"a11yAttrs.header\">\n                    <span\n                        :class=\"[\n                            'rounded-full border-2 w-12 h-12 inline-flex items-center justify-center',\n                            { 'bg-primary text-primary-contrast border-primary': value <= activeStep, 'border-surface-200 dark:border-surface-700': value > activeStep }\n                        ]\"\n                    >\n                        <i class=\"pi pi-star\" />\n                    </span>\n                </button>\n                <Divider />\n            </div>\n        </Step>\n        <Step v-slot=\"{ activateCallback, value, a11yAttrs }\" asChild :value=\"3\">\n            <div class=\"flex flex-row pl-2\" v-bind=\"a11yAttrs.root\">\n                <button class=\"bg-transparent border-0 inline-flex flex-col gap-2\" @click=\"activateCallback\" v-bind=\"a11yAttrs.header\">\n                    <span\n                        :class=\"[\n                            'rounded-full border-2 w-12 h-12 inline-flex items-center justify-center',\n                            { 'bg-primary text-primary-contrast border-primary': value <= activeStep, 'border-surface-200 dark:border-surface-700': value > activeStep }\n                        ]\"\n                    >\n                        <i class=\"pi pi-id-card\" />\n                    </span>\n                </button>\n            </div>\n        </Step>\n    </StepList>\n    <StepPanels>\n        <StepPanel v-slot=\"{ activateCallback }\" :value=\"1\">\n            <div class=\"flex flex-col gap-2 mx-auto\" style=\"min-height: 16rem; max-width: 20rem\">\n                <div class=\"text-center mt-4 mb-4 text-xl font-semibold\">Create your account</div>\n                <div class=\"field\">\n                    <InputText id=\"input\" v-model=\"name\" type=\"text\" placeholder=\"Name\" fluid />\n                </div>\n                <div class=\"field\">\n                    <InputText id=\"email\" v-model=\"email\" type=\"email\" placeholder=\"Email\" fluid />\n                </div>\n                <div class=\"field\">\n                    <Password v-model=\"password\" placeholder=\"Password\" fluid />\n                </div>\n            </div>\n            <div class=\"flex pt-6 justify-end\">\n                <Button label=\"Next\" icon=\"pi pi-arrow-right\" iconPos=\"right\" @click=\"activateCallback(2)\" />\n            </div>\n        </StepPanel>\n        <StepPanel v-slot=\"{ activateCallback }\" :value=\"2\">\n            <div class=\"flex flex-col gap-2 mx-auto\" style=\"min-height: 16rem; max-width: 24rem\">\n                <div class=\"text-center mt-4 mb-4 text-xl font-semibold\">Choose your interests</div>\n                <div class=\"flex flex-wrap justify-center gap-4\">\n                    <ToggleButton v-model=\"option1\" onLabel=\"Nature\" offLabel=\"Nature\" />\n                    <ToggleButton v-model=\"option2\" onLabel=\"Art\" offLabel=\"Art\" />\n                    <ToggleButton v-model=\"option3\" onLabel=\"Music\" offLabel=\"Music\" />\n                    <ToggleButton v-model=\"option4\" onLabel=\"Design\" offLabel=\"Design\" />\n                    <ToggleButton v-model=\"option5\" onLabel=\"Photography\" offLabel=\"Photography\" />\n                    <ToggleButton v-model=\"option6\" onLabel=\"Movies\" offLabel=\"Movies\" />\n                    <ToggleButton v-model=\"option7\" onLabel=\"Sports\" offLabel=\"Sports\" />\n                    <ToggleButton v-model=\"option8\" onLabel=\"Gaming\" offLabel=\"Gaming\" />\n                    <ToggleButton v-model=\"option9\" onLabel=\"Traveling\" offLabel=\"Traveling\" />\n                    <ToggleButton v-model=\"option10\" onLabel=\"Dancing\" offLabel=\"Dancing\" />\n                </div>\n            </div>\n            <div class=\"flex pt-6 justify-between\">\n                <Button label=\"Back\" severity=\"secondary\" icon=\"pi pi-arrow-left\" @click=\"activateCallback(1)\" />\n                <Button label=\"Next\" icon=\"pi pi-arrow-right\" iconPos=\"right\" @click=\"activateCallback(3)\" />\n            </div>\n        </StepPanel>\n        <StepPanel v-slot=\"{ activateCallback }\" :value=\"3\">\n            <div class=\"flex flex-col gap-2 mx-auto\" style=\"min-height: 16rem; max-width: 24rem\">\n                <div class=\"text-center mt-4 mb-4 text-xl font-semibold\">Account created successfully</div>\n                <div class=\"flex justify-center\">\n                    <img alt=\"logo\" src=\"https://primefaces.org/cdn/primevue/images/stepper/content.svg\" />\n                </div>\n            </div>\n            <div class=\"flex pt-6 justify-start\">\n                <Button label=\"Back\" severity=\"secondary\" icon=\"pi pi-arrow-left\" @click=\"activateCallback(2)\" />\n            </div>\n        </StepPanel>\n    </StepPanels>\n</Stepper>"
    ],
    "props": {
      "value": "string | number | undefined",
      "linear": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<StepperPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:value'": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "watch"
      ],
      "methods": [
        "data",
        "value",
        "updateValue",
        "isStepActive",
        "isStepDisabled"
      ]
    }
  },
  "steps": {
    "props": {
      "id": "string | undefined",
      "model": "MenuItem[] | undefined",
      "readonly": "boolean | undefined",
      "activeStep": "number | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<StepsPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch"
      ],
      "methods": [
        "data",
        "activeStep",
        "mounted",
        "getPTOptions",
        "onItemClick",
        "if",
        "onItemKeydown",
        "navigateToNextItem",
        "navigateToPrevItem",
        "navigateToFirstItem",
        "navigateToLastItem",
        "findNextItem",
        "findPrevItem",
        "findFirstItem",
        "findLastItem",
        "setFocusToMenuitem",
        "isActive",
        "isItemDisabled",
        "visible",
        "disabled",
        "label",
        "getMenuItemProps"
      ]
    }
  },
  "styleclass": {
    "title": "StyleClass",
    "description": "StyleClass manages css classes declaratively to during enter/leave animations or just to toggle classes on an element.",
    "examples": [
      "<Button v-styleclass=\"{ selector: '@next', toggleClass: 'p-disabled' }\" label=\"Toggle p-disabled\" />\n<InputText />",
      "<div class=\"card flex items-center justify-center gap-8\">\n    <div class=\"flex flex-col items-center\">\n        <div>\n            <Button v-styleclass=\"{ selector: '.box1', enterFromClass: 'my-hidden', enterActiveClass: 'my-fadein' }\" label=\"FadeIn\" class=\"mr-2\" />\n            <Button v-styleclass=\"{ selector: '.box1', leaveActiveClass: 'my-fadeout', leaveToClass: 'my-hidden' }\" label=\"FadeOut\" severity=\"secondary\" />\n        </div>\n        <div class=\"h-32\">\n            <div class=\"my-hidden animate-duration-500 box1\">\n                <div class=\"flex bg-primary text-primary-contrast items-center justify-center py-4 rounded-md mt-4 font-bold w-32 h-32\">Custom</div>\n            </div>\n        </div>\n    </div>\n    <div class=\"flex flex-col items-center\">\n        <div>\n            <Button v-styleclass=\"{ selector: '.box2', enterFromClass: 'hidden', enterActiveClass: 'animate-slidedown' }\" label=\"SlideDown\" class=\"mr-2\" />\n            <Button v-styleclass=\"{ selector: '.box2', leaveActiveClass: 'animate-slideup', leaveToClass: 'hidden' }\" label=\"SlideUp\" severity=\"secondary\" />\n        </div>\n        <div class=\"h-32\">\n            <div class=\"hidden animate-duration-500 box2 overflow-hidden\">\n                <div class=\"flex bg-primary text-primary-contrast items-center justify-center py-4 rounded-md mt-4 font-bold w-32 h-32\">Content</div>\n            </div>\n        </div>\n    </div>\n</div>",
      "<Button\n    v-styleclass=\"{ selector: '.box', hideOnResize: true, enterFromClass: 'hidden', enterActiveClass: 'animate-fadein', leaveActiveClass: 'animate-fadeout', leaveToClass: 'hidden' }\"\n    label=\"Show Window Responsive Content\"\n/>\n<div class=\"box hidden animate-duration-300 border border-lg border-surface\">\n    <div class=\"p-4 flex flex-col gap-2\">\n        <h3 class=\"text-xl font-bold\">Window Responsive Panel</h3>\n        <p class=\"text-sm\">This panel will hide when you resize the browser window.</p>\n        <p class=\"text-sm\">Try resizing your browser window to see the effect.</p>\n    </div>\n</div>\n\n<Button\n    v-styleclass=\"{\n        selector: '.resizable',\n        resizeSelector: '.resizable',\n        hideOnResize: true,\n        enterFromClass: 'hidden',\n        enterActiveClass: 'animate-fadein',\n        leaveActiveClass: 'animate-fadeout',\n        leaveToClass: 'hidden'\n    }\"\n    label=\"Show Resizable Panel\"\n/>\n<div class=\"resizable hidden animate-duration-300 border border-lg border-surface w-[20rem] w-max-[25rem] w-min-[15rem] overflow-auto resize\">\n    <div class=\"p-4 h-full flex flex-col gap-2\">\n        <h3 class=\"text-xl font-bold\">Resizable Panel</h3>\n        <p class=\"text-sm\">Drag the resize handle in the bottom-right corner to resize this panel.</p>\n        <p class=\"text-sm\">The panel will hide when you resize it.</p>\n    </div>\n</div>"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "extend",
        "unmounted",
        "bind",
        "unbind",
        "enter",
        "if",
        "function",
        "leave",
        "bindDocumentListener",
        "unbindDocumentListener",
        "bindResizeListener",
        "unbindResizeListener",
        "bindWindowResizeListener",
        "unbindWindowResizeListener",
        "bindElementResizeListener",
        "unbindElementResizeListener",
        "isVisible",
        "isOutsideClick"
      ]
    }
  },
  "tab": {
    "props": {
      "value": "string | number",
      "disabled": "boolean | undefined",
      "as": "string | Component | undefined",
      "asChild": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<TabPassThroughOptions>",
      "ptOptions": "PassThroughOptions"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "onFocus",
        "onClick",
        "onKeydown",
        "onArrowRightKey",
        "onArrowLeftKey",
        "onHomeKey",
        "onEndKey",
        "onPageDownKey",
        "onPageUpKey",
        "onEnterKey",
        "findNextTab",
        "findPrevTab",
        "findFirstTab",
        "findLastTab",
        "changeActiveValue",
        "changeFocusedTab",
        "scrollInView",
        "active",
        "id",
        "ariaControls",
        "attrs",
        "asAttrs",
        "a11yAttrs",
        "ptParams",
        "dataP"
      ]
    }
  },
  "tablist": {
    "props": {
      "dt": "DesignToken<any>",
      "pt": "PassThrough<TabListPassThroughOptions>",
      "ptOptions": "PassThroughOptions"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "showNavigators",
        "handler",
        "mounted",
        "if",
        "updated",
        "beforeUnmount",
        "onScroll",
        "onPrevButtonClick",
        "onNextButtonClick",
        "bindResizeObserver",
        "unbindResizeObserver",
        "updateInkBar",
        "updateButtonState",
        "getVisibleButtonWidths",
        "templates",
        "activeValue",
        "prevButtonAriaLabel",
        "nextButtonAriaLabel",
        "dataP"
      ]
    }
  },
  "tabmenu": {
    "props": {
      "model": "MenuItem[] | undefined",
      "activeIndex": "number | undefined",
      "ariaLabel": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<TabMenuPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'tab-change'": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch"
      ],
      "methods": [
        "data",
        "handler",
        "mounted",
        "updated",
        "getPTOptions",
        "onItemClick",
        "if",
        "onKeydownItem",
        "navigateToNextItem",
        "navigateToPrevItem",
        "navigateToFirstItem",
        "navigateToLastItem",
        "findNextItem",
        "findPrevItem",
        "findFirstItem",
        "findLastItem",
        "findActiveItem",
        "setFocusToMenuitem",
        "onTabKey",
        "visible",
        "disabled",
        "label",
        "updateInkBar",
        "getMenuItemProps"
      ]
    }
  },
  "tabpanel": {
    "props": {
      "value": "string | number",
      "as": "string | Component | undefined",
      "asChild": "boolean | undefined",
      "header": "string | undefined",
      "headerStyle": "any",
      "headerClass": "any",
      "headerProps": "LiHTMLAttributes | undefined",
      "headerActionProps": "AnchorHTMLAttributes | undefined",
      "contentStyle": "any",
      "contentClass": "any",
      "contentProps": "HTMLAttributes | undefined",
      "disabled": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<TabPanelPassThroughOptions>",
      "ptOptions": "PassThroughOptions"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "active",
        "id",
        "ariaLabelledby",
        "attrs",
        "a11yAttrs",
        "ptParams"
      ]
    }
  },
  "tabpanels": {
    "props": {
      "dt": "DesignToken<any>",
      "pt": "PassThrough<TabPanelsPassThroughOptions>",
      "ptOptions": "PassThroughOptions"
    },
    "emits": {},
    "slots": {}
  },
  "tabs": {
    "title": "Tabs",
    "description": "Tabs facilitates seamless switching between different views.",
    "examples": [
      "<Tabs value=\"0\">\n    <TabList>\n        <Tab value=\"0\">Header I</Tab>\n        <Tab value=\"1\">Header II</Tab>\n        <Tab value=\"2\">Header III</Tab>\n    </TabList>\n    <TabPanels>\n        <TabPanel value=\"0\">\n            <p class=\"m-0\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n            </p>\n        </TabPanel>\n        <TabPanel value=\"1\">\n            <p class=\"m-0\">\n                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim\n                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.\n            </p>\n        </TabPanel>\n        <TabPanel value=\"2\">\n            <p class=\"m-0\">\n                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa\n                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n            </p>\n        </TabPanel>\n    </TabPanels>\n</Tabs>",
      "<Tabs value=\"0\">\n    <TabList>\n        <Tab v-for=\"tab in tabs\" :key=\"tab.title\" :value=\"tab.value\">{{ tab.title }}</Tab>\n    </TabList>\n    <TabPanels>\n        <TabPanel v-for=\"tab in tabs\" :key=\"tab.content\" :value=\"tab.value\">\n            <p class=\"m-0\">{{ tab.content }}</p>\n        </TabPanel>\n    </TabPanels>\n</Tabs>",
      "<div class=\"flex mb-2 gap-2 justify-end\">\n    <Button @click=\"value = '0'\" rounded label=\"1\" class=\"w-8 h-8 p-0\" :outlined=\"value !== '0'\" />\n    <Button @click=\"value = '1'\" rounded label=\"2\" class=\"w-8 h-8 p-0\" :outlined=\"value !== '1'\" />\n    <Button @click=\"value = '2'\" rounded label=\"3\" class=\"w-8 h-8 p-0\" :outlined=\"value !== '2'\" />\n</div>\n\n<Tabs v-model:value=\"value\">\n    <TabList>\n        <Tab value=\"0\">Header I</Tab>\n        <Tab value=\"1\">Header II</Tab>\n        <Tab value=\"2\">Header III</Tab>\n    </TabList>\n    <TabPanels>\n        <TabPanel value=\"0\">\n            <p class=\"m-0\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n            </p>\n        </TabPanel>\n        <TabPanel value=\"1\">\n            <p class=\"m-0\">\n                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim\n                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.\n            </p>\n        </TabPanel>\n        <TabPanel value=\"2\">\n            <p class=\"m-0\">\n                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa\n                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n            </p>\n        </TabPanel>\n    </TabPanels>\n</Tabs>",
      "<Tabs value=\"0\" scrollable>\n    <TabList>\n        <Tab v-for=\"tab in scrollableTabs\" :key=\"tab.title\" :value=\"tab.value\">\n            {{ tab.title }}\n        </Tab>\n    </TabList>\n    <TabPanels>\n        <TabPanel v-for=\"tab in scrollableTabs\" :key=\"tab.content\" :value=\"tab.value\">\n            <p class=\"m-0\">{{ tab.content }}</p>\n        </TabPanel>\n    </TabPanels>\n</Tabs>",
      "<Tabs value=\"0\">\n    <TabList>\n        <Tab value=\"0\">Header I</Tab>\n        <Tab value=\"1\">Header II</Tab>\n        <Tab value=\"2\">Header III</Tab>\n        <Tab disabled>Header IV</Tab>\n    </TabList>\n    <TabPanels>\n        <TabPanel value=\"0\">\n            <p class=\"m-0\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n            </p>\n        </TabPanel>\n        <TabPanel value=\"1\">\n            <p class=\"m-0\">\n                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim\n                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.\n            </p>\n        </TabPanel>\n        <TabPanel value=\"2\">\n            <p class=\"m-0\">\n                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa\n                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n            </p>\n        </TabPanel>\n    </TabPanels>\n</Tabs>",
      "<Tabs value=\"0\">\n    <TabList>\n        <Tab value=\"0\" as=\"div\" class=\"flex items-center gap-2\">\n            <Avatar image=\"https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png\" shape=\"circle\" />\n            <span class=\"font-bold whitespace-nowrap\">Amy Elsner</span>\n        </Tab>\n        <Tab value=\"1\" as=\"div\" class=\"flex items-center gap-2\">\n            <Avatar image=\"https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png\" shape=\"circle\" />\n            <span class=\"font-bold whitespace-nowrap\">Onyama Limba</span>\n        </Tab>\n        <Tab v-slot=\"slotProps\" value=\"2\" asChild>\n            <div :class=\"['flex items-center gap-2', slotProps.class]\" @click=\"slotProps.onClick\" v-bind=\"slotProps.a11yAttrs\">\n                <Avatar image=\"https://primefaces.org/cdn/primevue/images/avatar/ionibowcher.png\" shape=\"circle\" />\n                <span class=\"font-bold whitespace-nowrap\">Ioni Bowcher</span>\n                <Badge value=\"2\" />\n            </div>\n        </Tab>\n    </TabList>\n    <TabPanels>\n        <TabPanel value=\"0\" as=\"p\" class=\"m-0\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </TabPanel>\n        <TabPanel value=\"1\" as=\"p\" class=\"m-0\">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim\n            ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.\n        </TabPanel>\n        <TabPanel v-slot=\"slotProps\" value=\"2\" asChild>\n            <div v-show=\"slotProps.active\" :class=\"slotProps.class\" v-bind=\"slotProps.a11yAttrs\">\n                <p class=\"m-0\">\n                    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in\n                    culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n                </p>\n            </div>\n        </TabPanel>\n    </TabPanels>\n</Tabs>",
      "<Tabs value=\"/dashboard\">\n    <TabList>\n        <Tab v-for=\"tab in items\" :key=\"tab.label\" :value=\"tab.route\">\n            <router-link v-if=\"tab.route\" v-slot=\"{ href, navigate }\" :to=\"tab.route\" custom>\n                <a v-ripple :href=\"href\" @click=\"navigate\" class=\"flex items-center gap-2 text-inherit\">\n                    <i :class=\"tab.icon\" />\n                    <span>{{ tab.label }}</span>\n                </a>\n            </router-link>\n        </Tab>\n    </TabList>\n</Tabs>"
    ],
    "props": {
      "value": "string | number",
      "lazy": "boolean | undefined",
      "scrollable": "boolean | undefined",
      "showNavigators": "boolean | undefined",
      "tabindex": "number | undefined",
      "selectOnFocus": "boolean | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<TabsPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:value'": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "watch"
      ],
      "methods": [
        "data",
        "value",
        "updateValue",
        "isVertical"
      ]
    }
  },
  "tabview": {
    "props": {
      "activeIndex": "number | undefined",
      "lazy": "boolean | undefined",
      "scrollable": "boolean | undefined",
      "tabindex": "number | undefined",
      "selectOnFocus": "boolean | undefined",
      "prevButtonProps": "ButtonHTMLAttributes | undefined",
      "nextButtonProps": "ButtonHTMLAttributes | undefined",
      "prevIcon": "string | undefined",
      "nextIcon": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<TabViewPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:activeIndex'": "void",
      "'tab-change'": "void",
      "'tab-click'": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "activeIndex",
        "mounted",
        "updated",
        "isTabPanel",
        "isTabActive",
        "getTabProp",
        "getKey",
        "getTabHeaderActionId",
        "getTabContentId",
        "getTabPT",
        "onScroll",
        "onPrevButtonClick",
        "onNextButtonClick",
        "onTabClick",
        "onTabKeyDown",
        "onTabArrowRightKey",
        "onTabArrowLeftKey",
        "onTabHomeKey",
        "onTabEndKey",
        "onPageDownKey",
        "onPageUpKey",
        "onTabEnterKey",
        "findNextHeaderAction",
        "findPrevHeaderAction",
        "findFirstHeaderAction",
        "findLastHeaderAction",
        "changeActiveIndex",
        "changeFocusedTab",
        "if",
        "scrollInView",
        "updateInkBar",
        "updateButtonState",
        "getVisibleButtonWidths",
        "tabs",
        "prevButtonAriaLabel",
        "nextButtonAriaLabel"
      ]
    }
  },
  "tag": {
    "title": "Tag",
    "description": "Tag component is used to categorize content.",
    "examples": [
      "<Tag value=\"New\"></Tag>",
      "<Tag value=\"Primary\"></Tag>\n<Tag severity=\"secondary\" value=\"Secondary\"></Tag>\n<Tag severity=\"success\" value=\"Success\"></Tag>\n<Tag severity=\"info\" value=\"Info\"></Tag>\n<Tag severity=\"warn\" value=\"Warn\"></Tag>\n<Tag severity=\"danger\" value=\"Danger\"></Tag>\n<Tag severity=\"contrast\" value=\"Contrast\"></Tag>",
      "<Tag value=\"Primary\" rounded></Tag>\n<Tag severity=\"secondary\" value=\"Secondary\" rounded></Tag>\n<Tag severity=\"success\" value=\"Success\" rounded></Tag>\n<Tag severity=\"info\" value=\"Info\" rounded></Tag>\n<Tag severity=\"warn\" value=\"Warn\" rounded></Tag>\n<Tag severity=\"danger\" value=\"Danger\" rounded></Tag>\n<Tag severity=\"contrast\" value=\"Contrast\" rounded></Tag>",
      "<Tag icon=\"pi pi-user\" value=\"Primary\"></Tag>\n<Tag icon=\"pi pi-search\" severity=\"secondary\" value=\"Secondary\"></Tag>\n<Tag icon=\"pi pi-check\" severity=\"success\" value=\"Success\"></Tag>\n<Tag icon=\"pi pi-info-circle\" severity=\"info\" value=\"Info\"></Tag>\n<Tag icon=\"pi pi-exclamation-triangle\" severity=\"warn\" value=\"Warn\"></Tag>\n<Tag icon=\"pi pi-times\" severity=\"danger\" value=\"Danger\"></Tag>\n<Tag icon=\"pi pi-cog\" severity=\"contrast\" value=\"Contrast\"></Tag>",
      "<Tag style=\"border: 2px solid var(--border-color); background: transparent; color: var(--text-color)\">\n    <div class=\"flex items-center gap-2 px-1\">\n        <img alt=\"Country\" src=\"https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png\" class=\"flag flag-it\" style=\"width: 18px\" />\n        <span class=\"text-base\">Italy</span>\n    </div>\n</Tag>"
    ],
    "props": {
      "value": "any",
      "severity": "HintedString<'secondary' | 'success' | 'info' | 'warn' | 'danger' | 'contrast'> | undefined",
      "rounded": "boolean | undefined",
      "icon": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<TagPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "dataP"
      ]
    }
  },
  "terminal": {
    "title": "Terminal",
    "description": "Terminal is a text based user interface.",
    "examples": [
      "<Terminal\n    welcomeMessage=\"Welcome to PrimeVue\"\n    prompt=\"primevue $\"\n    aria-label=\"PrimeVue Terminal Service\"\n/>"
    ],
    "props": {
      "welcomeMessage": "string | undefined",
      "prompt": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<TerminalPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "ref"
      ],
      "methods": [
        "data",
        "mounted",
        "updated",
        "beforeUnmount",
        "onClick",
        "onKeydown",
        "responseListener"
      ]
    }
  },
  "terminalservice": {
    "props": {},
    "emits": {},
    "slots": {}
  },
  "textarea": {
    "title": "Textarea",
    "description": "Textarea adds styling and autoResize functionality to standard textarea element.",
    "examples": [
      "<Textarea v-model=\"value\" rows=\"5\" cols=\"30\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4\">\n    <div class=\"flex flex-col gap-1\">\n        <Textarea name=\"address\" rows=\"5\" cols=\"30\" style=\"resize: none\" />\n        <Message v-if=\"$form.address?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.address.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<Textarea v-model=\"value\" autoResize rows=\"5\" cols=\"30\" />",
      "<FloatLabel>\n    <Textarea id=\"over_label\" v-model=\"value1\" rows=\"5\" cols=\"30\" style=\"resize: none\" />\n    <label for=\"over_label\">Over Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"in\">\n    <Textarea id=\"in_label\" v-model=\"value2\" rows=\"5\" cols=\"30\" style=\"resize: none\" />\n    <label for=\"in_label\">In Label</label>\n</FloatLabel>\n\n<FloatLabel variant=\"on\">\n    <Textarea id=\"on_label\" v-model=\"value3\" rows=\"5\" cols=\"30\" style=\"resize: none\" />\n    <label for=\"on_label\">On Label</label>\n</FloatLabel>",
      "<IftaLabel>\n    <Textarea id=\"description\" v-model=\"value\" rows=\"5\" cols=\"30\" style=\"resize: none\" />\n    <label for=\"description\">Description</label>\n</IftaLabel>",
      "<Textarea v-model=\"value1\" size=\"small\" placeholder=\"Small\" rows=\"3\" />\n<Textarea v-model=\"value2\" placeholder=\"Normal\" rows=\"3\" />\n<Textarea v-model=\"value3\" size=\"large\" placeholder=\"Large\" rows=\"3\" />",
      "<Textarea v-model=\"value\" rows=\"5\" fluid />",
      "<Textarea v-model=\"value\" variant=\"filled\" rows=\"5\" cols=\"30\" />",
      "<Textarea v-model=\"value\" rows=\"5\" cols=\"30\" disabled />",
      "<Textarea v-model=\"value\" rows=\"5\" cols=\"30\" :invalid=\"!value\" style=\"resize: none\" placeholder=\"Address\" />",
      "<label for=\"address1\">Address 1</label>\n<Textarea id=\"address1\" />\n\n<span id=\"address2\">Address 2</span>\n<Textarea aria-labelledby=\"address2\" />\n\n<Textarea aria-label=\"Address Details\"/>"
    ],
    "props": {
      "modelValue": "Nullable<string>",
      "defaultValue": "Nullable<string>",
      "name": "string | undefined",
      "autoResize": "boolean | undefined",
      "size": "HintedString<'small' | 'large'> | undefined",
      "invalid": "boolean | undefined",
      "variant": "HintedString<'outlined' | 'filled'> | undefined | null",
      "fluid": "boolean | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<TextareaPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "(value: string) => void",
      "'value-change'": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "mounted",
        "updated",
        "beforeUnmount",
        "resize",
        "if",
        "onInput",
        "attrs",
        "dataP"
      ]
    }
  },
  "tieredmenu": {
    "title": "TieredMenu",
    "description": "TieredMenu displays submenus in nested overlays.",
    "examples": [
      "<TieredMenu :model=\"items\" />",
      "<Button type=\"button\" label=\"Toggle\" @click=\"toggle\" aria-haspopup=\"true\" aria-controls=\"overlay_tmenu\" />\n<TieredMenu ref=\"menu\" id=\"overlay_tmenu\" :model=\"items\" popup />",
      "<TieredMenu :model=\"items\">\n    <template #item=\"{ item, props, hasSubmenu }\">\n        <a v-ripple class=\"flex items-center\" v-bind=\"props.action\">\n            <span :class=\"item.icon\" />\n            <span class=\"ml-2\">{{ item.label }}</span>\n            <Badge v-if=\"item.badge\" class=\"ml-auto\" :value=\"item.badge\" />\n            <span v-if=\"item.shortcut\" class=\"ml-auto border border-surface rounded bg-emphasis text-muted-color text-xs p-1\">{{ item.shortcut }}</span>\n            <i v-if=\"hasSubmenu\" class=\"pi pi-angle-right ml-auto\"></i>\n        </a>\n    </template>\n</TieredMenu>",
      "<TieredMenu :model=\"items\" />\n<Toast />",
      "<TieredMenu :model=\"items\">\n    <template #item=\"{ item, props, hasSubmenu }\">\n        <router-link v-if=\"item.route\" v-slot=\"{ href, navigate }\" :to=\"item.route\" custom>\n            <a v-ripple :href=\"href\" v-bind=\"props.action\" @click=\"navigate\">\n                <span :class=\"item.icon\" />\n                <span class=\"ml-2\">{{ item.label }}</span>\n            </a>\n        </router-link>\n        <a v-else v-ripple :href=\"item.url\" :target=\"item.target\" v-bind=\"props.action\">\n            <span :class=\"item.icon\" />\n            <span class=\"ml-2\">{{ item.label }}</span>\n            <span v-if=\"hasSubmenu\" class=\"pi pi-angle-right ml-auto\" />\n        </a>\n    </template>\n</TieredMenu>"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "composables": [
        "useEnter",
        "useMove"
      ],
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "activeItemPath",
        "mounted",
        "beforeUnmount",
        "if",
        "getItemProp",
        "getItemLabel",
        "isItemDisabled",
        "isItemVisible",
        "isItemGroup",
        "isItemSeparator",
        "getProccessedItemLabel",
        "isProccessedItemGroup",
        "toggle",
        "show",
        "hide",
        "onFocus",
        "onBlur",
        "onKeyDown",
        "switch",
        "onItemChange",
        "onOverlayClick",
        "onItemClick",
        "onItemMouseEnter",
        "onItemMouseMove",
        "onArrowDownKey",
        "onArrowUpKey",
        "onArrowLeftKey",
        "onArrowRightKey",
        "onHomeKey",
        "onEndKey",
        "onEnterKey",
        "onSpaceKey",
        "onEscapeKey",
        "onTabKey",
        "onEnter",
        "onAfterEnter",
        "onLeave",
        "onAfterLeave",
        "alignOverlay",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "bindScrollListener",
        "unbindScrollListener",
        "bindResizeListener",
        "unbindResizeListener",
        "bindMatchMediaListener",
        "unbindMatchMediaListener",
        "isItemMatched",
        "isValidItem",
        "isValidSelectedItem",
        "isSelected",
        "findFirstItemIndex",
        "findLastItemIndex",
        "findNextItemIndex",
        "findPrevItemIndex",
        "findSelectedItemIndex",
        "findFirstFocusedItemIndex",
        "findLastFocusedItemIndex",
        "searchItems",
        "changeFocusedItemIndex",
        "scrollInView",
        "createProcessedItems",
        "containerRef",
        "menubarRef",
        "processedItems",
        "visibleItems",
        "focusedItemId"
      ],
      "emits": [
        "before-show",
        "before-hide",
        "show",
        "hide"
      ]
    }
  },
  "timeline": {
    "title": "Timeline",
    "description": "Timeline visualizes a series of chained events.",
    "examples": [
      "<Timeline :value=\"events\">\n    <template #content=\"slotProps\">\n        {{ slotProps.item.status }}\n    </template>\n</Timeline>",
      "<Timeline :value=\"events\" class=\"w-full md:w-80\">\n    <template #content=\"slotProps\">\n        {{ slotProps.item.status }}\n    </template>\n</Timeline>\n\n<Timeline :value=\"events\" align=\"right\" class=\"w-full md:w-80\">\n    <template #content=\"slotProps\">\n        {{ slotProps.item.status }}\n    </template>\n</Timeline>\n\n<Timeline :value=\"events\" align=\"alternate\" class=\"w-full md:w-80\">\n    <template #content=\"slotProps\">\n        {{ slotProps.item.status }}\n    </template>\n</Timeline>",
      "<Timeline :value=\"events\">\n    <template #opposite=\"slotProps\">\n        <small class=\"text-surface-500 dark:text-surface-400\">{{slotProps.item.date}}</small>\n    </template>\n    <template #content=\"slotProps\">\n        {{slotProps.item.status}}\n    </template>\n</Timeline>",
      "<Timeline :value=\"events\" align=\"alternate\" class=\"customized-timeline\">\n    <template #marker=\"slotProps\">\n        <span class=\"flex w-8 h-8 items-center justify-center text-white rounded-full z-10 shadow-sm\" :style=\"{ backgroundColor: slotProps.item.color }\">\n            <i :class=\"slotProps.item.icon\"></i>\n        </span>\n    </template>\n    <template #content=\"slotProps\">\n        <Card class=\"mt-4\">\n            <template #title>\n                {{ slotProps.item.status }}\n            </template>\n            <template #subtitle>\n                {{ slotProps.item.date }}\n            </template>\n            <template #content>\n                <img v-if=\"slotProps.item.image\" :src=\"`/images/product/${slotProps.item.image}`\" :alt=\"slotProps.item.name\" width=\"200\" class=\"shadow-sm\" />\n                <p>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate\n                    neque quas!\n                </p>\n                <Button label=\"Read more\" variant=\"text\"></Button>\n            </template>\n        </Card>\n    </template>\n</Timeline>",
      "<Timeline :value=\"events\" layout=\"horizontal\" align=\"top\">\n    <template #content=\"slotProps\">\n        {{ slotProps.item }}\n    </template>\n</Timeline>\n\n<Timeline :value=\"events\" layout=\"horizontal\" align=\"bottom\">\n    <template #content=\"slotProps\">\n        {{ slotProps.item }}\n    </template>\n</Timeline>\n\n<Timeline :value=\"events\" layout=\"horizontal\" align=\"alternate\">\n    <template #opposite> &nbsp; </template>\n    <template #content=\"slotProps\">\n        {{ slotProps.item }}\n    </template>\n</Timeline>"
    ],
    "props": {
      "value": "any[] | undefined",
      "align": "HintedString<'left' | 'right' | 'alternate' | 'top' | 'bottom'> | undefined",
      "layout": "HintedString<'vertical' | 'horizontal'> | undefined",
      "dataKey": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<TimelinePassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "getKey",
        "getPTOptions",
        "dataP"
      ]
    }
  },
  "toast": {
    "title": "Toast",
    "description": "Toast is used to display messages in an overlay.",
    "examples": [
      "<Toast />\n<Button label=\"Show\" @click=\"show()\" />",
      "<Toast />\n<Button label=\"Success\" severity=\"success\" @click=\"showSuccess\" />\n<Button label=\"Info\" severity=\"info\" @click=\"showInfo\" />\n<Button label=\"Warn\" severity=\"warn\" @click=\"showWarn\" />\n<Button label=\"Error\" severity=\"danger\" @click=\"showError\" />\n<Button label=\"Secondary\" severity=\"secondary\" @click=\"showSecondary\" />\n<Button label=\"Contrast\" severity=\"contrast\" @click=\"showContrast\" />",
      "<Toast position=\"top-left\" group=\"tl\" />\n<Toast position=\"bottom-left\" group=\"bl\" />\n<Toast position=\"bottom-right\" group=\"br\" />\n\n<Button label=\"Top Left\" @click=\"showTopLeft\" />\n<Button label=\"Bottom Left\" @click=\"showBottomLeft\" />\n<Button label=\"Bottom Right\" @click=\"showBottomRight\" />",
      "<Toast />\n<Button label=\"Multiple\" @click=\"showMultiple()\" />",
      "<Toast />\n<Button @click=\"showSticky\" label=\"Sticky\" />\n<Button label=\"Clear\" severity=\"secondary\" @click=\"clear()\" />",
      "<Toast position=\"bottom-center\" group=\"bc\" @close=\"onClose\">\n    <template #message=\"slotProps\">\n        <div class=\"flex flex-col items-start flex-auto\">\n            <div class=\"flex items-center gap-2\">\n                <Avatar image=\"https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png\" shape=\"circle\" />\n                <span class=\"font-bold\">Amy Elsner</span>\n            </div>\n            <div class=\"font-medium text-lg my-4\">{{ slotProps.message.summary }}</div>\n            <Button size=\"small\" label=\"Reply\" severity=\"success\" @click=\"onReply()\"></Button>\n        </div>\n    </template>\n</Toast>\n<Button @click=\"showTemplate\" label=\"View\" />",
      "<Toast position=\"top-center\" group=\"headless\" @close=\"visible = false\">\n    <template #container=\"{ message, closeCallback }\">\n        <section class=\"flex flex-col p-4 gap-4 w-full bg-primary/70 rounded-xl\">\n            <div class=\"flex items-center gap-5\">\n                <i class=\"pi pi-cloud-upload text-white dark:text-black text-2xl\"></i>\n                <span class=\"font-bold text-base text-white dark:text-black\">{{ message.summary }}</span>\n            </div>\n            <div class=\"flex flex-col gap-2\">\n                <ProgressBar :value=\"progress\" :showValue=\"false\" :style=\"{ height: '4px' }\" pt:value:class=\"!bg-primary-50 dark:!bg-primary-900\" class=\"!bg-primary/80\"></ProgressBar>\n                <label class=\"text-sm font-bold text-white dark:text-black\">{{ progress }}% uploaded</label>\n            </div>\n            <div class=\"flex gap-4 mb-4 justify-end\">\n                <Button label=\"Another Upload?\" size=\"small\" @click=\"closeCallback\"></Button>\n                <Button label=\"Cancel\" size=\"small\" @click=\"closeCallback\"></Button>\n            </div>\n        </section>\n    </template>\n</Toast>\n<Button @click=\"show\" label=\"View\" />"
    ],
    "props": {
      "group": "string | undefined",
      "position": "'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right' | 'center' | undefined",
      "autoZIndex": "boolean | undefined",
      "baseZIndex": "number | undefined",
      "breakpoints": "ToastBreakpointsType",
      "closeIcon": "string | undefined",
      "infoIcon": "string | undefined",
      "warnIcon": "string | undefined",
      "errorIcon": "string | undefined",
      "successIcon": "string | undefined",
      "closeButtonProps": "ButtonHTMLAttributes | undefined",
      "message": "ToastMessageOptions",
      "onMouseEnter": "Function | undefined",
      "onMouseLeave": "Function | undefined",
      "onClick": "Function | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ToastPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "close": "void",
      "'life-end'": "void"
    },
    "slots": {},
    "logic": {
      "composables": [
        "useEnter",
        "useLeave"
      ],
      "vueImports": [
        "ref",
        "computed"
      ],
      "methods": [
        "data",
        "mounted",
        "beforeUnmount",
        "add",
        "remove",
        "onAdd",
        "onRemove",
        "onRemoveGroup",
        "onRemoveAllGroups",
        "onEnter",
        "onLeave",
        "createStyle",
        "and",
        "destroyStyle",
        "dataP"
      ]
    }
  },
  "toastservice": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "install",
        "remove",
        "removeGroup",
        "removeAllGroups"
      ],
      "emits": [
        "remove-all-groups"
      ]
    }
  },
  "togglebutton": {
    "title": "ToggleButton",
    "description": "ToggleButton is used to select a boolean value using a button.",
    "examples": [
      "<ToggleButton v-model=\"checked\" onLabel=\"On\" offLabel=\"Off\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4\">\n    <div class=\"flex flex-col items-center gap-1\">\n        <ToggleButton name=\"consent\" class=\"w-48\" onLabel=\"Accept All\" offLabel=\"Reject All\" />\n        <Message v-if=\"$form.consent?.invalid\" severity=\"error\" variant=\"simple\">{{ $form.consent.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<ToggleButton v-model=\"checked\" onLabel=\"Locked\" offLabel=\"Unlocked\" onIcon=\"pi pi-lock\" \n    offIcon=\"pi pi-lock-open\" class=\"w-36\" aria-label=\"Do you confirm\" />",
      "<ToggleButton v-model=\"value1\" onLabel=\"On\" offLabel=\"Off\" size=\"small\" class=\"min-w-16\" />\n<ToggleButton v-model=\"value2\" onLabel=\"On\" offLabel=\"Off\" class=\"min-w-20\" />\n<ToggleButton v-model=\"value3\" onLabel=\"On\" offLabel=\"Off\" size=\"large\" class=\"min-w-24\" />",
      "<ToggleButton v-model=\"checked\" onLabel=\"On\" offLabel=\"Off\" />",
      "<ToggleButton v-model=\"checked\" disabled onIcon=\"pi pi-check\" offIcon=\"pi pi-times\"\n    class=\"w-full sm:w-40\" aria-label=\"Confirmation\" />",
      "<ToggleButton v-model=\"checked\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" :invalid=\"!checked\" class=\"w-full sm:w-40\" aria-label=\"Confirmation\" />",
      "<span id=\"rememberme\">Remember Me</span>\n<ToggleButton aria-labelledby=\"rememberme\" />\n\n<ToggleButton aria-label=\"Remember Me\" />"
    ],
    "props": {
      "modelValue": "boolean | undefined",
      "defaultValue": "boolean | undefined",
      "name": "string | undefined",
      "onIcon": "string | undefined",
      "offIcon": "string | undefined",
      "onLabel": "string | undefined",
      "offLabel": "string | undefined",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "fluid": "boolean | undefined",
      "readonly": "boolean | undefined",
      "tabindex": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "size": "HintedString<'small' | 'large'> | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ToggleButtonPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "change": "void",
      "focus": "void",
      "blur": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "getPTOptions",
        "onChange",
        "onBlur",
        "active",
        "hasLabel",
        "label",
        "dataP"
      ]
    }
  },
  "toggleswitch": {
    "title": "ToggleSwitch",
    "description": "ToggleSwitch is used to select a boolean value.",
    "examples": [
      "<ToggleSwitch v-model=\"checked\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4 w-48\">\n    <div class=\"flex flex-col items-center gap-2\">\n        <ToggleSwitch name=\"activation\" />\n        <Message v-if=\"$form.activation?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.activation.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<ToggleSwitch v-model=\"checked\" />",
      "<ToggleSwitch v-model=\"checked\" :invalid=\"!checked\" />",
      "<ToggleSwitch v-model=\"checked\">\n    <template #handle=\"{ checked }\">\n        <i :class=\"['!text-xs pi', { 'pi-check': checked, 'pi-times': !checked }]\" />\n    </template>\n</ToggleSwitch>",
      "<ToggleSwitch v-model=\"checked\" disabled />",
      "<label for=\"switch1\">Remember Me</label>\n<ToggleSwitch inputId=\"switch1\" />\n\n<span id=\"switch2\">Remember Me</span>\n<ToggleSwitch aria-labelledby=\"switch2\" />\n\n<ToggleSwitch aria-label=\"Remember Me\" />"
    ],
    "props": {
      "modelValue": "boolean | string | undefined",
      "defaultValue": "boolean | string | undefined",
      "name": "string | undefined",
      "trueValue": "any",
      "falseValue": "any",
      "invalid": "boolean | undefined",
      "disabled": "boolean | undefined",
      "readonly": "boolean | undefined",
      "tabindex": "number | undefined",
      "inputId": "string | undefined",
      "inputClass": "string | object | undefined",
      "inputStyle": "object | undefined",
      "ariaLabelledby": "string | undefined",
      "ariaLabel": "string | undefined",
      "formControl": "Record<string, any> | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ToggleSwitchPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:modelValue'": "void",
      "'value-change'": "void",
      "change": "void",
      "focus": "void",
      "blur": "void"
    },
    "slots": {},
    "logic": {
      "vueImports": [
        "computed"
      ],
      "methods": [
        "getPTOptions",
        "onChange",
        "onFocus",
        "onBlur",
        "checked",
        "dataP"
      ]
    }
  },
  "toolbar": {
    "title": "Toolbar",
    "description": "Toolbar is a grouping component for buttons and other content.",
    "examples": [
      "<Toolbar>\n    <template #start>\n        <Button icon=\"pi pi-plus\" class=\"mr-2\" severity=\"secondary\" text />\n        <Button icon=\"pi pi-print\" class=\"mr-2\" severity=\"secondary\" text />\n        <Button icon=\"pi pi-upload\" severity=\"secondary\" text />\n    </template>\n\n    <template #center>\n        <IconField>\n            <InputIcon>\n                <i class=\"pi pi-search\" />\n            </InputIcon>\n            <InputText placeholder=\"Search\" />\n        </IconField>\n    </template>\n\n    <template #end> <SplitButton label=\"Save\" :model=\"items\"></SplitButton></template>\n</Toolbar>",
      "<Toolbar style=\"border-radius: 3rem; padding: 1rem 1rem 1rem 1.5rem\">\n    <template #start>\n        <div class=\"flex items-center gap-2\">\n            <svg width=\"35\" height=\"40\" viewBox=\"0 0 35 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"...\" fill=\"var(--p-text-color)\" />\n                <path d=\"...\" fill=\"transparent\" />\n            </svg>\n            <Button label=\"Files\" text plain />\n            <Button label=\"Edit\" text plain />\n            <Button label=\"View\" text plain />\n        </div>\n    </template>\n\n    <template #end>\n        <div class=\"flex items-center gap-2\">\n            <Button label=\"Share\" severity=\"contrast\" size=\"small\" />\n            <Avatar image=\"https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png\" style=\"width: 32px; height: 32px\" />\n        </div>\n    </template>\n</Toolbar>"
    ],
    "props": {
      "ariaLabelledby": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<ToolbarPassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {},
    "slots": {}
  },
  "tooltip": {
    "title": "Tooltip",
    "description": "Tooltip directive provides advisory information for a component.",
    "examples": [
      "<InputText v-tooltip=\"'Enter your username'\" type=\"text\" placeholder=\"Right\" />\n<InputText v-tooltip.top=\"'Enter your username'\" type=\"text\" placeholder=\"Top\" />\n<InputText v-tooltip.bottom=\"'Enter your username'\" type=\"text\" placeholder=\"Bottom\" />\n<InputText v-tooltip.left=\"'Enter your username'\" type=\"text\" placeholder=\"Left\" />",
      "<InputText v-tooltip.focus.top=\"'Enter your username'\" type=\"text\" placeholder=\"Focus\" />",
      "<InputText v-tooltip.bottom=\"{ value: 'Enter your username', autoHide: false }\" type=\"text\" placeholder=\"autoHide: false\" />\n<InputText v-tooltip.bottom=\"'Enter your username'\" type=\"text\" placeholder=\"autoHide: true\" />",
      "<Button v-tooltip=\"{ value: 'Confirm to proceed', showDelay: 1000, hideDelay: 300 }\" label=\"Save\" />",
      "<Button\n    v-tooltip.bottom=\"{\n        value: 'PrimeVue Rocks',\n        pt: {\n            arrow: {\n                style: {\n                    borderBottomColor: 'var(--p-primary-color)'\n                }\n            },\n            text: '!bg-primary !text-primary-contrast !font-medium'\n        }\n    }\"\n    label=\"Button\"\n/>"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "composables": [
        "useEnterEvent",
        "useEnter",
        "useLeaveEvent",
        "useLeave"
      ],
      "methods": [
        "_slicedToArray",
        "_nonIterableRest",
        "_unsupportedIterableToArray",
        "_arrayLikeToArray",
        "_iterableToArrayLimit",
        "catch",
        "_arrayWithHoles",
        "_defineProperty",
        "_toPropertyKey",
        "_toPrimitive",
        "_typeof",
        "function",
        "extend",
        "updated",
        "if",
        "unmounted",
        "bindEvents",
        "unbindEvents",
        "bindScrollListener",
        "unbindScrollListener",
        "onMouseEnter",
        "onMouseLeave",
        "onFocus",
        "onBlur",
        "onClick",
        "onKeydown",
        "onWindowResize",
        "tooltipActions",
        "addEventListener",
        "show",
        "tooltipRemoval",
        "hide",
        "getTooltipElement",
        "getArrowElement",
        "create",
        "remove",
        "align",
        "getHostOffset",
        "alignRight",
        "alignLeft",
        "alignTop",
        "alignBottom",
        "preAlign",
        "isOutOfBounds",
        "getTarget",
        "getModifiers",
        "reduce"
      ]
    }
  },
  "tree": {
    "title": "Tree",
    "description": "Tree is used to display hierarchical data.",
    "examples": [
      "<Tree :value=\"nodes\" class=\"w-full md:w-[30rem]\"></Tree>",
      "<div class=\"flex flex-wrap gap-2 mb-6\">\n    <Button type=\"button\" icon=\"pi pi-plus\" label=\"Expand All\" @click=\"expandAll\" />\n    <Button type=\"button\" icon=\"pi pi-minus\" label=\"Collapse All\" @click=\"collapseAll\" />\n</div>\n<Tree v-model:expandedKeys=\"expandedKeys\" :value=\"nodes\" class=\"w-full md:w-[30rem]\"></Tree>",
      "<Tree v-model:selectionKeys=\"selectedKey\" :value=\"nodes\" selectionMode=\"single\" class=\"w-full md:w-[30rem]\"></Tree>",
      "<Tree v-model:selectionKeys=\"selectedKeys\" :value=\"nodes\"\n    selectionMode=\"multiple\" :metaKeySelection=\"checked\"></Tree>",
      "<Tree v-model:selectionKeys=\"selectedKey\" :value=\"nodes\" selectionMode=\"checkbox\" class=\"w-full md:w-[30rem]\"></Tree>",
      "<Tree v-model:selectionKeys=\"selectedKey\" :value=\"nodes\" selectionMode=\"single\" :metaKeySelection=\"false\"\n    @nodeSelect=\"onNodeSelect\" @nodeUnselect=\"onNodeUnselect\" @nodeExpand=\"onNodeExpand\" @nodeCollapse=\"onNodeCollapse\" class=\"w-full md:w-[30rem]\"></Tree>",
      "<Tree :value=\"nodes\" @node-expand=\"onNodeExpand\" :loading=\"loading\" class=\"w-full md:w-[30rem]\"></Tree>\n<Tree :value=\"nodes2\" @node-expand=\"onNodeExpand2\" loadingMode=\"icon\" class=\"w-full md:w-[30rem]\"></Tree>",
      "<Tree :value=\"nodes\" class=\"w-full md:w-[30rem]\">\n    <template #default=\"slotProps\">\n        <b>{{ slotProps.node.label }}</b>\n    </template>\n    <template #url=\"slotProps\">\n        <a :href=\"slotProps.node.data\">{{ slotProps.node.label }}</a>\n    </template>\n</Tree>",
      "<Tree :value=\"nodes\" :filter=\"true\" filterMode=\"lenient\" class=\"w-full md:w-[30rem]\"></Tree>\n<Tree :value=\"nodes\" :filter=\"true\" filterMode=\"strict\" class=\"w-full md:w-[30rem]\"></Tree>",
      "<Tree v-model:value=\"nodes\" draggableNodes droppableNodes></Tree>",
      "<Tree v-model:value=\"value1\" draggableNodes droppableNodes draggableScope=\"first\" droppableScope=\"none\" />\n<Tree v-model:value=\"value2\" draggableNodes droppableNodes draggableScope=\"second\" droppableScope=\"first\" />\n<Tree v-model:value=\"value3\" draggableNodes droppableNodes :droppableScope=\"['first', 'second']\" />"
    ],
    "props": {
      "value": "TreeNode[] | undefined",
      "expandedKeys": "TreeExpandedKeys",
      "selectionKeys": "TreeSelectionKeys",
      "selectionMode": "HintedString<'single' | 'multiple' | 'checkbox'> | undefined",
      "metaKeySelection": "boolean | undefined",
      "loading": "boolean | undefined",
      "loadingIcon": "string | undefined",
      "loadingMode": "HintedString<'mask' | 'icon'> | undefined",
      "filter": "boolean | undefined",
      "filterBy": "string | ((node: TreeNode) => string) | undefined",
      "filterMode": "HintedString<'lenient' | 'strict'> | undefined",
      "filterPlaceholder": "string | undefined",
      "filterLocale": "string | undefined",
      "highlightOnSelect": "boolean | undefined",
      "scrollHeight": "HintedString<'flex'> | undefined",
      "draggableNodes": "boolean | undefined",
      "droppableNodes": "boolean | undefined",
      "draggableScope": "string | string[] | undefined",
      "droppableScope": "string | string[] | undefined",
      "validateDrop": "boolean | undefined",
      "ariaLabel": "string | undefined",
      "ariaLabelledby": "string | undefined",
      "dt": "DesignToken<any>",
      "pt": "PassThrough<TreePassThroughOptions>",
      "ptOptions": "PassThroughOptions",
      "unstyled": "boolean"
    },
    "emits": {
      "'update:value'": "void",
      "'update:expandedKeys'": "void",
      "'update:selectionKeys'": "void",
      "'node-select'": "void",
      "'node-unselect'": "void",
      "'node-expand'": "void",
      "'node-collapse'": "void",
      "'node-drop'": "void",
      "'node-dragenter'": "void",
      "'node-dragleave'": "void",
      "'filter'": "void",
      "'drag-enter'": "void",
      "'drag-leave'": "void"
    },
    "slots": {},
    "logic": {
      "composables": [
        "useTreeDragDropService"
      ],
      "vueImports": [
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "expandedKeys",
        "mounted",
        "beforeUnmount",
        "if",
        "onNodeToggle",
        "onNodeClick",
        "onCheckboxChange",
        "handleSelectionWithMetaKey",
        "handleSelectionWithoutMetaKey",
        "isSingleSelectionMode",
        "isMultipleSelectionMode",
        "isNodeSelected",
        "isChecked",
        "isNodeLeaf",
        "onFilterKeyup",
        "findFilteredNodes",
        "isFilterMatched",
        "onNodeDrop",
        "onNodeDragEnter",
        "onNodeDragLeave",
        "onValueChanged",
        "allowDrop",
        "while",
        "allowNodeDrop",
        "hasCommonScope",
        "for",
        "isValidDragScope",
        "isSameTreeScope",
        "onDragOver",
        "onDragEnter",
        "onDragLeave",
        "processTreeDrop",
        "onDrop",
        "filteredValue",
        "valueToRender",
        "empty",
        "emptyMessageText",
        "containerDataP",
        "wrapperDataP"
      ]
    }
  },
  "treenode": {
    "props": {},
    "emits": {},
    "slots": {}
  },
  "treeselect": {
    "title": "TreeSelect",
    "description": "TreeSelect is a form component to choose from hierarchical data.",
    "examples": [
      "<TreeSelect v-model=\"selectedValue\" :options=\"nodes\" placeholder=\"Select Item\" class=\"md:w-80 w-full\" />",
      "<Form v-slot=\"$form\" :resolver=\"resolver\" :initialValues=\"initialValues\" @submit=\"onFormSubmit\" class=\"flex flex-col gap-4 w-full md:w-80\">\n    <div class=\"flex flex-col gap-1\">\n        <TreeSelect name=\"node\" :options=\"nodes\" placeholder=\"Select Item\" fluid />\n        <Message v-if=\"$form.node?.invalid\" severity=\"error\" size=\"small\" variant=\"simple\">{{ $form.node.error?.message }}</Message>\n    </div>\n    <Button type=\"submit\" severity=\"secondary\" label=\"Submit\" />\n</Form>",
      "<TreeSelect v-model=\"selectedValue\" :options=\"nodes\" selectionMode=\"multiple\" display=\"chip\" :maxSelectedLabels=\"3\" placeholder=\"Select Items\" class=\"md:w-80 w-full\" />",
      "<TreeSelect v-model=\"selectedValue\" :options=\"nodes\" selectionMode=\"checkbox\" placeholder=\"Select Item\" class=\"md:w-80 w-full\" />",
      "<TreeSelect v-model=\"selectedValue\" :loading=\"loading\" :options=\"nodes\" @node-expand=\"onNodeExpand\" placeholder=\"Select Item\" class=\"md:w-80 w-full\" />\n<TreeSelect v-model=\"selectedValue2\" loadingMode=\"icon\" :options=\"nodes2\" @node-expand=\"onNodeExpand2\" placeholder=\"Select Item\" class=\"md:w-80 w-full\" />",
      "<TreeSelect v-model=\"selectedValue\" filter filterMode=\"lenient\" :options=\"nodes\" placeholder=\"Select Item\" class=\"md:w-80 w-full\" />\n<TreeSelect v-model=\"selectedValue\" filter filterMode=\"strict\" :options=\"nodes\" placeholder=\"Select Item\" class=\"md:w-80 w-full\" />",
      "<TreeSelect v-model=\"selectedValue\" :options=\"nodes\" placeholder=\"Select Item\" class=\"md:w-80 w-full\">\n    <template #dropdownicon>\n        <i class=\"pi pi-search\" />\n    </template>\n    <template #header>\n        <div class=\"font-medium px-3 py-2\">Available Files</div>\n    </template>\n    <template #footer>\n        <div class=\"px-3 pt-1 pb-2 flex justify-between\">\n            <Button label=\"Add New\" severity=\"secondary\" text size=\"small\" icon=\"pi pi-plus\" />\n            <Button label=\"Remove All\" severity=\"danger\" text size=\"small\" icon=\"pi pi-plus\" />\n        </div>\n    </template>\n</TreeSelect>",
      "<FloatLabel class=\"w-full md:w-80\">\n    <TreeSelect v-model=\"value1\" inputId=\"over_label\" :options=\"nodes\" class=\"w-full\" />\n    <label for=\"over_label\">Over Label</label>\n</FloatLabel>\n\n<FloatLabel class=\"w-full md:w-80\" variant=\"in\">\n    <TreeSelect v-model=\"value2\" inputId=\"in_label\" :options=\"nodes\" class=\"w-full\" variant=\"filled\" />\n    <label for=\"in_label\">In Label</label>\n</FloatLabel>\n\n<FloatLabel class=\"w-full md:w-80\" variant=\"on\">\n    <TreeSelect v-model=\"value3\" inputId=\"on_label\" :options=\"nodes\" class=\"w-full\" />\n    <label for=\"on_label\">On Label</label>\n</FloatLabel>",
      "<IftaLabel class=\"w-full md:w-80\">\n    <TreeSelect v-model=\"selectedValue\" inputId=\"t_file\" :options=\"nodes\" class=\"w-full\" variant=\"filled\" />\n    <label for=\"t_file\">File</label>\n</IftaLabel>",
      "<TreeSelect v-model=\"selectedValue\" :options=\"nodes\" placeholder=\"Select Item\" class=\"md:w-80 w-full\" />",
      "<TreeSelect v-model=\"value1\" :options=\"nodes\" size=\"small\" placeholder=\"Small\" class=\"md:w-80 w-full\" />\n<TreeSelect v-model=\"value2\" :options=\"nodes\" placeholder=\"Normal\" class=\"md:w-80 w-full\" />\n<TreeSelect v-model=\"value3\" :options=\"nodes\" size=\"large\" placeholder=\"Large\" class=\"md:w-80 w-full\" />",
      "<TreeSelect v-model=\"selectedValue\" :options=\"nodes\" placeholder=\"Select Item\" fluid />",
      "<TreeSelect v-model=\"selectedValue\" variant=\"filled\" :options=\"nodes\" placeholder=\"Select Item\" class=\"md:w-80 w-full\" />",
      "<TreeSelect v-model=\"selectedValue\" disabled class=\"md:w-80 w-full\" :options=\"nodes\" placeholder=\"TreeSelect\" />",
      "<TreeSelect v-model=\"selectedValue1\" :invalid=\"Object.keys(selectedValue1).length === 0\" class=\"md:w-80 w-full\" :options=\"nodes\" placeholder=\"TreeSelect\" />\n<TreeSelect v-model=\"selectedValue2\" :invalid=\"Object.keys(selectedValue2).length === 0\" class=\"md:w-80 w-full\" :options=\"nodes\" placeholder=\"TreeSelect\" variant=\"filled\" />",
      "<span id=\"dd1\">Options</span>\n<TreeSelect aria-labelledby=\"dd1\" />\n\n<TreeSelect aria-label=\"Options\" />"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "function",
        "options",
        "expandedKeys",
        "beforeUnmount",
        "if",
        "mounted",
        "show",
        "hide",
        "onFocus",
        "onBlur",
        "onClick",
        "onClearClick",
        "onSelectionChange",
        "onNodeSelect",
        "onNodeUnselect",
        "onNodeToggle",
        "getSelectedItemsLabel",
        "onFirstHiddenFocus",
        "onLastHiddenFocus",
        "onKeyDown",
        "onArrowDownKey",
        "onEnterKey",
        "onEscapeKey",
        "onTabKey",
        "hasFocusableElements",
        "onOverlayEnter",
        "onOverlayAfterEnter",
        "onOverlayLeave",
        "onOverlayAfterLeave",
        "focus",
        "alignOverlay",
        "bindOutsideClickListener",
        "unbindOutsideClickListener",
        "bindScrollListener",
        "unbindScrollListener",
        "bindResizeListener",
        "unbindResizeListener",
        "isOutsideClicked",
        "overlayRef",
        "onOverlayClick",
        "onOverlayKeydown",
        "fillNodeMap",
        "isSelected",
        "updateTreeState",
        "updateTreeBranchState",
        "for",
        "expandPath",
        "scrollValueInView",
        "nodeMap",
        "selectedNodes",
        "label",
        "chipSelectedItems",
        "emptyMessageText",
        "emptyValue",
        "emptyOptions",
        "listId",
        "hasFluid",
        "isClearIconVisible"
      ],
      "emits": [
        "before-show",
        "before-hide",
        "show",
        "hide"
      ]
    }
  },
  "treetable": {
    "title": "TreeTable",
    "description": "TreeTable is used to display hierarchical data in tabular format.",
    "examples": [
      "<TreeTable :value=\"nodes\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" style=\"width: 33%\"></Column>\n</TreeTable>",
      "<TreeTable :value=\"nodes\" tableStyle=\"min-width: 50rem\">\n    <Column v-for=\"col of columns\" :key=\"col.field\" :field=\"col.field\" :header=\"col.header\" :expander=\"col.expander\"></Column>\n</TreeTable>",
      "<Button @click=\"toggleApplications\" label=\"Toggle Applications\" />\n<TreeTable v-model:expandedKeys=\"expandedKeys\" :value=\"nodes\" class=\"mt-6\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" style=\"width: 33%\"></Column>\n</TreeTable>",
      "<TreeTable :value=\"nodes\" tableStyle=\"min-width: 50rem\">\n    <template #header>\n        <div class=\"text-xl font-bold\">File Viewer</div>\n    </template>\n    <Column field=\"name\" header=\"Name\" expander style=\"width: 250px\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"width: 150px\"></Column>\n    <Column field=\"type\" header=\"Type\" style=\"width: 150px\"></Column>\n    <Column style=\"width: 10rem\">\n        <template #body>\n            <div class=\"flex flex-wrap gap-2\">\n                <Button type=\"button\" icon=\"pi pi-search\" rounded />\n                <Button type=\"button\" icon=\"pi pi-pencil\" rounded severity=\"success\" />\n            </div>\n        </template>\n    </Column>\n    <template #footer>\n        <div class=\"flex justify-start\">\n            <Button icon=\"pi pi-refresh\" label=\"Reload\" severity=\"warn\" />\n        </div>\n    </template>\n</TreeTable>",
      "<TreeTable :value=\"nodes\" :size=\"size.value\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" style=\"width: 33%\"></Column>\n</TreeTable>",
      "<TreeTable :value=\"nodes\" :paginator=\"true\" :rows=\"5\" :rowsPerPageOptions=\"[5, 10, 25]\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" style=\"width: 33%\"></Column>\n</TreeTable>",
      "<TreeTable\n    :value=\"nodes\"\n    :paginator=\"true\"\n    :rows=\"5\"\n    :rowsPerPageOptions=\"[5, 10, 25, 50]\"\n    paginatorTemplate=\"RowsPerPageDropdown FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink\"\n    currentPageReportTemplate=\"{first} to {last} of {totalRecords}\"\n    tableStyle=\"min-width: 50rem\"\n>\n    <template #paginatorstart>\n        <Button type=\"button\" icon=\"pi pi-refresh\" text />\n    </template>\n    <Column field=\"name\" header=\"Name\" expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" style=\"width: 33%\"></Column>\n    <template #paginatorend>\n        <Button type=\"button\" icon=\"pi pi-download\" text />\n    </template>\n</TreeTable>",
      "<TreeTable :value=\"nodes\" :paginator=\"true\" :rows=\"5\" :rowsPerPageOptions=\"[5, 10, 25]\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" style=\"width: 33%\"></Column>\n    <template #paginatorcontainer=\"{ first, last, page, pageCount, prevPageCallback, nextPageCallback, totalRecords }\">\n        <div class=\"flex items-center gap-4 border border-primary bg-transparent rounded-full w-full py-1 px-2 justify-between\">\n            <Button icon=\"pi pi-chevron-left\" rounded text @click=\"prevPageCallback\" :disabled=\"page === 0\" />\n            <div class=\"text-color font-medium\">\n                <span class=\"hidden sm:block\">Showing {{ first }} to {{ last }} of {{ totalRecords }}</span>\n                <span class=\"block sm:hidden\">Page {{ page + 1 }} of {{ pageCount }}</span>\n            </div>\n            <Button icon=\"pi pi-chevron-right\" rounded text @click=\"nextPageCallback\" :disabled=\"page === pageCount - 1\" />\n        </div>\n    </template>\n</TreeTable>",
      "<TreeTable :value=\"nodes\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" sortable expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" sortable style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" sortable style=\"width: 33%\"></Column>\n</TreeTable>",
      "<TreeTable :value=\"nodes\" sortMode=\"multiple\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" sortable expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" sortable style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" sortable style=\"width: 33%\"></Column>\n</TreeTable>",
      "<TreeTable :value=\"nodes\" sortMode=\"multiple\" removableSort tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" sortable expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" sortable style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" sortable style=\"width: 33%\"></Column>\n</TreeTable>",
      "<SelectButton v-model=\"filterMode\" optionLabel=\"label\" dataKey=\"label\" :options=\"filterOptions\" />\n<TreeTable :value=\"nodes\" :filters=\"filters\" :filterMode=\"filterMode.value\">\n    <template #header>\n        <div class=\"flex justify-end\">\n            <IconField>\n                <InputIcon class=\"pi pi-search\" />\n                <InputText v-model=\"filters['global']\" placeholder=\"Global Search\" />\n            </IconField>\n        </div>\n    </template>\n    <Column field=\"name\" header=\"Name\" expander style=\"min-width: 12rem\">\n        <template #filter>\n            <InputText v-model=\"filters['name']\" type=\"text\" placeholder=\"Filter by name\" />\n        </template>\n    </Column>\n    <Column field=\"size\" header=\"Size\" style=\"min-width: 12rem\">\n        <template #filter>\n            <InputText v-model=\"filters['size']\" type=\"text\" placeholder=\"Filter by size\" />\n        </template>\n    </Column>\n    <Column field=\"type\" header=\"Type\" style=\"min-width: 12rem\">\n        <template #filter>\n            <InputText v-model=\"filters['type']\" type=\"text\" placeholder=\"Filter by type\" />\n        </template>\n    </Column>\n</TreeTable>",
      "<ToggleSwitch v-model=\"metaKey\" inputId=\"input-metakey\" />\n\n<TreeTable v-model:selectionKeys=\"selectedKey\" :value=\"nodes\" selectionMode=\"single\" :metaKeySelection=\"metaKey\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" style=\"width: 33%\"></Column>\n</TreeTable>",
      "<ToggleSwitch v-model=\"metaKey\" inputId=\"input-metakey\" />\n\n<TreeTable v-model:selectionKeys=\"selectedKey\" :value=\"nodes\" selectionMode=\"multiple\" :metaKeySelection=\"metaKey\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" style=\"width: 33%\"></Column>\n</TreeTable>",
      "<TreeTable v-model:selectionKeys=\"selectedKey\" :value=\"nodes\" selectionMode=\"checkbox\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" style=\"width: 33%\"></Column>\n</TreeTable>",
      "<TreeTable v-model:selectionKeys=\"selectedKey\" :value=\"nodes\" selectionMode=\"single\" @nodeSelect=\"onNodeSelect\" @nodeUnselect=\"onNodeUnselect\" :metaKeySelection=\"false\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" style=\"width: 33%\"></Column>\n</TreeTable>",
      "<TreeTable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n    @nodeExpand=\"onExpand\" @page=\"onPage\" :totalRecords=\"totalRecords\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" expander></Column>\n    <Column field=\"size\" header=\"Size\"></Column>\n    <Column field=\"type\" header=\"Type\"></Column>\n</TreeTable>",
      "<TreeTable :value=\"nodes\" scrollable scrollHeight=\"270px\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" style=\"width: 33%\"></Column>\n</TreeTable>",
      "<Button label=\"Show\" icon=\"pi pi-external-link\" @click=\"dialogVisible = true\" />\n<Dialog v-model:visible=\"dialogVisible\" header=\"Flex Scroll\" :style=\"{ width: '75vw' }\" maximizable modal :contentStyle=\"{ height: '300px' }\">\n    <TreeTable :value=\"nodes\" :scrollable=\"true\" scrollHeight=\"flex\" tableStyle=\"min-width: 50rem\">\n        <Column field=\"name\" header=\"Name\" :expander=\"true\" style=\"min-width: 200px\"></Column>\n        <Column field=\"size\" header=\"Size\" style=\"min-width: 200px\"></Column>\n        <Column field=\"type\" header=\"Type\" style=\"min-width: 200px\"></Column>\n    </TreeTable>\n    <template #footer>\n        <Button label=\"Ok\" icon=\"pi pi-check\" @click=\"dialogVisible = false\" />\n    </template>\n</Dialog>",
      "<TreeTable :value=\"nodes\" scrollable scrollHeight=\"300px\">\n    <Column field=\"name\" header=\"Name\" expander style=\"min-width: 250px\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"min-width: 200px\"></Column>\n    <Column field=\"type\" header=\"Type 2\" style=\"min-width: 200px\"></Column>\n    <Column field=\"size\" header=\"Size 2\" style=\"min-width: 200px\"></Column>\n    <Column field=\"type\" header=\"Type 3\" style=\"min-width: 200px\"></Column>\n    <Column field=\"size\" header=\"Size 3\" style=\"min-width: 200px\"></Column>\n</TreeTable>",
      "<TreeTable :value=\"nodes\" scrollable scrollHeight=\"300px\">\n    <Column field=\"name\" header=\"Name\" expander frozen style=\"min-width: 250px\" class=\"font-bold\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"min-width: 200px\"></Column>\n    <Column field=\"type\" header=\"Type 2\" style=\"min-width: 200px\"></Column>\n    <Column field=\"size\" header=\"Size 2\" style=\"min-width: 200px\"></Column>\n    <Column field=\"type\" header=\"Type 3\" style=\"min-width: 200px\"></Column>\n    <Column field=\"size\" header=\"Size 3\" style=\"min-width: 200px\"></Column>\n</TreeTable>",
      "<TreeTable :value=\"nodes\" :resizableColumns=\"true\" showGridlines tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" expander></Column>\n    <Column field=\"size\" header=\"Size\"></Column>\n    <Column field=\"type\" header=\"Type\"></Column>\n</TreeTable>",
      "<TreeTable :value=\"nodes\" :resizableColumns=\"true\" columnResizeMode=\"expand\" showGridlines tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" expander></Column>\n    <Column field=\"size\" header=\"Size\"></Column>\n    <Column field=\"type\" header=\"Type\"></Column>\n</TreeTable>",
      "<TreeTable :value=\"nodes\" tableStyle=\"min-width: 50rem\">\n    <template #header>\n        <div style=\"text-align:left\">\n            <MultiSelect :modelValue=\"selectedColumns\" @update:modelValue=\"onToggle\" :options=\"columns\" optionLabel=\"header\" class=\"w-full sm:w-64\" display=\"chip\"/>\n        </div>\n    </template>\n    <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n    <Column v-for=\"col of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\"></Column>\n</TreeTable>",
      "<ContextMenu ref=\"cm\" :model=\"menuModel\" @hide=\"selectedNode = null\" />\n<TreeTable v-model:contextMenuSelection=\"selectedNode\" :value=\"nodes\" contextMenu @row-contextmenu=\"onRowContextMenu\" tableStyle=\"min-width: 50rem\">\n    <Column field=\"name\" header=\"Name\" expander style=\"width: 34%\"></Column>\n    <Column field=\"size\" header=\"Size\" style=\"width: 33%\"></Column>\n    <Column field=\"type\" header=\"Type\" style=\"width: 33%\"></Column>\n</TreeTable>"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "provide",
        "data",
        "expandedKeys",
        "first",
        "rows",
        "sortField",
        "sortOrder",
        "multiSortMeta",
        "beforeUnmount",
        "columnProp",
        "ptHeaderCellOptions",
        "onNodeToggle",
        "onNodeClick",
        "nodeKey",
        "handleSelectionWithMetaKey",
        "handleSelectionWithoutMetaKey",
        "if",
        "onCheckboxChange",
        "onRowRightClick",
        "isSingleSelectionMode",
        "isMultipleSelectionMode",
        "onPage",
        "resetPage",
        "getFilterColumnHeaderClass",
        "onColumnHeaderClick",
        "addMultiSortField",
        "sortSingle",
        "sortNodesSingle",
        "sortMultiple",
        "sortNodesMultiple",
        "multisortField",
        "filter",
        "for",
        "findFilteredNodes",
        "isFilterMatched",
        "isNodeSelected",
        "isNodeLeaf",
        "createLazyLoadEvent",
        "onColumnResizeStart",
        "onColumnResize",
        "onColumnResizeEnd",
        "resizeTableCells",
        "child",
        "bindColumnResizeEvents",
        "unbindColumnResizeEvents",
        "onColumnKeyDown",
        "hasColumnFilter",
        "hasFilters",
        "hasGlobalFilter",
        "getItemLabel",
        "createStyleElement",
        "destroyStyleElement",
        "setTabindex",
        "columns",
        "processedData",
        "dataToRender",
        "empty",
        "sorted",
        "hasFooter",
        "paginatorTop",
        "paginatorBottom",
        "singleSelectionMode",
        "multipleSelectionMode",
        "rowSelectionMode",
        "totalRecordsLength",
        "dataP"
      ]
    }
  },
  "useconfirm": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "composables": [
        "useConfirm"
      ],
      "methods": [
        "useConfirm"
      ]
    }
  },
  "usedialog": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "composables": [
        "useDialog"
      ],
      "methods": [
        "useDialog"
      ]
    }
  },
  "usestyle": {
    "props": {},
    "emits": {},
    "slots": {}
  },
  "usetoast": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "composables": [
        "useToast"
      ],
      "methods": [
        "useToast"
      ]
    }
  },
  "utils": {
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "methods": [
        "blockBodyScroll",
        "unblockBodyScroll"
      ]
    }
  },
  "virtualscroller": {
    "title": "VirtualScroller",
    "description": "VirtualScroller is a performant approach to render large amounts of data efficiently.",
    "examples": [
      "<VirtualScroller :items=\"items\" :itemSize=\"50\" class=\"border border-surface-200 dark:border-surface-700 rounded\" style=\"width: 200px; height: 200px\">\n    <template v-slot:item=\"{ item, options }\">\n        <div :class=\"['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]\" style=\"height: 50px\">{{ item }}</div>\n    </template>\n</VirtualScroller>",
      "<VirtualScroller :items=\"items\" :itemSize=\"50\" orientation=\"horizontal\" class=\"border border-surface-200 dark:border-surface-700 rounded\" style=\"width: 200px; height: 200px\" :pt=\"{ content: 'flex flex-row' }\">\n    <template v-slot:item=\"{ item, options }\">\n        <div :class=\"['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]\" style=\"width: 50px; writing-mode: vertical-lr;\">{{ item }}</div>\n    </template>\n</VirtualScroller>",
      "<VirtualScroller :items=\"items\" :itemSize=\"[50, 100]\" orientation=\"both\" class=\"border border-surface-200 dark:border-surface-700 rounded\" style=\"width: 200px; height: 200px\">\n    <template v-slot:item=\"{ item, options }\">\n        <div :class=\"['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]\" style=\"height: 50px\">\n            <template v-for=\"(el, index) of item\" :key=\"index\">\n                <div style=\"width: 100px\">{{ el }}</div>\n            </template>\n        </div>\n    </template>\n</VirtualScroller>",
      "<VirtualScroller :items=\"items\" :itemSize=\"50\" class=\"border border-surface-200 dark:border-surface-700 rounded\" style=\"width: 200px; height: 200px\">\n    <template v-slot:item=\"{ item, options }\">\n        <div :class=\"['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]\" style=\"height: 50px\">{{ item }}</div>\n    </template>\n</VirtualScroller>\n\n<VirtualScroller :items=\"items\" :itemSize=\"50\" :delay=\"150\" class=\"border border-surface-200 dark:border-surface-700 rounded\" style=\"width: 200px; height: 200px\">\n    <template v-slot:item=\"{ item, options }\">\n        <div :class=\"['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]\" style=\"height: 50px\">{{ item }}</div>\n    </template>\n</VirtualScroller>\n\n<VirtualScroller :items=\"items\" :itemSize=\"50\" :delay=\"500\" class=\"border border-surface-200 dark:border-surface-700 rounded\" style=\"width: 200px; height: 200px\">\n    <template v-slot:item=\"{ item, options }\">\n        <div :class=\"['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]\" style=\"height: 50px\">{{ item }}</div>\n    </template>\n</VirtualScroller>",
      "<VirtualScroller :items=\"items\" :itemSize=\"50\" showLoader :delay=\"250\" class=\"border border-surface-200 dark:border-surface-700 rounded\" style=\"width: 200px; height: 200px\">\n    <template v-slot:item=\"{ item, options }\">\n        <div :class=\"['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]\" style=\"height: 50px\">{{ item }}</div>\n    </template>\n</VirtualScroller>\n\n<VirtualScroller :items=\"items\" :itemSize=\"50\" showLoader :delay=\"250\" class=\"border border-surface-200 dark:border-surface-700 rounded\" style=\"width: 200px; height: 200px\">\n    <template v-slot:item=\"{ item, options }\">\n        <div :class=\"['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]\" style=\"height: 50px\">{{ item }}</div>\n    </template>\n    <template v-slot:loader=\"{ options }\">\n        <div :class=\"['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]\" style=\"height: 50px\">\n            <Skeleton :width=\"options.even ? '60%' : '50%'\" height=\"1.3rem\" />\n        </div>\n    </template>\n</VirtualScroller>",
      "<VirtualScroller :items=\"lazyItems\" :itemSize=\"50\" showLoader :delay=\"250\" :loading=\"lazyLoading\" lazy @lazy-load=\"onLazyLoad\" class=\"border border-surface-200 dark:border-surface-700 rounded\" style=\"width: 200px; height: 200px\">\n    <template v-slot:item=\"{ item, options }\">\n        <div :class=\"['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]\" style=\"height: 50px\">{{ item }}</div>\n    </template>\n</VirtualScroller>"
    ],
    "props": {},
    "emits": {},
    "slots": {},
    "logic": {
      "vueImports": [
        "ref",
        "watch",
        "computed"
      ],
      "methods": [
        "data",
        "numToleratedItems",
        "loading",
        "handler",
        "itemSize",
        "orientation",
        "scrollHeight",
        "scrollWidth",
        "mounted",
        "updated",
        "unmounted",
        "viewInit",
        "if",
        "init",
        "isVertical",
        "isHorizontal",
        "isBoth",
        "scrollTo",
        "scrollToIndex",
        "scrollInView",
        "getRenderedRange",
        "calculateNumItems",
        "calculateOptions",
        "calculateAutoSize",
        "getLast",
        "getContentPosition",
        "setSize",
        "setSpacerSize",
        "setContentPosition",
        "onScrollPositionChange",
        "onScrollChange",
        "onScroll",
        "onResize",
        "bindResizeListener",
        "unbindResizeListener",
        "getOptions",
        "getLoaderOptions",
        "getPageByFirst",
        "isPageChanged",
        "setContentEl",
        "elementRef",
        "contentRef",
        "containerClass",
        "contentClass",
        "loaderClass",
        "loadedItems",
        "loadedRows",
        "loadedColumns"
      ]
    }
  },
  "_tokens": {
    "--p-accordion-panel-border-width": "dt('accordion.panel.border.width')",
    "--p-accordion-panel-border-color": "dt('accordion.panel.border.color')",
    "--p-accordion-header-padding": "dt('accordion.header.padding')",
    "--p-accordion-header-color": "dt('accordion.header.color')",
    "--p-accordion-header-background": "dt('accordion.header.background')",
    "--p-accordion-header-border-width": "dt('accordion.header.border.width')",
    "--p-accordion-header-border-color": "dt('accordion.header.border.color')",
    "--p-accordion-header-font-weight": "dt('accordion.header.font.weight')",
    "--p-accordion-header-border-radius": "dt('accordion.header.border.radius')",
    "--p-accordion-transition-duration": "dt('accordion.transition.duration')",
    "--p-accordion-header-first-border-width": "dt('accordion.header.first.border.width')",
    "--p-accordion-header-first-top-border-radius": "dt('accordion.header.first.top.border.radius')",
    "--p-accordion-header-last-bottom-border-radius": "dt('accordion.header.last.bottom.border.radius')",
    "--p-accordion-header-last-active-bottom-border-radius": "dt('accordion.header.last.active.bottom.border.radius')",
    "--p-accordion-header-toggle-icon-color": "dt('accordion.header.toggle.icon.color')",
    "--p-accordion-header-focus-ring-shadow": "dt('accordion.header.focus.ring.shadow')",
    "--p-accordion-header-focus-ring-width": "dt('accordion.header.focus.ring.width')",
    "--p-accordion-header-focus-ring-style": "dt('accordion.header.focus.ring.style')",
    "--p-accordion-header-focus-ring-color": "dt('accordion.header.focus.ring.color')",
    "--p-accordion-header-focus-ring-offset": "dt('accordion.header.focus.ring.offset')",
    "--p-accordion-header-hover-background": "dt('accordion.header.hover.background')",
    "--p-accordion-header-hover-color": "dt('accordion.header.hover.color')",
    "--p-accordion-header-toggle-icon-hover-color": "dt('accordion.header.toggle.icon.hover.color')",
    "--p-accordion-header-active-background": "dt('accordion.header.active.background')",
    "--p-accordion-header-active-color": "dt('accordion.header.active.color')",
    "--p-accordion-header-toggle-icon-active-color": "dt('accordion.header.toggle.icon.active.color')",
    "--p-accordion-header-active-hover-background": "dt('accordion.header.active.hover.background')",
    "--p-accordion-header-active-hover-color": "dt('accordion.header.active.hover.color')",
    "--p-accordion-header-toggle-icon-active-hover-color": "dt('accordion.header.toggle.icon.active.hover.color')",
    "--p-accordion-content-border-width": "dt('accordion.content.border.width')",
    "--p-accordion-content-border-color": "dt('accordion.content.border.color')",
    "--p-accordion-content-background": "dt('accordion.content.background')",
    "--p-accordion-content-color": "dt('accordion.content.color')",
    "--p-accordion-content-padding": "dt('accordion.content.padding')",
    "--p-autocomplete-padding-x": "dt('autocomplete.padding.x')",
    "--p-autocomplete-dropdown-width": "dt('autocomplete.dropdown.width')",
    "--p-autocomplete-dropdown-border-radius": "dt('autocomplete.dropdown.border.radius')",
    "--p-autocomplete-dropdown-background": "dt('autocomplete.dropdown.background')",
    "--p-autocomplete-dropdown-border-color": "dt('autocomplete.dropdown.border.color')",
    "--p-autocomplete-dropdown-color": "dt('autocomplete.dropdown.color')",
    "--p-autocomplete-transition-duration": "dt('autocomplete.transition.duration')",
    "--p-autocomplete-dropdown-hover-background": "dt('autocomplete.dropdown.hover.background')",
    "--p-autocomplete-dropdown-hover-border-color": "dt('autocomplete.dropdown.hover.border.color')",
    "--p-autocomplete-dropdown-hover-color": "dt('autocomplete.dropdown.hover.color')",
    "--p-autocomplete-dropdown-active-background": "dt('autocomplete.dropdown.active.background')",
    "--p-autocomplete-dropdown-active-border-color": "dt('autocomplete.dropdown.active.border.color')",
    "--p-autocomplete-dropdown-active-color": "dt('autocomplete.dropdown.active.color')",
    "--p-autocomplete-dropdown-focus-ring-shadow": "dt('autocomplete.dropdown.focus.ring.shadow')",
    "--p-autocomplete-dropdown-focus-ring-width": "dt('autocomplete.dropdown.focus.ring.width')",
    "--p-autocomplete-dropdown-focus-ring-style": "dt('autocomplete.dropdown.focus.ring.style')",
    "--p-autocomplete-dropdown-focus-ring-color": "dt('autocomplete.dropdown.focus.ring.color')",
    "--p-autocomplete-dropdown-focus-ring-offset": "dt('autocomplete.dropdown.focus.ring.offset')",
    "--p-autocomplete-overlay-background": "dt('autocomplete.overlay.background')",
    "--p-autocomplete-overlay-color": "dt('autocomplete.overlay.color')",
    "--p-autocomplete-overlay-border-color": "dt('autocomplete.overlay.border.color')",
    "--p-autocomplete-overlay-border-radius": "dt('autocomplete.overlay.border.radius')",
    "--p-autocomplete-overlay-shadow": "dt('autocomplete.overlay.shadow')",
    "--p-autocomplete-list-gap": "dt('autocomplete.list.gap')",
    "--p-autocomplete-list-padding": "dt('autocomplete.list.padding')",
    "--p-autocomplete-option-padding": "dt('autocomplete.option.padding')",
    "--p-autocomplete-option-color": "dt('autocomplete.option.color')",
    "--p-autocomplete-option-border-radius": "dt('autocomplete.option.border.radius')",
    "--p-autocomplete-option-focus-background": "dt('autocomplete.option.focus.background')",
    "--p-autocomplete-option-focus-color": "dt('autocomplete.option.focus.color')",
    "--p-autocomplete-option-selected-background": "dt('autocomplete.option.selected.background')",
    "--p-autocomplete-option-selected-color": "dt('autocomplete.option.selected.color')",
    "--p-autocomplete-option-selected-focus-background": "dt('autocomplete.option.selected.focus.background')",
    "--p-autocomplete-option-selected-focus-color": "dt('autocomplete.option.selected.focus.color')",
    "--p-autocomplete-option-group-padding": "dt('autocomplete.option.group.padding')",
    "--p-autocomplete-option-group-color": "dt('autocomplete.option.group.color')",
    "--p-autocomplete-option-group-background": "dt('autocomplete.option.group.background')",
    "--p-autocomplete-option-group-font-weight": "dt('autocomplete.option.group.font.weight')",
    "--p-autocomplete-padding-y": "dt('autocomplete.padding.y')",
    "--p-autocomplete-color": "dt('autocomplete.color')",
    "--p-autocomplete-background": "dt('autocomplete.background')",
    "--p-autocomplete-border-color": "dt('autocomplete.border.color')",
    "--p-autocomplete-border-radius": "dt('autocomplete.border.radius')",
    "--p-autocomplete-shadow": "dt('autocomplete.shadow')",
    "--p-inputtext-disabled-background": "dt('inputtext.disabled.background')",
    "--p-inputtext-disabled-color": "dt('inputtext.disabled.color')",
    "--p-autocomplete-hover-border-color": "dt('autocomplete.hover.border.color')",
    "--p-autocomplete-focus-border-color": "dt('autocomplete.focus.border.color')",
    "--p-autocomplete-focus-ring-shadow": "dt('autocomplete.focus.ring.shadow')",
    "--p-autocomplete-focus-ring-width": "dt('autocomplete.focus.ring.width')",
    "--p-autocomplete-focus-ring-style": "dt('autocomplete.focus.ring.style')",
    "--p-autocomplete-focus-ring-color": "dt('autocomplete.focus.ring.color')",
    "--p-autocomplete-focus-ring-offset": "dt('autocomplete.focus.ring.offset')",
    "--p-autocomplete-invalid-border-color": "dt('autocomplete.invalid.border.color')",
    "--p-autocomplete-filled-background": "dt('autocomplete.filled.background')",
    "--p-autocomplete-filled-hover-background": "dt('autocomplete.filled.hover.background')",
    "--p-autocomplete-filled-focus-background": "dt('autocomplete.filled.focus.background')",
    "--p-autocomplete-chip-border-radius": "dt('autocomplete.chip.border.radius')",
    "--p-autocomplete-chip-focus-background": "dt('autocomplete.chip.focus.background')",
    "--p-autocomplete-chip-focus-color": "dt('autocomplete.chip.focus.color')",
    "--p-autocomplete-placeholder-color": "dt('autocomplete.placeholder.color')",
    "--p-autocomplete-invalid-placeholder-color": "dt('autocomplete.invalid.placeholder.color')",
    "--p-autocomplete-empty-message-padding": "dt('autocomplete.empty.message.padding')",
    "--p-autocomplete-dropdown-sm-width": "dt('autocomplete.dropdown.sm.width')",
    "--p-form-field-sm-font-size": "dt('form.field.sm.font.size')",
    "--p-autocomplete-dropdown-lg-width": "dt('autocomplete.dropdown.lg.width')",
    "--p-form-field-lg-font-size": "dt('form.field.lg.font.size')",
    "--p-form-field-icon-color": "dt('form.field.icon.color')",
    "--p-form-field-padding-x": "dt('form.field.padding.x')",
    "--p-icon-size": "dt('icon.size')",
    "--p-avatar-width": "dt('avatar.width')",
    "--p-avatar-height": "dt('avatar.height')",
    "--p-avatar-font-size": "dt('avatar.font.size')",
    "--p-avatar-background": "dt('avatar.background')",
    "--p-avatar-color": "dt('avatar.color')",
    "--p-avatar-border-radius": "dt('avatar.border.radius')",
    "--p-avatar-icon-size": "dt('avatar.icon.size')",
    "--p-avatar-lg-width": "dt('avatar.lg.width')",
    "--p-avatar-lg-font-size": "dt('avatar.lg.font.size')",
    "--p-avatar-lg-icon-size": "dt('avatar.lg.icon.size')",
    "--p-avatar-xl-width": "dt('avatar.xl.width')",
    "--p-avatar-xl-font-size": "dt('avatar.xl.font.size')",
    "--p-avatar-xl-icon-size": "dt('avatar.xl.icon.size')",
    "--p-avatar-group-offset": "dt('avatar.group.offset')",
    "--p-avatar-group-border-color": "dt('avatar.group.border.color')",
    "--p-avatar-lg-group-offset": "dt('avatar.lg.group.offset')",
    "--p-avatar-xl-group-offset": "dt('avatar.xl.group.offset')",
    "--p-badge-border-radius": "dt('badge.border.radius')",
    "--p-badge-padding": "dt('badge.padding')",
    "--p-badge-primary-background": "dt('badge.primary.background')",
    "--p-badge-primary-color": "dt('badge.primary.color')",
    "--p-badge-font-size": "dt('badge.font.size')",
    "--p-badge-font-weight": "dt('badge.font.weight')",
    "--p-badge-min-width": "dt('badge.min.width')",
    "--p-badge-height": "dt('badge.height')",
    "--p-badge-dot-size": "dt('badge.dot.size')",
    "--p-badge-secondary-background": "dt('badge.secondary.background')",
    "--p-badge-secondary-color": "dt('badge.secondary.color')",
    "--p-badge-success-background": "dt('badge.success.background')",
    "--p-badge-success-color": "dt('badge.success.color')",
    "--p-badge-info-background": "dt('badge.info.background')",
    "--p-badge-info-color": "dt('badge.info.color')",
    "--p-badge-warn-background": "dt('badge.warn.background')",
    "--p-badge-warn-color": "dt('badge.warn.color')",
    "--p-badge-danger-background": "dt('badge.danger.background')",
    "--p-badge-danger-color": "dt('badge.danger.color')",
    "--p-badge-contrast-background": "dt('badge.contrast.background')",
    "--p-badge-contrast-color": "dt('badge.contrast.color')",
    "--p-badge-sm-font-size": "dt('badge.sm.font.size')",
    "--p-badge-sm-min-width": "dt('badge.sm.min.width')",
    "--p-badge-sm-height": "dt('badge.sm.height')",
    "--p-badge-lg-font-size": "dt('badge.lg.font.size')",
    "--p-badge-lg-min-width": "dt('badge.lg.min.width')",
    "--p-badge-lg-height": "dt('badge.lg.height')",
    "--p-badge-xl-font-size": "dt('badge.xl.font.size')",
    "--p-badge-xl-min-width": "dt('badge.xl.min.width')",
    "--p-badge-xl-height": "dt('badge.xl.height')",
    "--p-disabled-opacity": "dt('disabled.opacity')",
    "--p-mask-background": "dt('mask.background')",
    "--p-mask-color": "dt('mask.color')",
    "--p-mask-transition-duration": "dt('mask.transition.duration')",
    "--p-blockui-border-radius": "dt('blockui.border.radius')",
    "--p-breadcrumb-background": "dt('breadcrumb.background')",
    "--p-breadcrumb-padding": "dt('breadcrumb.padding')",
    "--p-breadcrumb-gap": "dt('breadcrumb.gap')",
    "--p-breadcrumb-separator-color": "dt('breadcrumb.separator.color')",
    "--p-breadcrumb-item-gap": "dt('breadcrumb.item.gap')",
    "--p-breadcrumb-transition-duration": "dt('breadcrumb.transition.duration')",
    "--p-breadcrumb-item-border-radius": "dt('breadcrumb.item.border.radius')",
    "--p-breadcrumb-item-color": "dt('breadcrumb.item.color')",
    "--p-breadcrumb-item-focus-ring-shadow": "dt('breadcrumb.item.focus.ring.shadow')",
    "--p-breadcrumb-item-focus-ring-width": "dt('breadcrumb.item.focus.ring.width')",
    "--p-breadcrumb-item-focus-ring-style": "dt('breadcrumb.item.focus.ring.style')",
    "--p-breadcrumb-item-focus-ring-color": "dt('breadcrumb.item.focus.ring.color')",
    "--p-breadcrumb-item-focus-ring-offset": "dt('breadcrumb.item.focus.ring.offset')",
    "--p-breadcrumb-item-hover-color": "dt('breadcrumb.item.hover.color')",
    "--p-breadcrumb-item-icon-color": "dt('breadcrumb.item.icon.color')",
    "--p-breadcrumb-item-icon-hover-color": "dt('breadcrumb.item.icon.hover.color')",
    "--p-button-primary-color": "dt('button.primary.color')",
    "--p-button-primary-background": "dt('button.primary.background')",
    "--p-button-primary-border-color": "dt('button.primary.border.color')",
    "--p-button-padding-y": "dt('button.padding.y')",
    "--p-button-padding-x": "dt('button.padding.x')",
    "--p-button-transition-duration": "dt('button.transition.duration')",
    "--p-button-border-radius": "dt('button.border.radius')",
    "--p-button-gap": "dt('button.gap')",
    "--p-button-icon-only-width": "dt('button.icon.only.width')",
    "--p-button-sm-font-size": "dt('button.sm.font.size')",
    "--p-button-sm-padding-y": "dt('button.sm.padding.y')",
    "--p-button-sm-padding-x": "dt('button.sm.padding.x')",
    "--p-button-sm-icon-only-width": "dt('button.sm.icon.only.width')",
    "--p-button-lg-font-size": "dt('button.lg.font.size')",
    "--p-button-lg-padding-y": "dt('button.lg.padding.y')",
    "--p-button-lg-padding-x": "dt('button.lg.padding.x')",
    "--p-button-lg-icon-only-width": "dt('button.lg.icon.only.width')",
    "--p-button-label-font-weight": "dt('button.label.font.weight')",
    "--p-button-primary-hover-background": "dt('button.primary.hover.background')",
    "--p-button-primary-hover-border-color": "dt('button.primary.hover.border.color')",
    "--p-button-primary-hover-color": "dt('button.primary.hover.color')",
    "--p-button-primary-active-background": "dt('button.primary.active.background')",
    "--p-button-primary-active-border-color": "dt('button.primary.active.border.color')",
    "--p-button-primary-active-color": "dt('button.primary.active.color')",
    "--p-button-primary-focus-ring-shadow": "dt('button.primary.focus.ring.shadow')",
    "--p-button-focus-ring-width": "dt('button.focus.ring.width')",
    "--p-button-focus-ring-style": "dt('button.focus.ring.style')",
    "--p-button-primary-focus-ring-color": "dt('button.primary.focus.ring.color')",
    "--p-button-focus-ring-offset": "dt('button.focus.ring.offset')",
    "--p-button-badge-size": "dt('button.badge.size')",
    "--p-button-raised-shadow": "dt('button.raised.shadow')",
    "--p-button-rounded-border-radius": "dt('button.rounded.border.radius')",
    "--p-button-secondary-background": "dt('button.secondary.background')",
    "--p-button-secondary-border-color": "dt('button.secondary.border.color')",
    "--p-button-secondary-color": "dt('button.secondary.color')",
    "--p-button-secondary-hover-background": "dt('button.secondary.hover.background')",
    "--p-button-secondary-hover-border-color": "dt('button.secondary.hover.border.color')",
    "--p-button-secondary-hover-color": "dt('button.secondary.hover.color')",
    "--p-button-secondary-active-background": "dt('button.secondary.active.background')",
    "--p-button-secondary-active-border-color": "dt('button.secondary.active.border.color')",
    "--p-button-secondary-active-color": "dt('button.secondary.active.color')",
    "--p-button-secondary-focus-ring-color": "dt('button.secondary.focus.ring.color')",
    "--p-button-secondary-focus-ring-shadow": "dt('button.secondary.focus.ring.shadow')",
    "--p-button-success-background": "dt('button.success.background')",
    "--p-button-success-border-color": "dt('button.success.border.color')",
    "--p-button-success-color": "dt('button.success.color')",
    "--p-button-success-hover-background": "dt('button.success.hover.background')",
    "--p-button-success-hover-border-color": "dt('button.success.hover.border.color')",
    "--p-button-success-hover-color": "dt('button.success.hover.color')",
    "--p-button-success-active-background": "dt('button.success.active.background')",
    "--p-button-success-active-border-color": "dt('button.success.active.border.color')",
    "--p-button-success-active-color": "dt('button.success.active.color')",
    "--p-button-success-focus-ring-color": "dt('button.success.focus.ring.color')",
    "--p-button-success-focus-ring-shadow": "dt('button.success.focus.ring.shadow')",
    "--p-button-info-background": "dt('button.info.background')",
    "--p-button-info-border-color": "dt('button.info.border.color')",
    "--p-button-info-color": "dt('button.info.color')",
    "--p-button-info-hover-background": "dt('button.info.hover.background')",
    "--p-button-info-hover-border-color": "dt('button.info.hover.border.color')",
    "--p-button-info-hover-color": "dt('button.info.hover.color')",
    "--p-button-info-active-background": "dt('button.info.active.background')",
    "--p-button-info-active-border-color": "dt('button.info.active.border.color')",
    "--p-button-info-active-color": "dt('button.info.active.color')",
    "--p-button-info-focus-ring-color": "dt('button.info.focus.ring.color')",
    "--p-button-info-focus-ring-shadow": "dt('button.info.focus.ring.shadow')",
    "--p-button-warn-background": "dt('button.warn.background')",
    "--p-button-warn-border-color": "dt('button.warn.border.color')",
    "--p-button-warn-color": "dt('button.warn.color')",
    "--p-button-warn-hover-background": "dt('button.warn.hover.background')",
    "--p-button-warn-hover-border-color": "dt('button.warn.hover.border.color')",
    "--p-button-warn-hover-color": "dt('button.warn.hover.color')",
    "--p-button-warn-active-background": "dt('button.warn.active.background')",
    "--p-button-warn-active-border-color": "dt('button.warn.active.border.color')",
    "--p-button-warn-active-color": "dt('button.warn.active.color')",
    "--p-button-warn-focus-ring-color": "dt('button.warn.focus.ring.color')",
    "--p-button-warn-focus-ring-shadow": "dt('button.warn.focus.ring.shadow')",
    "--p-button-help-background": "dt('button.help.background')",
    "--p-button-help-border-color": "dt('button.help.border.color')",
    "--p-button-help-color": "dt('button.help.color')",
    "--p-button-help-hover-background": "dt('button.help.hover.background')",
    "--p-button-help-hover-border-color": "dt('button.help.hover.border.color')",
    "--p-button-help-hover-color": "dt('button.help.hover.color')",
    "--p-button-help-active-background": "dt('button.help.active.background')",
    "--p-button-help-active-border-color": "dt('button.help.active.border.color')",
    "--p-button-help-active-color": "dt('button.help.active.color')",
    "--p-button-help-focus-ring-color": "dt('button.help.focus.ring.color')",
    "--p-button-help-focus-ring-shadow": "dt('button.help.focus.ring.shadow')",
    "--p-button-danger-background": "dt('button.danger.background')",
    "--p-button-danger-border-color": "dt('button.danger.border.color')",
    "--p-button-danger-color": "dt('button.danger.color')",
    "--p-button-danger-hover-background": "dt('button.danger.hover.background')",
    "--p-button-danger-hover-border-color": "dt('button.danger.hover.border.color')",
    "--p-button-danger-hover-color": "dt('button.danger.hover.color')",
    "--p-button-danger-active-background": "dt('button.danger.active.background')",
    "--p-button-danger-active-border-color": "dt('button.danger.active.border.color')",
    "--p-button-danger-active-color": "dt('button.danger.active.color')",
    "--p-button-danger-focus-ring-color": "dt('button.danger.focus.ring.color')",
    "--p-button-danger-focus-ring-shadow": "dt('button.danger.focus.ring.shadow')",
    "--p-button-contrast-background": "dt('button.contrast.background')",
    "--p-button-contrast-border-color": "dt('button.contrast.border.color')",
    "--p-button-contrast-color": "dt('button.contrast.color')",
    "--p-button-contrast-hover-background": "dt('button.contrast.hover.background')",
    "--p-button-contrast-hover-border-color": "dt('button.contrast.hover.border.color')",
    "--p-button-contrast-hover-color": "dt('button.contrast.hover.color')",
    "--p-button-contrast-active-background": "dt('button.contrast.active.background')",
    "--p-button-contrast-active-border-color": "dt('button.contrast.active.border.color')",
    "--p-button-contrast-active-color": "dt('button.contrast.active.color')",
    "--p-button-contrast-focus-ring-color": "dt('button.contrast.focus.ring.color')",
    "--p-button-contrast-focus-ring-shadow": "dt('button.contrast.focus.ring.shadow')",
    "--p-button-outlined-primary-border-color": "dt('button.outlined.primary.border.color')",
    "--p-button-outlined-primary-color": "dt('button.outlined.primary.color')",
    "--p-button-outlined-primary-hover-background": "dt('button.outlined.primary.hover.background')",
    "--p-button-outlined-primary-active-background": "dt('button.outlined.primary.active.background')",
    "--p-button-outlined-secondary-border-color": "dt('button.outlined.secondary.border.color')",
    "--p-button-outlined-secondary-color": "dt('button.outlined.secondary.color')",
    "--p-button-outlined-secondary-hover-background": "dt('button.outlined.secondary.hover.background')",
    "--p-button-outlined-secondary-active-background": "dt('button.outlined.secondary.active.background')",
    "--p-button-outlined-success-border-color": "dt('button.outlined.success.border.color')",
    "--p-button-outlined-success-color": "dt('button.outlined.success.color')",
    "--p-button-outlined-success-hover-background": "dt('button.outlined.success.hover.background')",
    "--p-button-outlined-success-active-background": "dt('button.outlined.success.active.background')",
    "--p-button-outlined-info-border-color": "dt('button.outlined.info.border.color')",
    "--p-button-outlined-info-color": "dt('button.outlined.info.color')",
    "--p-button-outlined-info-hover-background": "dt('button.outlined.info.hover.background')",
    "--p-button-outlined-info-active-background": "dt('button.outlined.info.active.background')",
    "--p-button-outlined-warn-border-color": "dt('button.outlined.warn.border.color')",
    "--p-button-outlined-warn-color": "dt('button.outlined.warn.color')",
    "--p-button-outlined-warn-hover-background": "dt('button.outlined.warn.hover.background')",
    "--p-button-outlined-warn-active-background": "dt('button.outlined.warn.active.background')",
    "--p-button-outlined-help-border-color": "dt('button.outlined.help.border.color')",
    "--p-button-outlined-help-color": "dt('button.outlined.help.color')",
    "--p-button-outlined-help-hover-background": "dt('button.outlined.help.hover.background')",
    "--p-button-outlined-help-active-background": "dt('button.outlined.help.active.background')",
    "--p-button-outlined-danger-border-color": "dt('button.outlined.danger.border.color')",
    "--p-button-outlined-danger-color": "dt('button.outlined.danger.color')",
    "--p-button-outlined-danger-hover-background": "dt('button.outlined.danger.hover.background')",
    "--p-button-outlined-danger-active-background": "dt('button.outlined.danger.active.background')",
    "--p-button-outlined-contrast-border-color": "dt('button.outlined.contrast.border.color')",
    "--p-button-outlined-contrast-color": "dt('button.outlined.contrast.color')",
    "--p-button-outlined-contrast-hover-background": "dt('button.outlined.contrast.hover.background')",
    "--p-button-outlined-contrast-active-background": "dt('button.outlined.contrast.active.background')",
    "--p-button-outlined-plain-border-color": "dt('button.outlined.plain.border.color')",
    "--p-button-outlined-plain-color": "dt('button.outlined.plain.color')",
    "--p-button-outlined-plain-hover-background": "dt('button.outlined.plain.hover.background')",
    "--p-button-outlined-plain-active-background": "dt('button.outlined.plain.active.background')",
    "--p-button-text-primary-color": "dt('button.text.primary.color')",
    "--p-button-text-primary-hover-background": "dt('button.text.primary.hover.background')",
    "--p-button-text-primary-active-background": "dt('button.text.primary.active.background')",
    "--p-button-text-secondary-color": "dt('button.text.secondary.color')",
    "--p-button-text-secondary-hover-background": "dt('button.text.secondary.hover.background')",
    "--p-button-text-secondary-active-background": "dt('button.text.secondary.active.background')",
    "--p-button-text-success-color": "dt('button.text.success.color')",
    "--p-button-text-success-hover-background": "dt('button.text.success.hover.background')",
    "--p-button-text-success-active-background": "dt('button.text.success.active.background')",
    "--p-button-text-info-color": "dt('button.text.info.color')",
    "--p-button-text-info-hover-background": "dt('button.text.info.hover.background')",
    "--p-button-text-info-active-background": "dt('button.text.info.active.background')",
    "--p-button-text-warn-color": "dt('button.text.warn.color')",
    "--p-button-text-warn-hover-background": "dt('button.text.warn.hover.background')",
    "--p-button-text-warn-active-background": "dt('button.text.warn.active.background')",
    "--p-button-text-help-color": "dt('button.text.help.color')",
    "--p-button-text-help-hover-background": "dt('button.text.help.hover.background')",
    "--p-button-text-help-active-background": "dt('button.text.help.active.background')",
    "--p-button-text-danger-color": "dt('button.text.danger.color')",
    "--p-button-text-danger-hover-background": "dt('button.text.danger.hover.background')",
    "--p-button-text-danger-active-background": "dt('button.text.danger.active.background')",
    "--p-button-text-contrast-color": "dt('button.text.contrast.color')",
    "--p-button-text-contrast-hover-background": "dt('button.text.contrast.hover.background')",
    "--p-button-text-contrast-active-background": "dt('button.text.contrast.active.background')",
    "--p-button-text-plain-color": "dt('button.text.plain.color')",
    "--p-button-text-plain-hover-background": "dt('button.text.plain.hover.background')",
    "--p-button-text-plain-active-background": "dt('button.text.plain.active.background')",
    "--p-button-link-color": "dt('button.link.color')",
    "--p-button-link-hover-color": "dt('button.link.hover.color')",
    "--p-button-link-active-color": "dt('button.link.active.color')",
    "--p-card-background": "dt('card.background')",
    "--p-card-color": "dt('card.color')",
    "--p-card-shadow": "dt('card.shadow')",
    "--p-card-border-radius": "dt('card.border.radius')",
    "--p-card-caption-gap": "dt('card.caption.gap')",
    "--p-card-body-padding": "dt('card.body.padding')",
    "--p-card-body-gap": "dt('card.body.gap')",
    "--p-card-title-font-size": "dt('card.title.font.size')",
    "--p-card-title-font-weight": "dt('card.title.font.weight')",
    "--p-card-subtitle-color": "dt('card.subtitle.color')",
    "--p-carousel-content-gap": "dt('carousel.content.gap')",
    "--p-carousel-indicator-list-padding": "dt('carousel.indicator.list.padding')",
    "--p-carousel-indicator-list-gap": "dt('carousel.indicator.list.gap')",
    "--p-carousel-indicator-background": "dt('carousel.indicator.background')",
    "--p-carousel-indicator-width": "dt('carousel.indicator.width')",
    "--p-carousel-indicator-height": "dt('carousel.indicator.height')",
    "--p-carousel-transition-duration": "dt('carousel.transition.duration')",
    "--p-carousel-indicator-border-radius": "dt('carousel.indicator.border.radius')",
    "--p-carousel-indicator-focus-ring-shadow": "dt('carousel.indicator.focus.ring.shadow')",
    "--p-carousel-indicator-focus-ring-width": "dt('carousel.indicator.focus.ring.width')",
    "--p-carousel-indicator-focus-ring-style": "dt('carousel.indicator.focus.ring.style')",
    "--p-carousel-indicator-focus-ring-color": "dt('carousel.indicator.focus.ring.color')",
    "--p-carousel-indicator-focus-ring-offset": "dt('carousel.indicator.focus.ring.offset')",
    "--p-carousel-indicator-hover-background": "dt('carousel.indicator.hover.background')",
    "--p-carousel-indicator-active-background": "dt('carousel.indicator.active.background')",
    "--p-cascadeselect-background": "dt('cascadeselect.background')",
    "--p-cascadeselect-border-color": "dt('cascadeselect.border.color')",
    "--p-cascadeselect-transition-duration": "dt('cascadeselect.transition.duration')",
    "--p-cascadeselect-border-radius": "dt('cascadeselect.border.radius')",
    "--p-cascadeselect-shadow": "dt('cascadeselect.shadow')",
    "--p-cascadeselect-hover-border-color": "dt('cascadeselect.hover.border.color')",
    "--p-cascadeselect-focus-border-color": "dt('cascadeselect.focus.border.color')",
    "--p-cascadeselect-focus-ring-shadow": "dt('cascadeselect.focus.ring.shadow')",
    "--p-cascadeselect-focus-ring-width": "dt('cascadeselect.focus.ring.width')",
    "--p-cascadeselect-focus-ring-style": "dt('cascadeselect.focus.ring.style')",
    "--p-cascadeselect-focus-ring-color": "dt('cascadeselect.focus.ring.color')",
    "--p-cascadeselect-focus-ring-offset": "dt('cascadeselect.focus.ring.offset')",
    "--p-cascadeselect-filled-background": "dt('cascadeselect.filled.background')",
    "--p-cascadeselect-filled-hover-background": "dt('cascadeselect.filled.hover.background')",
    "--p-cascadeselect-filled-focus-background": "dt('cascadeselect.filled.focus.background')",
    "--p-cascadeselect-invalid-border-color": "dt('cascadeselect.invalid.border.color')",
    "--p-cascadeselect-disabled-background": "dt('cascadeselect.disabled.background')",
    "--p-cascadeselect-dropdown-color": "dt('cascadeselect.dropdown.color')",
    "--p-cascadeselect-dropdown-width": "dt('cascadeselect.dropdown.width')",
    "--p-border-radius-md": "dt('border.radius.md')",
    "--p-cascadeselect-clear-icon-color": "dt('cascadeselect.clear.icon.color')",
    "--p-cascadeselect-padding-y": "dt('cascadeselect.padding.y')",
    "--p-cascadeselect-padding-x": "dt('cascadeselect.padding.x')",
    "--p-cascadeselect-placeholder-color": "dt('cascadeselect.placeholder.color')",
    "--p-cascadeselect-invalid-placeholder-color": "dt('cascadeselect.invalid.placeholder.color')",
    "--p-cascadeselect-disabled-color": "dt('cascadeselect.disabled.color')",
    "--p-cascadeselect-overlay-background": "dt('cascadeselect.overlay.background')",
    "--p-cascadeselect-overlay-color": "dt('cascadeselect.overlay.color')",
    "--p-cascadeselect-overlay-border-color": "dt('cascadeselect.overlay.border.color')",
    "--p-cascadeselect-overlay-border-radius": "dt('cascadeselect.overlay.border.radius')",
    "--p-cascadeselect-overlay-shadow": "dt('cascadeselect.overlay.shadow')",
    "--p-cascadeselect-list-padding": "dt('cascadeselect.list.padding')",
    "--p-cascadeselect-list-gap": "dt('cascadeselect.list.gap')",
    "--p-cascadeselect-option-color": "dt('cascadeselect.option.color')",
    "--p-cascadeselect-option-border-radius": "dt('cascadeselect.option.border.radius')",
    "--p-cascadeselect-option-focus-background": "dt('cascadeselect.option.focus.background')",
    "--p-cascadeselect-option-focus-color": "dt('cascadeselect.option.focus.color')",
    "--p-cascadeselect-option-icon-focus-color": "dt('cascadeselect.option.icon.focus.color')",
    "--p-cascadeselect-option-selected-background": "dt('cascadeselect.option.selected.background')",
    "--p-cascadeselect-option-selected-color": "dt('cascadeselect.option.selected.color')",
    "--p-cascadeselect-option-selected-focus-background": "dt('cascadeselect.option.selected.focus.background')",
    "--p-cascadeselect-option-selected-focus-color": "dt('cascadeselect.option.selected.focus.color')",
    "--p-cascadeselect-option-padding": "dt('cascadeselect.option.padding')",
    "--p-cascadeselect-option-icon-size": "dt('cascadeselect.option.icon.size')",
    "--p-cascadeselect-option-icon-color": "dt('cascadeselect.option.icon.color')",
    "--p-tieredmenu-submenu-mobile-indent": "dt('tieredmenu.submenu.mobile.indent')",
    "--p-cascadeselect-sm-font-size": "dt('cascadeselect.sm.font.size')",
    "--p-cascadeselect-sm-padding-y": "dt('cascadeselect.sm.padding.y')",
    "--p-cascadeselect-sm-padding-x": "dt('cascadeselect.sm.padding.x')",
    "--p-cascadeselect-lg-font-size": "dt('cascadeselect.lg.font.size')",
    "--p-cascadeselect-lg-padding-y": "dt('cascadeselect.lg.padding.y')",
    "--p-cascadeselect-lg-padding-x": "dt('cascadeselect.lg.padding.x')",
    "--p-checkbox-width": "dt('checkbox.width')",
    "--p-checkbox-height": "dt('checkbox.height')",
    "--p-checkbox-border-radius": "dt('checkbox.border.radius')",
    "--p-checkbox-border-color": "dt('checkbox.border.color')",
    "--p-checkbox-background": "dt('checkbox.background')",
    "--p-checkbox-transition-duration": "dt('checkbox.transition.duration')",
    "--p-checkbox-shadow": "dt('checkbox.shadow')",
    "--p-checkbox-icon-color": "dt('checkbox.icon.color')",
    "--p-checkbox-icon-size": "dt('checkbox.icon.size')",
    "--p-checkbox-hover-border-color": "dt('checkbox.hover.border.color')",
    "--p-checkbox-checked-border-color": "dt('checkbox.checked.border.color')",
    "--p-checkbox-checked-background": "dt('checkbox.checked.background')",
    "--p-checkbox-icon-checked-color": "dt('checkbox.icon.checked.color')",
    "--p-checkbox-checked-hover-background": "dt('checkbox.checked.hover.background')",
    "--p-checkbox-checked-hover-border-color": "dt('checkbox.checked.hover.border.color')",
    "--p-checkbox-icon-checked-hover-color": "dt('checkbox.icon.checked.hover.color')",
    "--p-checkbox-focus-border-color": "dt('checkbox.focus.border.color')",
    "--p-checkbox-focus-ring-shadow": "dt('checkbox.focus.ring.shadow')",
    "--p-checkbox-focus-ring-width": "dt('checkbox.focus.ring.width')",
    "--p-checkbox-focus-ring-style": "dt('checkbox.focus.ring.style')",
    "--p-checkbox-focus-ring-color": "dt('checkbox.focus.ring.color')",
    "--p-checkbox-focus-ring-offset": "dt('checkbox.focus.ring.offset')",
    "--p-checkbox-checked-focus-border-color": "dt('checkbox.checked.focus.border.color')",
    "--p-checkbox-invalid-border-color": "dt('checkbox.invalid.border.color')",
    "--p-checkbox-filled-background": "dt('checkbox.filled.background')",
    "--p-checkbox-disabled-background": "dt('checkbox.disabled.background')",
    "--p-checkbox-checked-disabled-border-color": "dt('checkbox.checked.disabled.border.color')",
    "--p-checkbox-icon-disabled-color": "dt('checkbox.icon.disabled.color')",
    "--p-checkbox-sm-width": "dt('checkbox.sm.width')",
    "--p-checkbox-sm-height": "dt('checkbox.sm.height')",
    "--p-checkbox-icon-sm-size": "dt('checkbox.icon.sm.size')",
    "--p-checkbox-lg-width": "dt('checkbox.lg.width')",
    "--p-checkbox-lg-height": "dt('checkbox.lg.height')",
    "--p-checkbox-icon-lg-size": "dt('checkbox.icon.lg.size')",
    "--p-chip-background": "dt('chip.background')",
    "--p-chip-color": "dt('chip.color')",
    "--p-chip-border-radius": "dt('chip.border.radius')",
    "--p-chip-padding-y": "dt('chip.padding.y')",
    "--p-chip-padding-x": "dt('chip.padding.x')",
    "--p-chip-gap": "dt('chip.gap')",
    "--p-chip-icon-color": "dt('chip.icon.color')",
    "--p-chip-icon-font-size": "dt('chip.icon.font.size')",
    "--p-chip-icon-size": "dt('chip.icon.size')",
    "--p-chip-image-width": "dt('chip.image.width')",
    "--p-chip-image-height": "dt('chip.image.height')",
    "--p-chip-remove-icon-size": "dt('chip.remove.icon.size')",
    "--p-chip-remove-icon-color": "dt('chip.remove.icon.color')",
    "--p-chip-transition-duration": "dt('chip.transition.duration')",
    "--p-chip-remove-icon-focus-ring-shadow": "dt('chip.remove.icon.focus.ring.shadow')",
    "--p-chip-remove-icon-focus-ring-width": "dt('chip.remove.icon.focus.ring.width')",
    "--p-chip-remove-icon-focus-ring-style": "dt('chip.remove.icon.focus.ring.style')",
    "--p-chip-remove-icon-focus-ring-color": "dt('chip.remove.icon.focus.ring.color')",
    "--p-chip-remove-icon-focus-ring-offset": "dt('chip.remove.icon.focus.ring.offset')",
    "--p-colorpicker-preview-width": "dt('colorpicker.preview.width')",
    "--p-colorpicker-preview-height": "dt('colorpicker.preview.height')",
    "--p-colorpicker-preview-border-radius": "dt('colorpicker.preview.border.radius')",
    "--p-colorpicker-transition-duration": "dt('colorpicker.transition.duration')",
    "--p-colorpicker-preview-focus-border-color": "dt('colorpicker.preview.focus.border.color')",
    "--p-colorpicker-preview-focus-ring-shadow": "dt('colorpicker.preview.focus.ring.shadow')",
    "--p-colorpicker-preview-focus-ring-width": "dt('colorpicker.preview.focus.ring.width')",
    "--p-colorpicker-preview-focus-ring-style": "dt('colorpicker.preview.focus.ring.style')",
    "--p-colorpicker-preview-focus-ring-color": "dt('colorpicker.preview.focus.ring.color')",
    "--p-colorpicker-preview-focus-ring-offset": "dt('colorpicker.preview.focus.ring.offset')",
    "--p-colorpicker-panel-background": "dt('colorpicker.panel.background')",
    "--p-colorpicker-panel-border-color": "dt('colorpicker.panel.border.color')",
    "--p-colorpicker-panel-border-radius": "dt('colorpicker.panel.border.radius')",
    "--p-colorpicker-panel-shadow": "dt('colorpicker.panel.shadow')",
    "--p-colorpicker-handle-color": "dt('colorpicker.handle.color')",
    "--p-confirmdialog-content-gap": "dt('confirmdialog.content.gap')",
    "--p-confirmdialog-icon-color": "dt('confirmdialog.icon.color')",
    "--p-confirmdialog-icon-size": "dt('confirmdialog.icon.size')",
    "--p-confirmpopup-gutter": "dt('confirmpopup.gutter')",
    "--p-confirmpopup-background": "dt('confirmpopup.background')",
    "--p-confirmpopup-color": "dt('confirmpopup.color')",
    "--p-confirmpopup-border-color": "dt('confirmpopup.border.color')",
    "--p-confirmpopup-border-radius": "dt('confirmpopup.border.radius')",
    "--p-confirmpopup-shadow": "dt('confirmpopup.shadow')",
    "--p-confirmpopup-content-padding": "dt('confirmpopup.content.padding')",
    "--p-confirmpopup-content-gap": "dt('confirmpopup.content.gap')",
    "--p-confirmpopup-icon-size": "dt('confirmpopup.icon.size')",
    "--p-confirmpopup-icon-color": "dt('confirmpopup.icon.color')",
    "--p-confirmpopup-footer-gap": "dt('confirmpopup.footer.gap')",
    "--p-confirmpopup-footer-padding": "dt('confirmpopup.footer.padding')",
    "--p-confirmpopup-arrow-offset": "dt('confirmpopup.arrow.offset')",
    "--p-confirmpopup-arrow-left": "dt('confirmpopup.arrow.left')",
    "--p-contextmenu-background": "dt('contextmenu.background')",
    "--p-contextmenu-color": "dt('contextmenu.color')",
    "--p-contextmenu-border-color": "dt('contextmenu.border.color')",
    "--p-contextmenu-border-radius": "dt('contextmenu.border.radius')",
    "--p-contextmenu-shadow": "dt('contextmenu.shadow')",
    "--p-contextmenu-list-padding": "dt('contextmenu.list.padding')",
    "--p-contextmenu-list-gap": "dt('contextmenu.list.gap')",
    "--p-contextmenu-transition-duration": "dt('contextmenu.transition.duration')",
    "--p-contextmenu-item-border-radius": "dt('contextmenu.item.border.radius')",
    "--p-contextmenu-item-color": "dt('contextmenu.item.color')",
    "--p-contextmenu-item-padding": "dt('contextmenu.item.padding')",
    "--p-contextmenu-item-gap": "dt('contextmenu.item.gap')",
    "--p-contextmenu-item-icon-color": "dt('contextmenu.item.icon.color')",
    "--p-contextmenu-submenu-icon-color": "dt('contextmenu.submenu.icon.color')",
    "--p-contextmenu-submenu-icon-size": "dt('contextmenu.submenu.icon.size')",
    "--p-contextmenu-item-focus-color": "dt('contextmenu.item.focus.color')",
    "--p-contextmenu-item-focus-background": "dt('contextmenu.item.focus.background')",
    "--p-contextmenu-item-icon-focus-color": "dt('contextmenu.item.icon.focus.color')",
    "--p-contextmenu-submenu-icon-focus-color": "dt('contextmenu.submenu.icon.focus.color')",
    "--p-contextmenu-item-active-color": "dt('contextmenu.item.active.color')",
    "--p-contextmenu-item-active-background": "dt('contextmenu.item.active.background')",
    "--p-contextmenu-item-icon-active-color": "dt('contextmenu.item.icon.active.color')",
    "--p-contextmenu-submenu-icon-active-color": "dt('contextmenu.submenu.icon.active.color')",
    "--p-contextmenu-separator-border-color": "dt('contextmenu.separator.border.color')",
    "--p-datatable-header-cell-background": "dt('datatable.header.cell.background')",
    "--p-datatable-footer-cell-background": "dt('datatable.footer.cell.background')",
    "--p-datatable-column-resizer-width": "dt('datatable.column.resizer.width')",
    "--p-datatable-header-cell-gap": "dt('datatable.header.cell.gap')",
    "--p-datatable-resize-indicator-width": "dt('datatable.resize.indicator.width')",
    "--p-datatable-resize-indicator-color": "dt('datatable.resize.indicator.color')",
    "--p-datatable-filter-inline-gap": "dt('datatable.filter.inline.gap')",
    "--p-datatable-filter-overlay-select-background": "dt('datatable.filter.overlay.select.background')",
    "--p-datatable-filter-overlay-select-color": "dt('datatable.filter.overlay.select.color')",
    "--p-datatable-filter-overlay-select-border-color": "dt('datatable.filter.overlay.select.border.color')",
    "--p-datatable-filter-overlay-select-border-radius": "dt('datatable.filter.overlay.select.border.radius')",
    "--p-datatable-filter-overlay-select-shadow": "dt('datatable.filter.overlay.select.shadow')",
    "--p-datatable-filter-constraint-list-padding": "dt('datatable.filter.constraint.list.padding')",
    "--p-datatable-filter-constraint-list-gap": "dt('datatable.filter.constraint.list.gap')",
    "--p-datatable-filter-constraint-padding": "dt('datatable.filter.constraint.padding')",
    "--p-datatable-filter-constraint-color": "dt('datatable.filter.constraint.color')",
    "--p-datatable-filter-constraint-border-radius": "dt('datatable.filter.constraint.border.radius')",
    "--p-datatable-transition-duration": "dt('datatable.transition.duration')",
    "--p-datatable-filter-constraint-selected-background": "dt('datatable.filter.constraint.selected.background')",
    "--p-datatable-filter-constraint-selected-color": "dt('datatable.filter.constraint.selected.color')",
    "--p-datatable-filter-constraint-focus-background": "dt('datatable.filter.constraint.focus.background')",
    "--p-datatable-filter-constraint-focus-color": "dt('datatable.filter.constraint.focus.color')",
    "--p-datatable-filter-constraint-selected-focus-background": "dt('datatable.filter.constraint.selected.focus.background')",
    "--p-datatable-filter-constraint-selected-focus-color": "dt('datatable.filter.constraint.selected.focus.color')",
    "--p-datatable-filter-constraint-separator-border-color": "dt('datatable.filter.constraint.separator.border.color')",
    "--p-datatable-filter-overlay-popover-background": "dt('datatable.filter.overlay.popover.background')",
    "--p-datatable-filter-overlay-popover-color": "dt('datatable.filter.overlay.popover.color')",
    "--p-datatable-filter-overlay-popover-border-color": "dt('datatable.filter.overlay.popover.border.color')",
    "--p-datatable-filter-overlay-popover-border-radius": "dt('datatable.filter.overlay.popover.border.radius')",
    "--p-datatable-filter-overlay-popover-shadow": "dt('datatable.filter.overlay.popover.shadow')",
    "--p-datatable-filter-overlay-popover-padding": "dt('datatable.filter.overlay.popover.padding')",
    "--p-datatable-filter-overlay-popover-gap": "dt('datatable.filter.overlay.popover.gap')",
    "--p-datatable-filter-rule-border-color": "dt('datatable.filter.rule.border.color')",
    "--p-datatable-paginator-top-border-color": "dt('datatable.paginator.top.border.color')",
    "--p-datatable-paginator-top-border-width": "dt('datatable.paginator.top.border.width')",
    "--p-datatable-paginator-bottom-border-color": "dt('datatable.paginator.bottom.border.color')",
    "--p-datatable-paginator-bottom-border-width": "dt('datatable.paginator.bottom.border.width')",
    "--p-datatable-header-background": "dt('datatable.header.background')",
    "--p-datatable-header-color": "dt('datatable.header.color')",
    "--p-datatable-header-border-color": "dt('datatable.header.border.color')",
    "--p-datatable-header-border-width": "dt('datatable.header.border.width')",
    "--p-datatable-header-padding": "dt('datatable.header.padding')",
    "--p-datatable-footer-background": "dt('datatable.footer.background')",
    "--p-datatable-footer-color": "dt('datatable.footer.color')",
    "--p-datatable-footer-border-color": "dt('datatable.footer.border.color')",
    "--p-datatable-footer-border-width": "dt('datatable.footer.border.width')",
    "--p-datatable-footer-padding": "dt('datatable.footer.padding')",
    "--p-datatable-header-cell-padding": "dt('datatable.header.cell.padding')",
    "--p-datatable-header-cell-border-color": "dt('datatable.header.cell.border.color')",
    "--p-datatable-header-cell-color": "dt('datatable.header.cell.color')",
    "--p-datatable-column-title-font-weight": "dt('datatable.column.title.font.weight')",
    "--p-datatable-row-background": "dt('datatable.row.background')",
    "--p-datatable-row-color": "dt('datatable.row.color')",
    "--p-datatable-body-cell-border-color": "dt('datatable.body.cell.border.color')",
    "--p-datatable-body-cell-padding": "dt('datatable.body.cell.padding')",
    "--p-datatable-row-hover-background": "dt('datatable.row.hover.background')",
    "--p-datatable-row-hover-color": "dt('datatable.row.hover.color')",
    "--p-datatable-row-selected-background": "dt('datatable.row.selected.background')",
    "--p-datatable-row-selected-color": "dt('datatable.row.selected.color')",
    "--p-datatable-body-cell-selected-border-color": "dt('datatable.body.cell.selected.border.color')",
    "--p-datatable-row-focus-ring-shadow": "dt('datatable.row.focus.ring.shadow')",
    "--p-datatable-row-focus-ring-width": "dt('datatable.row.focus.ring.width')",
    "--p-datatable-row-focus-ring-style": "dt('datatable.row.focus.ring.style')",
    "--p-datatable-row-focus-ring-color": "dt('datatable.row.focus.ring.color')",
    "--p-datatable-row-focus-ring-offset": "dt('datatable.row.focus.ring.offset')",
    "--p-datatable-footer-cell-padding": "dt('datatable.footer.cell.padding')",
    "--p-datatable-footer-cell-border-color": "dt('datatable.footer.cell.border.color')",
    "--p-datatable-footer-cell-color": "dt('datatable.footer.cell.color')",
    "--p-datatable-column-footer-font-weight": "dt('datatable.column.footer.font.weight')",
    "--p-datatable-sort-icon-color": "dt('datatable.sort.icon.color')",
    "--p-datatable-sort-icon-size": "dt('datatable.sort.icon.size')",
    "--p-datatable-header-cell-hover-background": "dt('datatable.header.cell.hover.background')",
    "--p-datatable-header-cell-hover-color": "dt('datatable.header.cell.hover.color')",
    "--p-datatable-sort-icon-hover-color": "dt('datatable.sort.icon.hover.color')",
    "--p-datatable-header-cell-selected-background": "dt('datatable.header.cell.selected.background')",
    "--p-datatable-header-cell-selected-color": "dt('datatable.header.cell.selected.color')",
    "--p-datatable-header-cell-focus-ring-shadow": "dt('datatable.header.cell.focus.ring.shadow')",
    "--p-datatable-header-cell-focus-ring-width": "dt('datatable.header.cell.focus.ring.width')",
    "--p-datatable-header-cell-focus-ring-style": "dt('datatable.header.cell.focus.ring.style')",
    "--p-datatable-header-cell-focus-ring-color": "dt('datatable.header.cell.focus.ring.color')",
    "--p-datatable-header-cell-focus-ring-offset": "dt('datatable.header.cell.focus.ring.offset')",
    "--p-datatable-drop-point-color": "dt('datatable.drop.point.color')",
    "--p-datatable-loading-icon-size": "dt('datatable.loading.icon.size')",
    "--p-datatable-row-striped-background": "dt('datatable.row.striped.background')",
    "--p-datatable-header-sm-padding": "dt('datatable.header.sm.padding')",
    "--p-datatable-header-cell-sm-padding": "dt('datatable.header.cell.sm.padding')",
    "--p-datatable-body-cell-sm-padding": "dt('datatable.body.cell.sm.padding')",
    "--p-datatable-footer-cell-sm-padding": "dt('datatable.footer.cell.sm.padding')",
    "--p-datatable-footer-sm-padding": "dt('datatable.footer.sm.padding')",
    "--p-datatable-header-lg-padding": "dt('datatable.header.lg.padding')",
    "--p-datatable-header-cell-lg-padding": "dt('datatable.header.cell.lg.padding')",
    "--p-datatable-body-cell-lg-padding": "dt('datatable.body.cell.lg.padding')",
    "--p-datatable-footer-cell-lg-padding": "dt('datatable.footer.cell.lg.padding')",
    "--p-datatable-footer-lg-padding": "dt('datatable.footer.lg.padding')",
    "--p-datatable-row-toggle-button-size": "dt('datatable.row.toggle.button.size')",
    "--p-datatable-row-toggle-button-color": "dt('datatable.row.toggle.button.color')",
    "--p-datatable-row-toggle-button-border-radius": "dt('datatable.row.toggle.button.border.radius')",
    "--p-datatable-row-toggle-button-hover-color": "dt('datatable.row.toggle.button.hover.color')",
    "--p-datatable-row-toggle-button-hover-background": "dt('datatable.row.toggle.button.hover.background')",
    "--p-datatable-row-toggle-button-selected-hover-background": "dt('datatable.row.toggle.button.selected.hover.background')",
    "--p-datatable-row-toggle-button-selected-hover-color": "dt('datatable.row.toggle.button.selected.hover.color')",
    "--p-datatable-row-toggle-button-focus-ring-shadow": "dt('datatable.row.toggle.button.focus.ring.shadow')",
    "--p-datatable-row-toggle-button-focus-ring-width": "dt('datatable.row.toggle.button.focus.ring.width')",
    "--p-datatable-row-toggle-button-focus-ring-style": "dt('datatable.row.toggle.button.focus.ring.style')",
    "--p-datatable-row-toggle-button-focus-ring-color": "dt('datatable.row.toggle.button.focus.ring.color')",
    "--p-datatable-row-toggle-button-focus-ring-offset": "dt('datatable.row.toggle.button.focus.ring.offset')",
    "--p-dataview-border-color": "dt('dataview.border.color')",
    "--p-dataview-border-width": "dt('dataview.border.width')",
    "--p-dataview-border-radius": "dt('dataview.border.radius')",
    "--p-dataview-padding": "dt('dataview.padding')",
    "--p-dataview-header-background": "dt('dataview.header.background')",
    "--p-dataview-header-color": "dt('dataview.header.color')",
    "--p-dataview-header-border-color": "dt('dataview.header.border.color')",
    "--p-dataview-header-border-width": "dt('dataview.header.border.width')",
    "--p-dataview-header-padding": "dt('dataview.header.padding')",
    "--p-dataview-header-border-radius": "dt('dataview.header.border.radius')",
    "--p-dataview-content-background": "dt('dataview.content.background')",
    "--p-dataview-content-border-color": "dt('dataview.content.border.color')",
    "--p-dataview-content-border-width": "dt('dataview.content.border.width')",
    "--p-dataview-content-color": "dt('dataview.content.color')",
    "--p-dataview-content-padding": "dt('dataview.content.padding')",
    "--p-dataview-content-border-radius": "dt('dataview.content.border.radius')",
    "--p-dataview-footer-background": "dt('dataview.footer.background')",
    "--p-dataview-footer-color": "dt('dataview.footer.color')",
    "--p-dataview-footer-border-color": "dt('dataview.footer.border.color')",
    "--p-dataview-footer-border-width": "dt('dataview.footer.border.width')",
    "--p-dataview-footer-padding": "dt('dataview.footer.padding')",
    "--p-dataview-footer-border-radius": "dt('dataview.footer.border.radius')",
    "--p-dataview-paginator-top-border-width": "dt('dataview.paginator.top.border.width')",
    "--p-dataview-paginator-top-border-color": "dt('dataview.paginator.top.border.color')",
    "--p-dataview-paginator-bottom-border-width": "dt('dataview.paginator.bottom.border.width')",
    "--p-dataview-paginator-bottom-border-color": "dt('dataview.paginator.bottom.border.color')",
    "--p-datepicker-dropdown-width": "dt('datepicker.dropdown.width')",
    "--p-datepicker-dropdown-border-radius": "dt('datepicker.dropdown.border.radius')",
    "--p-datepicker-dropdown-background": "dt('datepicker.dropdown.background')",
    "--p-datepicker-dropdown-border-color": "dt('datepicker.dropdown.border.color')",
    "--p-datepicker-dropdown-color": "dt('datepicker.dropdown.color')",
    "--p-datepicker-transition-duration": "dt('datepicker.transition.duration')",
    "--p-datepicker-dropdown-hover-background": "dt('datepicker.dropdown.hover.background')",
    "--p-datepicker-dropdown-hover-border-color": "dt('datepicker.dropdown.hover.border.color')",
    "--p-datepicker-dropdown-hover-color": "dt('datepicker.dropdown.hover.color')",
    "--p-datepicker-dropdown-active-background": "dt('datepicker.dropdown.active.background')",
    "--p-datepicker-dropdown-active-border-color": "dt('datepicker.dropdown.active.border.color')",
    "--p-datepicker-dropdown-active-color": "dt('datepicker.dropdown.active.color')",
    "--p-datepicker-dropdown-focus-ring-shadow": "dt('datepicker.dropdown.focus.ring.shadow')",
    "--p-datepicker-dropdown-focus-ring-width": "dt('datepicker.dropdown.focus.ring.width')",
    "--p-datepicker-dropdown-focus-ring-style": "dt('datepicker.dropdown.focus.ring.style')",
    "--p-datepicker-dropdown-focus-ring-color": "dt('datepicker.dropdown.focus.ring.color')",
    "--p-datepicker-dropdown-focus-ring-offset": "dt('datepicker.dropdown.focus.ring.offset')",
    "--p-datepicker-input-icon-color": "dt('datepicker.input.icon.color')",
    "--p-datepicker-panel-padding": "dt('datepicker.panel.padding')",
    "--p-datepicker-panel-background": "dt('datepicker.panel.background')",
    "--p-datepicker-panel-color": "dt('datepicker.panel.color')",
    "--p-datepicker-panel-border-color": "dt('datepicker.panel.border.color')",
    "--p-datepicker-panel-border-radius": "dt('datepicker.panel.border.radius')",
    "--p-datepicker-panel-shadow": "dt('datepicker.panel.shadow')",
    "--p-datepicker-header-padding": "dt('datepicker.header.padding')",
    "--p-datepicker-header-background": "dt('datepicker.header.background')",
    "--p-datepicker-header-color": "dt('datepicker.header.color')",
    "--p-datepicker-header-border-color": "dt('datepicker.header.border.color')",
    "--p-datepicker-title-gap": "dt('datepicker.title.gap')",
    "--p-datepicker-title-font-weight": "dt('datepicker.title.font.weight')",
    "--p-datepicker-select-month-padding": "dt('datepicker.select.month.padding')",
    "--p-datepicker-select-month-color": "dt('datepicker.select.month.color')",
    "--p-datepicker-select-month-border-radius": "dt('datepicker.select.month.border.radius')",
    "--p-datepicker-select-year-padding": "dt('datepicker.select.year.padding')",
    "--p-datepicker-select-year-color": "dt('datepicker.select.year.color')",
    "--p-datepicker-select-year-border-radius": "dt('datepicker.select.year.border.radius')",
    "--p-datepicker-select-month-hover-background": "dt('datepicker.select.month.hover.background')",
    "--p-datepicker-select-month-hover-color": "dt('datepicker.select.month.hover.color')",
    "--p-datepicker-select-year-hover-background": "dt('datepicker.select.year.hover.background')",
    "--p-datepicker-select-year-hover-color": "dt('datepicker.select.year.hover.color')",
    "--p-datepicker-date-focus-ring-shadow": "dt('datepicker.date.focus.ring.shadow')",
    "--p-datepicker-date-focus-ring-width": "dt('datepicker.date.focus.ring.width')",
    "--p-datepicker-date-focus-ring-style": "dt('datepicker.date.focus.ring.style')",
    "--p-datepicker-date-focus-ring-color": "dt('datepicker.date.focus.ring.color')",
    "--p-datepicker-date-focus-ring-offset": "dt('datepicker.date.focus.ring.offset')",
    "--p-datepicker-group-border-color": "dt('datepicker.group.border.color')",
    "--p-datepicker-group-gap": "dt('datepicker.group.gap')",
    "--p-datepicker-day-view-margin": "dt('datepicker.day.view.margin')",
    "--p-datepicker-week-day-padding": "dt('datepicker.week.day.padding')",
    "--p-datepicker-week-day-font-weight": "dt('datepicker.week.day.font.weight')",
    "--p-datepicker-week-day-color": "dt('datepicker.week.day.color')",
    "--p-datepicker-date-padding": "dt('datepicker.date.padding')",
    "--p-datepicker-date-width": "dt('datepicker.date.width')",
    "--p-datepicker-date-height": "dt('datepicker.date.height')",
    "--p-datepicker-date-border-radius": "dt('datepicker.date.border.radius')",
    "--p-datepicker-date-color": "dt('datepicker.date.color')",
    "--p-datepicker-date-hover-background": "dt('datepicker.date.hover.background')",
    "--p-datepicker-date-hover-color": "dt('datepicker.date.hover.color')",
    "--p-datepicker-date-selected-background": "dt('datepicker.date.selected.background')",
    "--p-datepicker-date-selected-color": "dt('datepicker.date.selected.color')",
    "--p-datepicker-date-range-selected-background": "dt('datepicker.date.range.selected.background')",
    "--p-datepicker-date-range-selected-color": "dt('datepicker.date.range.selected.color')",
    "--p-datepicker-today-background": "dt('datepicker.today.background')",
    "--p-datepicker-today-color": "dt('datepicker.today.color')",
    "--p-datepicker-month-view-margin": "dt('datepicker.month.view.margin')",
    "--p-datepicker-month-padding": "dt('datepicker.month.padding')",
    "--p-datepicker-month-border-radius": "dt('datepicker.month.border.radius')",
    "--p-datepicker-year-view-margin": "dt('datepicker.year.view.margin')",
    "--p-datepicker-year-padding": "dt('datepicker.year.padding')",
    "--p-datepicker-year-border-radius": "dt('datepicker.year.border.radius')",
    "--p-datepicker-buttonbar-padding": "dt('datepicker.buttonbar.padding')",
    "--p-datepicker-buttonbar-border-color": "dt('datepicker.buttonbar.border.color')",
    "--p-datepicker-time-picker-border-color": "dt('datepicker.time.picker.border.color')",
    "--p-datepicker-time-picker-gap": "dt('datepicker.time.picker.gap')",
    "--p-datepicker-time-picker-padding": "dt('datepicker.time.picker.padding')",
    "--p-datepicker-time-picker-button-gap": "dt('datepicker.time.picker.button.gap')",
    "--p-datepicker-dropdown-sm-width": "dt('datepicker.dropdown.sm.width')",
    "--p-datepicker-dropdown-lg-width": "dt('datepicker.dropdown.lg.width')",
    "--p-dialog-border-radius": "dt('dialog.border.radius')",
    "--p-dialog-shadow": "dt('dialog.shadow')",
    "--p-dialog-background": "dt('dialog.background')",
    "--p-dialog-border-color": "dt('dialog.border.color')",
    "--p-dialog-color": "dt('dialog.color')",
    "--p-dialog-content-padding": "dt('dialog.content.padding')",
    "--p-dialog-header-padding": "dt('dialog.header.padding')",
    "--p-dialog-title-font-weight": "dt('dialog.title.font.weight')",
    "--p-dialog-title-font-size": "dt('dialog.title.font.size')",
    "--p-dialog-footer-padding": "dt('dialog.footer.padding')",
    "--p-dialog-footer-gap": "dt('dialog.footer.gap')",
    "--p-dialog-header-gap": "dt('dialog.header.gap')",
    "--p-divider-horizontal-margin": "dt('divider.horizontal.margin')",
    "--p-divider-horizontal-padding": "dt('divider.horizontal.padding')",
    "--p-divider-border-color": "dt('divider.border.color')",
    "--p-divider-horizontal-content-padding": "dt('divider.horizontal.content.padding')",
    "--p-divider-vertical-margin": "dt('divider.vertical.margin')",
    "--p-divider-vertical-padding": "dt('divider.vertical.padding')",
    "--p-divider-vertical-content-padding": "dt('divider.vertical.content.padding')",
    "--p-divider-content-background": "dt('divider.content.background')",
    "--p-divider-content-color": "dt('divider.content.color')",
    "--p-dock-background": "dt('dock.background')",
    "--p-dock-border-color": "dt('dock.border.color')",
    "--p-dock-padding": "dt('dock.padding')",
    "--p-dock-border-radius": "dt('dock.border.radius')",
    "--p-dock-item-padding": "dt('dock.item.padding')",
    "--p-dock-item-border-radius": "dt('dock.item.border.radius')",
    "--p-dock-item-focus-ring-shadow": "dt('dock.item.focus.ring.shadow')",
    "--p-dock-item-focus-ring-width": "dt('dock.item.focus.ring.width')",
    "--p-dock-item-focus-ring-style": "dt('dock.item.focus.ring.style')",
    "--p-dock-item-focus-ring-color": "dt('dock.item.focus.ring.color')",
    "--p-dock-item-focus-ring-offset": "dt('dock.item.focus.ring.offset')",
    "--p-dock-item-size": "dt('dock.item.size')",
    "--p-drawer-background": "dt('drawer.background')",
    "--p-drawer-color": "dt('drawer.color')",
    "--p-drawer-border-color": "dt('drawer.border.color')",
    "--p-drawer-shadow": "dt('drawer.shadow')",
    "--p-drawer-content-padding": "dt('drawer.content.padding')",
    "--p-drawer-header-padding": "dt('drawer.header.padding')",
    "--p-drawer-footer-padding": "dt('drawer.footer.padding')",
    "--p-drawer-title-font-weight": "dt('drawer.title.font.weight')",
    "--p-drawer-title-font-size": "dt('drawer.title.font.size')",
    "--p-form-field-placeholder-color": "dt('form.field.placeholder.color')",
    "--p-editor-toolbar-background": "dt('editor.toolbar.background')",
    "--p-editor-toolbar-border-radius": "dt('editor.toolbar.border.radius')",
    "--p-editor-toolbar-border-color": "dt('editor.toolbar.border.color')",
    "--p-editor-toolbar-item-color": "dt('editor.toolbar.item.color')",
    "--p-editor-toolbar-item-hover-color": "dt('editor.toolbar.item.hover.color')",
    "--p-editor-toolbar-item-active-color": "dt('editor.toolbar.item.active.color')",
    "--p-editor-overlay-background": "dt('editor.overlay.background')",
    "--p-editor-overlay-border-color": "dt('editor.overlay.border.color')",
    "--p-editor-overlay-shadow": "dt('editor.overlay.shadow')",
    "--p-editor-overlay-border-radius": "dt('editor.overlay.border.radius')",
    "--p-editor-overlay-padding": "dt('editor.overlay.padding')",
    "--p-editor-overlay-option-color": "dt('editor.overlay.option.color')",
    "--p-editor-overlay-option-border-radius": "dt('editor.overlay.option.border.radius')",
    "--p-editor-overlay-option-focus-background": "dt('editor.overlay.option.focus.background')",
    "--p-editor-overlay-option-focus-color": "dt('editor.overlay.option.focus.color')",
    "--p-editor-overlay-option-padding": "dt('editor.overlay.option.padding')",
    "--p-editor-content-border-radius": "dt('editor.content.border.radius')",
    "--p-editor-content-border-color": "dt('editor.content.border.color')",
    "--p-editor-content-background": "dt('editor.content.background')",
    "--p-editor-content-color": "dt('editor.content.color')",
    "--p-fieldset-background": "dt('fieldset.background')",
    "--p-fieldset-border-color": "dt('fieldset.border.color')",
    "--p-fieldset-border-radius": "dt('fieldset.border.radius')",
    "--p-fieldset-color": "dt('fieldset.color')",
    "--p-fieldset-padding": "dt('fieldset.padding')",
    "--p-fieldset-legend-background": "dt('fieldset.legend.background')",
    "--p-fieldset-legend-border-radius": "dt('fieldset.legend.border.radius')",
    "--p-fieldset-legend-border-width": "dt('fieldset.legend.border.width')",
    "--p-fieldset-legend-border-color": "dt('fieldset.legend.border.color')",
    "--p-fieldset-legend-padding": "dt('fieldset.legend.padding')",
    "--p-fieldset-transition-duration": "dt('fieldset.transition.duration')",
    "--p-fieldset-legend-gap": "dt('fieldset.legend.gap')",
    "--p-fieldset-legend-font-weight": "dt('fieldset.legend.font.weight')",
    "--p-fieldset-legend-focus-ring-shadow": "dt('fieldset.legend.focus.ring.shadow')",
    "--p-fieldset-legend-focus-ring-width": "dt('fieldset.legend.focus.ring.width')",
    "--p-fieldset-legend-focus-ring-style": "dt('fieldset.legend.focus.ring.style')",
    "--p-fieldset-legend-focus-ring-color": "dt('fieldset.legend.focus.ring.color')",
    "--p-fieldset-legend-focus-ring-offset": "dt('fieldset.legend.focus.ring.offset')",
    "--p-fieldset-legend-hover-color": "dt('fieldset.legend.hover.color')",
    "--p-fieldset-legend-hover-background": "dt('fieldset.legend.hover.background')",
    "--p-fieldset-toggle-icon-color": "dt('fieldset.toggle.icon.color')",
    "--p-fieldset-toggle-icon-hover-color": "dt('fieldset.toggle.icon.hover.color')",
    "--p-fieldset-content-padding": "dt('fieldset.content.padding')",
    "--p-fileupload-border-color": "dt('fileupload.border.color')",
    "--p-fileupload-border-radius": "dt('fileupload.border.radius')",
    "--p-fileupload-background": "dt('fileupload.background')",
    "--p-fileupload-color": "dt('fileupload.color')",
    "--p-fileupload-header-padding": "dt('fileupload.header.padding')",
    "--p-fileupload-header-background": "dt('fileupload.header.background')",
    "--p-fileupload-header-color": "dt('fileupload.header.color')",
    "--p-fileupload-header-border-width": "dt('fileupload.header.border.width')",
    "--p-fileupload-header-border-color": "dt('fileupload.header.border.color')",
    "--p-fileupload-header-border-radius": "dt('fileupload.header.border.radius')",
    "--p-fileupload-header-gap": "dt('fileupload.header.gap')",
    "--p-fileupload-content-gap": "dt('fileupload.content.gap')",
    "--p-fileupload-transition-duration": "dt('fileupload.transition.duration')",
    "--p-fileupload-content-padding": "dt('fileupload.content.padding')",
    "--p-fileupload-progressbar-height": "dt('fileupload.progressbar.height')",
    "--p-fileupload-filelist-gap": "dt('fileupload.filelist.gap')",
    "--p-fileupload-file-padding": "dt('fileupload.file.padding')",
    "--p-fileupload-file-border-color": "dt('fileupload.file.border.color')",
    "--p-fileupload-file-gap": "dt('fileupload.file.gap')",
    "--p-fileupload-file-info-gap": "dt('fileupload.file.info.gap')",
    "--p-fileupload-content-highlight-border-color": "dt('fileupload.content.highlight.border.color')",
    "--p-fileupload-basic-gap": "dt('fileupload.basic.gap')",
    "--p-floatlabel-font-weight": "dt('floatlabel.font.weight')",
    "--p-floatlabel-position-x": "dt('floatlabel.position.x')",
    "--p-floatlabel-color": "dt('floatlabel.color')",
    "--p-floatlabel-transition-duration": "dt('floatlabel.transition.duration')",
    "--p-floatlabel-position-y": "dt('floatlabel.position.y')",
    "--p-floatlabel-over-active-top": "dt('floatlabel.over.active.top')",
    "--p-floatlabel-active-font-size": "dt('floatlabel.active.font.size')",
    "--p-floatlabel-active-font-weight": "dt('floatlabel.active.font.weight')",
    "--p-floatlabel-active-color": "dt('floatlabel.active.color')",
    "--p-floatlabel-focus-color": "dt('floatlabel.focus.color')",
    "--p-floatlabel-in-input-padding-top": "dt('floatlabel.in.input.padding.top')",
    "--p-floatlabel-in-input-padding-bottom": "dt('floatlabel.in.input.padding.bottom')",
    "--p-floatlabel-in-active-top": "dt('floatlabel.in.active.top')",
    "--p-floatlabel-on-border-radius": "dt('floatlabel.on.border.radius')",
    "--p-floatlabel-on-active-background": "dt('floatlabel.on.active.background')",
    "--p-floatlabel-on-active-padding": "dt('floatlabel.on.active.padding')",
    "--p-floatlabel-invalid-color": "dt('floatlabel.invalid.color')",
    "--p-galleria-border-width": "dt('galleria.border.width')",
    "--p-galleria-border-color": "dt('galleria.border.color')",
    "--p-galleria-border-radius": "dt('galleria.border.radius')",
    "--p-galleria-nav-button-background": "dt('galleria.nav.button.background')",
    "--p-galleria-nav-button-color": "dt('galleria.nav.button.color')",
    "--p-galleria-nav-button-size": "dt('galleria.nav.button.size')",
    "--p-galleria-transition-duration": "dt('galleria.transition.duration')",
    "--p-galleria-nav-button-gutter": "dt('galleria.nav.button.gutter')",
    "--p-galleria-nav-button-hover-background": "dt('galleria.nav.button.hover.background')",
    "--p-galleria-nav-button-hover-color": "dt('galleria.nav.button.hover.color')",
    "--p-galleria-nav-button-focus-ring-shadow": "dt('galleria.nav.button.focus.ring.shadow')",
    "--p-galleria-nav-button-focus-ring-width": "dt('galleria.nav.button.focus.ring.width')",
    "--p-galleria-nav-button-focus-ring-style": "dt('galleria.nav.button.focus.ring.style')",
    "--p-galleria-nav-button-focus-ring-color": "dt('galleria.nav.button.focus.ring.color')",
    "--p-galleria-nav-button-focus-ring-offset": "dt('galleria.nav.button.focus.ring.offset')",
    "--p-galleria-nav-icon-size": "dt('galleria.nav.icon.size')",
    "--p-galleria-nav-button-prev-border-radius": "dt('galleria.nav.button.prev.border.radius')",
    "--p-galleria-nav-button-next-border-radius": "dt('galleria.nav.button.next.border.radius')",
    "--p-galleria-caption-background": "dt('galleria.caption.background')",
    "--p-galleria-caption-color": "dt('galleria.caption.color')",
    "--p-galleria-caption-padding": "dt('galleria.caption.padding')",
    "--p-galleria-thumbnail-nav-button-gutter": "dt('galleria.thumbnail.nav.button.gutter')",
    "--p-galleria-thumbnail-nav-button-color": "dt('galleria.thumbnail.nav.button.color')",
    "--p-galleria-thumbnail-nav-button-size": "dt('galleria.thumbnail.nav.button.size')",
    "--p-galleria-thumbnail-nav-button-border-radius": "dt('galleria.thumbnail.nav.button.border.radius')",
    "--p-galleria-thumbnail-nav-button-hover-background": "dt('galleria.thumbnail.nav.button.hover.background')",
    "--p-galleria-thumbnail-nav-button-hover-color": "dt('galleria.thumbnail.nav.button.hover.color')",
    "--p-galleria-thumbnail-nav-button-focus-ring-shadow": "dt('galleria.thumbnail.nav.button.focus.ring.shadow')",
    "--p-galleria-thumbnail-nav-button-focus-ring-width": "dt('galleria.thumbnail.nav.button.focus.ring.width')",
    "--p-galleria-thumbnail-nav-button-focus-ring-style": "dt('galleria.thumbnail.nav.button.focus.ring.style')",
    "--p-galleria-thumbnail-nav-button-focus-ring-color": "dt('galleria.thumbnail.nav.button.focus.ring.color')",
    "--p-galleria-thumbnail-nav-button-focus-ring-offset": "dt('galleria.thumbnail.nav.button.focus.ring.offset')",
    "--p-galleria-thumbnail-nav-button-icon-size": "dt('galleria.thumbnail.nav.button.icon.size')",
    "--p-galleria-thumbnails-content-background": "dt('galleria.thumbnails.content.background')",
    "--p-galleria-thumbnails-content-padding": "dt('galleria.thumbnails.content.padding')",
    "--p-galleria-indicator-list-padding": "dt('galleria.indicator.list.padding')",
    "--p-galleria-indicator-list-gap": "dt('galleria.indicator.list.gap')",
    "--p-galleria-indicator-button-background": "dt('galleria.indicator.button.background')",
    "--p-galleria-indicator-button-width": "dt('galleria.indicator.button.width')",
    "--p-galleria-indicator-button-height": "dt('galleria.indicator.button.height')",
    "--p-galleria-indicator-button-border-radius": "dt('galleria.indicator.button.border.radius')",
    "--p-galleria-indicator-button-hover-background": "dt('galleria.indicator.button.hover.background')",
    "--p-galleria-indicator-button-focus-ring-shadow": "dt('galleria.indicator.button.focus.ring.shadow')",
    "--p-galleria-indicator-button-focus-ring-width": "dt('galleria.indicator.button.focus.ring.width')",
    "--p-galleria-indicator-button-focus-ring-style": "dt('galleria.indicator.button.focus.ring.style')",
    "--p-galleria-indicator-button-focus-ring-color": "dt('galleria.indicator.button.focus.ring.color')",
    "--p-galleria-indicator-button-focus-ring-offset": "dt('galleria.indicator.button.focus.ring.offset')",
    "--p-galleria-indicator-button-active-background": "dt('galleria.indicator.button.active.background')",
    "--p-galleria-inset-indicator-list-background": "dt('galleria.inset.indicator.list.background')",
    "--p-galleria-inset-indicator-button-background": "dt('galleria.inset.indicator.button.background')",
    "--p-galleria-inset-indicator-button-hover-background": "dt('galleria.inset.indicator.button.hover.background')",
    "--p-galleria-inset-indicator-button-active-background": "dt('galleria.inset.indicator.button.active.background')",
    "--p-galleria-close-button-gutter": "dt('galleria.close.button.gutter')",
    "--p-galleria-close-button-background": "dt('galleria.close.button.background')",
    "--p-galleria-close-button-color": "dt('galleria.close.button.color')",
    "--p-galleria-close-button-size": "dt('galleria.close.button.size')",
    "--p-galleria-close-button-border-radius": "dt('galleria.close.button.border.radius')",
    "--p-galleria-close-button-icon-size": "dt('galleria.close.button.icon.size')",
    "--p-galleria-close-button-hover-background": "dt('galleria.close.button.hover.background')",
    "--p-galleria-close-button-hover-color": "dt('galleria.close.button.hover.color')",
    "--p-galleria-close-button-focus-ring-shadow": "dt('galleria.close.button.focus.ring.shadow')",
    "--p-galleria-close-button-focus-ring-width": "dt('galleria.close.button.focus.ring.width')",
    "--p-galleria-close-button-focus-ring-style": "dt('galleria.close.button.focus.ring.style')",
    "--p-galleria-close-button-focus-ring-color": "dt('galleria.close.button.focus.ring.color')",
    "--p-galleria-close-button-focus-ring-offset": "dt('galleria.close.button.focus.ring.offset')",
    "--p-iconfield-icon-color": "dt('iconfield.icon.color')",
    "--p-iftalabel-top": "dt('iftalabel.top')",
    "--p-iftalabel-font-size": "dt('iftalabel.font.size')",
    "--p-iftalabel-font-weight": "dt('iftalabel.font.weight')",
    "--p-iftalabel-position-x": "dt('iftalabel.position.x')",
    "--p-iftalabel-color": "dt('iftalabel.color')",
    "--p-iftalabel-transition-duration": "dt('iftalabel.transition.duration')",
    "--p-iftalabel-input-padding-top": "dt('iftalabel.input.padding.top')",
    "--p-iftalabel-input-padding-bottom": "dt('iftalabel.input.padding.bottom')",
    "--p-iftalabel-invalid-color": "dt('iftalabel.invalid.color')",
    "--p-iftalabel-focus-color": "dt('iftalabel.focus.color')",
    "--p-image-preview-mask-color": "dt('image.preview.mask.color')",
    "--p-image-transition-duration": "dt('image.transition.duration')",
    "--p-image-preview-mask-background": "dt('image.preview.mask.background')",
    "--p-image-preview-icon-size": "dt('image.preview.icon.size')",
    "--p-image-toolbar-position-top": "dt('image.toolbar.position.top')",
    "--p-image-toolbar-position-right": "dt('image.toolbar.position.right')",
    "--p-image-toolbar-position-left": "dt('image.toolbar.position.left')",
    "--p-image-toolbar-position-bottom": "dt('image.toolbar.position.bottom')",
    "--p-image-toolbar-padding": "dt('image.toolbar.padding')",
    "--p-image-toolbar-background": "dt('image.toolbar.background')",
    "--p-image-toolbar-blur": "dt('image.toolbar.blur')",
    "--p-image-toolbar-border-color": "dt('image.toolbar.border.color')",
    "--p-image-toolbar-border-width": "dt('image.toolbar.border.width')",
    "--p-image-toolbar-border-radius": "dt('image.toolbar.border.radius')",
    "--p-image-toolbar-gap": "dt('image.toolbar.gap')",
    "--p-image-action-color": "dt('image.action.color')",
    "--p-image-action-size": "dt('image.action.size')",
    "--p-image-action-border-radius": "dt('image.action.border.radius')",
    "--p-image-action-hover-color": "dt('image.action.hover.color')",
    "--p-image-action-hover-background": "dt('image.action.hover.background')",
    "--p-image-action-focus-ring-shadow": "dt('image.action.focus.ring.shadow')",
    "--p-image-action-focus-ring-width": "dt('image.action.focus.ring.width')",
    "--p-image-action-focus-ring-style": "dt('image.action.focus.ring.style')",
    "--p-image-action-focus-ring-color": "dt('image.action.focus.ring.color')",
    "--p-image-action-focus-ring-offset": "dt('image.action.focus.ring.offset')",
    "--p-image-action-icon-size": "dt('image.action.icon.size')",
    "--p-imagecompare-handle-size": "dt('imagecompare.handle.size')",
    "--p-imagecompare-handle-transition-duration": "dt('imagecompare.handle.transition.duration')",
    "--p-imagecompare-handle-background": "dt('imagecompare.handle.background')",
    "--p-imagecompare-handle-border-width": "dt('imagecompare.handle.border.width')",
    "--p-imagecompare-handle-border-color": "dt('imagecompare.handle.border.color')",
    "--p-imagecompare-handle-border-radius": "dt('imagecompare.handle.border.radius')",
    "--p-imagecompare-handle-border-style": "dt('imagecompare.handle.border.style')",
    "--p-imagecompare-handle-focus-ring-shadow": "dt('imagecompare.handle.focus.ring.shadow')",
    "--p-imagecompare-handle-focus-ring-width": "dt('imagecompare.handle.focus.ring.width')",
    "--p-imagecompare-handle-focus-ring-style": "dt('imagecompare.handle.focus.ring.style')",
    "--p-imagecompare-handle-focus-ring-color": "dt('imagecompare.handle.focus.ring.color')",
    "--p-imagecompare-handle-focus-ring-offset": "dt('imagecompare.handle.focus.ring.offset')",
    "--p-imagecompare-handle-hover-size": "dt('imagecompare.handle.hover.size')",
    "--p-imagecompare-handle-hover-background": "dt('imagecompare.handle.hover.background')",
    "--p-imagecompare-handle-hover-border-color": "dt('imagecompare.handle.hover.border.color')",
    "--p-inlinemessage-padding": "dt('inlinemessage.padding')",
    "--p-inlinemessage-border-radius": "dt('inlinemessage.border.radius')",
    "--p-inlinemessage-gap": "dt('inlinemessage.gap')",
    "--p-inlinemessage-text-font-weight": "dt('inlinemessage.text.font.weight')",
    "--p-inlinemessage-icon-size": "dt('inlinemessage.icon.size')",
    "--p-inlinemessage-info-background": "dt('inlinemessage.info.background')",
    "--p-inlinemessage-info-border-color": "dt('inlinemessage.info.border.color')",
    "--p-inlinemessage-info-color": "dt('inlinemessage.info.color')",
    "--p-inlinemessage-info-shadow": "dt('inlinemessage.info.shadow')",
    "--p-inlinemessage-success-background": "dt('inlinemessage.success.background')",
    "--p-inlinemessage-success-border-color": "dt('inlinemessage.success.border.color')",
    "--p-inlinemessage-success-color": "dt('inlinemessage.success.color')",
    "--p-inlinemessage-success-shadow": "dt('inlinemessage.success.shadow')",
    "--p-inlinemessage-warn-background": "dt('inlinemessage.warn.background')",
    "--p-inlinemessage-warn-border-color": "dt('inlinemessage.warn.border.color')",
    "--p-inlinemessage-warn-color": "dt('inlinemessage.warn.color')",
    "--p-inlinemessage-warn-shadow": "dt('inlinemessage.warn.shadow')",
    "--p-inlinemessage-error-background": "dt('inlinemessage.error.background')",
    "--p-inlinemessage-error-border-color": "dt('inlinemessage.error.border.color')",
    "--p-inlinemessage-error-color": "dt('inlinemessage.error.color')",
    "--p-inlinemessage-error-shadow": "dt('inlinemessage.error.shadow')",
    "--p-inlinemessage-secondary-background": "dt('inlinemessage.secondary.background')",
    "--p-inlinemessage-secondary-border-color": "dt('inlinemessage.secondary.border.color')",
    "--p-inlinemessage-secondary-color": "dt('inlinemessage.secondary.color')",
    "--p-inlinemessage-secondary-shadow": "dt('inlinemessage.secondary.shadow')",
    "--p-inlinemessage-contrast-background": "dt('inlinemessage.contrast.background')",
    "--p-inlinemessage-contrast-border-color": "dt('inlinemessage.contrast.border.color')",
    "--p-inlinemessage-contrast-color": "dt('inlinemessage.contrast.color')",
    "--p-inlinemessage-contrast-shadow": "dt('inlinemessage.contrast.shadow')",
    "--p-inplace-padding": "dt('inplace.padding')",
    "--p-inplace-border-radius": "dt('inplace.border.radius')",
    "--p-inplace-transition-duration": "dt('inplace.transition.duration')",
    "--p-inplace-display-hover-background": "dt('inplace.display.hover.background')",
    "--p-inplace-display-hover-color": "dt('inplace.display.hover.color')",
    "--p-inplace-focus-ring-shadow": "dt('inplace.focus.ring.shadow')",
    "--p-inplace-focus-ring-width": "dt('inplace.focus.ring.width')",
    "--p-inplace-focus-ring-style": "dt('inplace.focus.ring.style')",
    "--p-inplace-focus-ring-color": "dt('inplace.focus.ring.color')",
    "--p-inplace-focus-ring-offset": "dt('inplace.focus.ring.offset')",
    "--p-inputchips-padding-y": "dt('inputchips.padding.y')",
    "--p-inputchips-padding-x": "dt('inputchips.padding.x')",
    "--p-inputchips-color": "dt('inputchips.color')",
    "--p-inputchips-background": "dt('inputchips.background')",
    "--p-inputchips-border-color": "dt('inputchips.border.color')",
    "--p-inputchips-border-radius": "dt('inputchips.border.radius')",
    "--p-inputchips-transition-duration": "dt('inputchips.transition.duration')",
    "--p-inputchips-shadow": "dt('inputchips.shadow')",
    "--p-inputchips-hover-border-color": "dt('inputchips.hover.border.color')",
    "--p-inputchips-focus-border-color": "dt('inputchips.focus.border.color')",
    "--p-inputchips-focus-ring-shadow": "dt('inputchips.focus.ring.shadow')",
    "--p-inputchips-focus-ring-width": "dt('inputchips.focus.ring.width')",
    "--p-inputchips-focus-ring-style": "dt('inputchips.focus.ring.style')",
    "--p-inputchips-focus-ring-color": "dt('inputchips.focus.ring.color')",
    "--p-inputchips-focus-ring-offset": "dt('inputchips.focus.ring.offset')",
    "--p-inputchips-invalid-border-color": "dt('inputchips.invalid.border.color')",
    "--p-inputchips-filled-background": "dt('inputchips.filled.background')",
    "--p-inputchips-filled-focus-background": "dt('inputchips.filled.focus.background')",
    "--p-inputchips-disabled-background": "dt('inputchips.disabled.background')",
    "--p-inputchips-disabled-color": "dt('inputchips.disabled.color')",
    "--p-inputchips-chip-border-radius": "dt('inputchips.chip.border.radius')",
    "--p-inputchips-chip-focus-background": "dt('inputchips.chip.focus.background')",
    "--p-inputchips-chip-focus-color": "dt('inputchips.chip.focus.color')",
    "--p-inputchips-placeholder-color": "dt('inputchips.placeholder.color')",
    "--p-inputgroup-addon-padding": "dt('inputgroup.addon.padding')",
    "--p-inputgroup-addon-background": "dt('inputgroup.addon.background')",
    "--p-inputgroup-addon-color": "dt('inputgroup.addon.color')",
    "--p-inputgroup-addon-border-color": "dt('inputgroup.addon.border.color')",
    "--p-inputgroup-addon-min-width": "dt('inputgroup.addon.min.width')",
    "--p-inputgroup-addon-border-radius": "dt('inputgroup.addon.border.radius')",
    "--p-inputnumber-button-background": "dt('inputnumber.button.background')",
    "--p-inputnumber-button-color": "dt('inputnumber.button.color')",
    "--p-inputnumber-button-width": "dt('inputnumber.button.width')",
    "--p-inputnumber-transition-duration": "dt('inputnumber.transition.duration')",
    "--p-inputnumber-button-hover-background": "dt('inputnumber.button.hover.background')",
    "--p-inputnumber-button-hover-color": "dt('inputnumber.button.hover.color')",
    "--p-inputnumber-button-active-background": "dt('inputnumber.button.active.background')",
    "--p-inputnumber-button-active-color": "dt('inputnumber.button.active.color')",
    "--p-inputnumber-button-border-radius": "dt('inputnumber.button.border.radius')",
    "--p-inputnumber-button-border-color": "dt('inputnumber.button.border.color')",
    "--p-inputnumber-button-hover-border-color": "dt('inputnumber.button.hover.border.color')",
    "--p-inputnumber-button-active-border-color": "dt('inputnumber.button.active.border.color')",
    "--p-inputnumber-button-vertical-padding": "dt('inputnumber.button.vertical.padding')",
    "--p-inputotp-gap": "dt('inputotp.gap')",
    "--p-inputotp-input-width": "dt('inputotp.input.width')",
    "--p-inputotp-input-sm-width": "dt('inputotp.input.sm.width')",
    "--p-inputotp-input-lg-width": "dt('inputotp.input.lg.width')",
    "--p-inputtext-color": "dt('inputtext.color')",
    "--p-inputtext-background": "dt('inputtext.background')",
    "--p-inputtext-padding-y": "dt('inputtext.padding.y')",
    "--p-inputtext-padding-x": "dt('inputtext.padding.x')",
    "--p-inputtext-border-color": "dt('inputtext.border.color')",
    "--p-inputtext-transition-duration": "dt('inputtext.transition.duration')",
    "--p-inputtext-border-radius": "dt('inputtext.border.radius')",
    "--p-inputtext-shadow": "dt('inputtext.shadow')",
    "--p-inputtext-hover-border-color": "dt('inputtext.hover.border.color')",
    "--p-inputtext-focus-border-color": "dt('inputtext.focus.border.color')",
    "--p-inputtext-focus-ring-shadow": "dt('inputtext.focus.ring.shadow')",
    "--p-inputtext-focus-ring-width": "dt('inputtext.focus.ring.width')",
    "--p-inputtext-focus-ring-style": "dt('inputtext.focus.ring.style')",
    "--p-inputtext-focus-ring-color": "dt('inputtext.focus.ring.color')",
    "--p-inputtext-focus-ring-offset": "dt('inputtext.focus.ring.offset')",
    "--p-inputtext-invalid-border-color": "dt('inputtext.invalid.border.color')",
    "--p-inputtext-filled-background": "dt('inputtext.filled.background')",
    "--p-inputtext-filled-hover-background": "dt('inputtext.filled.hover.background')",
    "--p-inputtext-filled-focus-background": "dt('inputtext.filled.focus.background')",
    "--p-inputtext-placeholder-color": "dt('inputtext.placeholder.color')",
    "--p-inputtext-invalid-placeholder-color": "dt('inputtext.invalid.placeholder.color')",
    "--p-inputtext-sm-font-size": "dt('inputtext.sm.font.size')",
    "--p-inputtext-sm-padding-y": "dt('inputtext.sm.padding.y')",
    "--p-inputtext-sm-padding-x": "dt('inputtext.sm.padding.x')",
    "--p-inputtext-lg-font-size": "dt('inputtext.lg.font.size')",
    "--p-inputtext-lg-padding-y": "dt('inputtext.lg.padding.y')",
    "--p-inputtext-lg-padding-x": "dt('inputtext.lg.padding.x')",
    "--p-knob-transition-duration": "dt('knob.transition.duration')",
    "--p-knob-focus-ring-shadow": "dt('knob.focus.ring.shadow')",
    "--p-knob-focus-ring-width": "dt('knob.focus.ring.width')",
    "--p-knob-focus-ring-style": "dt('knob.focus.ring.style')",
    "--p-knob-focus-ring-color": "dt('knob.focus.ring.color')",
    "--p-knob-focus-ring-offset": "dt('knob.focus.ring.offset')",
    "--p-listbox-background": "dt('listbox.background')",
    "--p-listbox-color": "dt('listbox.color')",
    "--p-listbox-border-color": "dt('listbox.border.color')",
    "--p-listbox-border-radius": "dt('listbox.border.radius')",
    "--p-listbox-transition-duration": "dt('listbox.transition.duration')",
    "--p-listbox-shadow": "dt('listbox.shadow')",
    "--p-listbox-disabled-background": "dt('listbox.disabled.background')",
    "--p-listbox-disabled-color": "dt('listbox.disabled.color')",
    "--p-listbox-invalid-border-color": "dt('listbox.invalid.border.color')",
    "--p-listbox-list-header-padding": "dt('listbox.list.header.padding')",
    "--p-listbox-list-padding": "dt('listbox.list.padding')",
    "--p-listbox-list-gap": "dt('listbox.list.gap')",
    "--p-listbox-option-padding": "dt('listbox.option.padding')",
    "--p-listbox-option-border-radius": "dt('listbox.option.border.radius')",
    "--p-listbox-option-color": "dt('listbox.option.color')",
    "--p-listbox-option-striped-background": "dt('listbox.option.striped.background')",
    "--p-listbox-option-selected-background": "dt('listbox.option.selected.background')",
    "--p-listbox-option-selected-color": "dt('listbox.option.selected.color')",
    "--p-listbox-option-selected-focus-background": "dt('listbox.option.selected.focus.background')",
    "--p-listbox-option-selected-focus-color": "dt('listbox.option.selected.focus.color')",
    "--p-listbox-option-focus-background": "dt('listbox.option.focus.background')",
    "--p-listbox-option-focus-color": "dt('listbox.option.focus.color')",
    "--p-listbox-checkmark-gutter-start": "dt('listbox.checkmark.gutter.start')",
    "--p-listbox-checkmark-gutter-end": "dt('listbox.checkmark.gutter.end')",
    "--p-listbox-checkmark-color": "dt('listbox.checkmark.color')",
    "--p-listbox-option-group-padding": "dt('listbox.option.group.padding')",
    "--p-listbox-option-group-color": "dt('listbox.option.group.color')",
    "--p-listbox-option-group-background": "dt('listbox.option.group.background')",
    "--p-listbox-option-group-font-weight": "dt('listbox.option.group.font.weight')",
    "--p-listbox-empty-message-padding": "dt('listbox.empty.message.padding')",
    "--p-megamenu-background": "dt('megamenu.background')",
    "--p-megamenu-border-color": "dt('megamenu.border.color')",
    "--p-megamenu-border-radius": "dt('megamenu.border.radius')",
    "--p-megamenu-color": "dt('megamenu.color')",
    "--p-megamenu-gap": "dt('megamenu.gap')",
    "--p-megamenu-base-item-border-radius": "dt('megamenu.base.item.border.radius')",
    "--p-megamenu-base-item-padding": "dt('megamenu.base.item.padding')",
    "--p-megamenu-transition-duration": "dt('megamenu.transition.duration')",
    "--p-megamenu-item-border-radius": "dt('megamenu.item.border.radius')",
    "--p-megamenu-item-color": "dt('megamenu.item.color')",
    "--p-megamenu-item-padding": "dt('megamenu.item.padding')",
    "--p-megamenu-item-gap": "dt('megamenu.item.gap')",
    "--p-megamenu-item-icon-color": "dt('megamenu.item.icon.color')",
    "--p-megamenu-submenu-icon-color": "dt('megamenu.submenu.icon.color')",
    "--p-megamenu-submenu-icon-size": "dt('megamenu.submenu.icon.size')",
    "--p-megamenu-item-focus-color": "dt('megamenu.item.focus.color')",
    "--p-megamenu-item-focus-background": "dt('megamenu.item.focus.background')",
    "--p-megamenu-item-icon-focus-color": "dt('megamenu.item.icon.focus.color')",
    "--p-megamenu-submenu-icon-focus-color": "dt('megamenu.submenu.icon.focus.color')",
    "--p-megamenu-item-active-color": "dt('megamenu.item.active.color')",
    "--p-megamenu-item-active-background": "dt('megamenu.item.active.background')",
    "--p-megamenu-item-icon-active-color": "dt('megamenu.item.icon.active.color')",
    "--p-megamenu-submenu-icon-active-color": "dt('megamenu.submenu.icon.active.color')",
    "--p-megamenu-overlay-padding": "dt('megamenu.overlay.padding')",
    "--p-megamenu-overlay-background": "dt('megamenu.overlay.background')",
    "--p-megamenu-overlay-color": "dt('megamenu.overlay.color')",
    "--p-megamenu-overlay-border-color": "dt('megamenu.overlay.border.color')",
    "--p-megamenu-overlay-border-radius": "dt('megamenu.overlay.border.radius')",
    "--p-megamenu-overlay-shadow": "dt('megamenu.overlay.shadow')",
    "--p-megamenu-submenu-padding": "dt('megamenu.submenu.padding')",
    "--p-megamenu-submenu-gap": "dt('megamenu.submenu.gap')",
    "--p-megamenu-submenu-label-padding": "dt('megamenu.submenu.label.padding')",
    "--p-megamenu-submenu-label-color": "dt('megamenu.submenu.label.color')",
    "--p-megamenu-submenu-label-font-weight": "dt('megamenu.submenu.label.font.weight')",
    "--p-megamenu-submenu-label-background": "dt('megamenu.submenu.label.background')",
    "--p-megamenu-separator-border-color": "dt('megamenu.separator.border.color')",
    "--p-megamenu-horizontal-orientation-padding": "dt('megamenu.horizontal.orientation.padding')",
    "--p-megamenu-horizontal-orientation-gap": "dt('megamenu.horizontal.orientation.gap')",
    "--p-megamenu-vertical-orientation-padding": "dt('megamenu.vertical.orientation.padding')",
    "--p-megamenu-vertical-orientation-gap": "dt('megamenu.vertical.orientation.gap')",
    "--p-megamenu-overlay-gap": "dt('megamenu.overlay.gap')",
    "--p-megamenu-mobile-button-size": "dt('megamenu.mobile.button.size')",
    "--p-megamenu-mobile-button-color": "dt('megamenu.mobile.button.color')",
    "--p-megamenu-mobile-button-border-radius": "dt('megamenu.mobile.button.border.radius')",
    "--p-megamenu-mobile-button-hover-color": "dt('megamenu.mobile.button.hover.color')",
    "--p-megamenu-mobile-button-hover-background": "dt('megamenu.mobile.button.hover.background')",
    "--p-megamenu-mobile-button-focus-ring-shadow": "dt('megamenu.mobile.button.focus.ring.shadow')",
    "--p-megamenu-mobile-button-focus-ring-width": "dt('megamenu.mobile.button.focus.ring.width')",
    "--p-megamenu-mobile-button-focus-ring-style": "dt('megamenu.mobile.button.focus.ring.style')",
    "--p-megamenu-mobile-button-focus-ring-color": "dt('megamenu.mobile.button.focus.ring.color')",
    "--p-megamenu-mobile-button-focus-ring-offset": "dt('megamenu.mobile.button.focus.ring.offset')",
    "--p-menu-background": "dt('menu.background')",
    "--p-menu-color": "dt('menu.color')",
    "--p-menu-border-color": "dt('menu.border.color')",
    "--p-menu-border-radius": "dt('menu.border.radius')",
    "--p-menu-list-padding": "dt('menu.list.padding')",
    "--p-menu-list-gap": "dt('menu.list.gap')",
    "--p-menu-transition-duration": "dt('menu.transition.duration')",
    "--p-menu-item-border-radius": "dt('menu.item.border.radius')",
    "--p-menu-item-color": "dt('menu.item.color')",
    "--p-menu-item-padding": "dt('menu.item.padding')",
    "--p-menu-item-gap": "dt('menu.item.gap')",
    "--p-menu-item-icon-color": "dt('menu.item.icon.color')",
    "--p-menu-item-focus-color": "dt('menu.item.focus.color')",
    "--p-menu-item-focus-background": "dt('menu.item.focus.background')",
    "--p-menu-item-icon-focus-color": "dt('menu.item.icon.focus.color')",
    "--p-menu-shadow": "dt('menu.shadow')",
    "--p-menu-submenu-label-background": "dt('menu.submenu.label.background')",
    "--p-menu-submenu-label-padding": "dt('menu.submenu.label.padding')",
    "--p-menu-submenu-label-color": "dt('menu.submenu.label.color')",
    "--p-menu-submenu-label-font-weight": "dt('menu.submenu.label.font.weight')",
    "--p-menu-separator-border-color": "dt('menu.separator.border.color')",
    "--p-menubar-background": "dt('menubar.background')",
    "--p-menubar-border-color": "dt('menubar.border.color')",
    "--p-menubar-border-radius": "dt('menubar.border.radius')",
    "--p-menubar-color": "dt('menubar.color')",
    "--p-menubar-padding": "dt('menubar.padding')",
    "--p-menubar-gap": "dt('menubar.gap')",
    "--p-menubar-base-item-border-radius": "dt('menubar.base.item.border.radius')",
    "--p-menubar-base-item-padding": "dt('menubar.base.item.padding')",
    "--p-menubar-transition-duration": "dt('menubar.transition.duration')",
    "--p-menubar-item-border-radius": "dt('menubar.item.border.radius')",
    "--p-menubar-item-color": "dt('menubar.item.color')",
    "--p-menubar-item-padding": "dt('menubar.item.padding')",
    "--p-menubar-item-gap": "dt('menubar.item.gap')",
    "--p-menubar-item-icon-color": "dt('menubar.item.icon.color')",
    "--p-menubar-submenu-icon-color": "dt('menubar.submenu.icon.color')",
    "--p-menubar-submenu-icon-size": "dt('menubar.submenu.icon.size')",
    "--p-menubar-item-focus-color": "dt('menubar.item.focus.color')",
    "--p-menubar-item-focus-background": "dt('menubar.item.focus.background')",
    "--p-menubar-item-icon-focus-color": "dt('menubar.item.icon.focus.color')",
    "--p-menubar-submenu-icon-focus-color": "dt('menubar.submenu.icon.focus.color')",
    "--p-menubar-item-active-color": "dt('menubar.item.active.color')",
    "--p-menubar-item-active-background": "dt('menubar.item.active.background')",
    "--p-menubar-item-icon-active-color": "dt('menubar.item.icon.active.color')",
    "--p-menubar-submenu-icon-active-color": "dt('menubar.submenu.icon.active.color')",
    "--p-menubar-submenu-background": "dt('menubar.submenu.background')",
    "--p-menubar-submenu-border-color": "dt('menubar.submenu.border.color')",
    "--p-menubar-submenu-border-radius": "dt('menubar.submenu.border.radius')",
    "--p-menubar-submenu-shadow": "dt('menubar.submenu.shadow')",
    "--p-menubar-submenu-color": "dt('menubar.submenu.color')",
    "--p-menubar-submenu-padding": "dt('menubar.submenu.padding')",
    "--p-menubar-submenu-gap": "dt('menubar.submenu.gap')",
    "--p-menubar-separator-border-color": "dt('menubar.separator.border.color')",
    "--p-menubar-mobile-button-size": "dt('menubar.mobile.button.size')",
    "--p-menubar-mobile-button-color": "dt('menubar.mobile.button.color')",
    "--p-menubar-mobile-button-border-radius": "dt('menubar.mobile.button.border.radius')",
    "--p-menubar-mobile-button-hover-color": "dt('menubar.mobile.button.hover.color')",
    "--p-menubar-mobile-button-hover-background": "dt('menubar.mobile.button.hover.background')",
    "--p-menubar-mobile-button-focus-ring-shadow": "dt('menubar.mobile.button.focus.ring.shadow')",
    "--p-menubar-mobile-button-focus-ring-width": "dt('menubar.mobile.button.focus.ring.width')",
    "--p-menubar-mobile-button-focus-ring-style": "dt('menubar.mobile.button.focus.ring.style')",
    "--p-menubar-mobile-button-focus-ring-color": "dt('menubar.mobile.button.focus.ring.color')",
    "--p-menubar-mobile-button-focus-ring-offset": "dt('menubar.mobile.button.focus.ring.offset')",
    "--p-menubar-submenu-mobile-indent": "dt('menubar.submenu.mobile.indent')",
    "--p-message-border-radius": "dt('message.border.radius')",
    "--p-message-border-width": "dt('message.border.width')",
    "--p-message-content-padding": "dt('message.content.padding')",
    "--p-message-content-gap": "dt('message.content.gap')",
    "--p-message-close-button-width": "dt('message.close.button.width')",
    "--p-message-close-button-height": "dt('message.close.button.height')",
    "--p-message-close-button-border-radius": "dt('message.close.button.border.radius')",
    "--p-message-transition-duration": "dt('message.transition.duration')",
    "--p-message-close-icon-size": "dt('message.close.icon.size')",
    "--p-message-close-button-focus-ring-width": "dt('message.close.button.focus.ring.width')",
    "--p-message-close-button-focus-ring-style": "dt('message.close.button.focus.ring.style')",
    "--p-message-close-button-focus-ring-offset": "dt('message.close.button.focus.ring.offset')",
    "--p-message-info-background": "dt('message.info.background')",
    "--p-message-info-border-color": "dt('message.info.border.color')",
    "--p-message-info-color": "dt('message.info.color')",
    "--p-message-info-shadow": "dt('message.info.shadow')",
    "--p-message-info-close-button-focus-ring-color": "dt('message.info.close.button.focus.ring.color')",
    "--p-message-info-close-button-focus-ring-shadow": "dt('message.info.close.button.focus.ring.shadow')",
    "--p-message-info-close-button-hover-background": "dt('message.info.close.button.hover.background')",
    "--p-message-info-outlined-color": "dt('message.info.outlined.color')",
    "--p-message-info-outlined-border-color": "dt('message.info.outlined.border.color')",
    "--p-message-info-simple-color": "dt('message.info.simple.color')",
    "--p-message-success-background": "dt('message.success.background')",
    "--p-message-success-border-color": "dt('message.success.border.color')",
    "--p-message-success-color": "dt('message.success.color')",
    "--p-message-success-shadow": "dt('message.success.shadow')",
    "--p-message-success-close-button-focus-ring-color": "dt('message.success.close.button.focus.ring.color')",
    "--p-message-success-close-button-focus-ring-shadow": "dt('message.success.close.button.focus.ring.shadow')",
    "--p-message-success-close-button-hover-background": "dt('message.success.close.button.hover.background')",
    "--p-message-success-outlined-color": "dt('message.success.outlined.color')",
    "--p-message-success-outlined-border-color": "dt('message.success.outlined.border.color')",
    "--p-message-success-simple-color": "dt('message.success.simple.color')",
    "--p-message-warn-background": "dt('message.warn.background')",
    "--p-message-warn-border-color": "dt('message.warn.border.color')",
    "--p-message-warn-color": "dt('message.warn.color')",
    "--p-message-warn-shadow": "dt('message.warn.shadow')",
    "--p-message-warn-close-button-focus-ring-color": "dt('message.warn.close.button.focus.ring.color')",
    "--p-message-warn-close-button-focus-ring-shadow": "dt('message.warn.close.button.focus.ring.shadow')",
    "--p-message-warn-close-button-hover-background": "dt('message.warn.close.button.hover.background')",
    "--p-message-warn-outlined-color": "dt('message.warn.outlined.color')",
    "--p-message-warn-outlined-border-color": "dt('message.warn.outlined.border.color')",
    "--p-message-warn-simple-color": "dt('message.warn.simple.color')",
    "--p-message-error-background": "dt('message.error.background')",
    "--p-message-error-border-color": "dt('message.error.border.color')",
    "--p-message-error-color": "dt('message.error.color')",
    "--p-message-error-shadow": "dt('message.error.shadow')",
    "--p-message-error-close-button-focus-ring-color": "dt('message.error.close.button.focus.ring.color')",
    "--p-message-error-close-button-focus-ring-shadow": "dt('message.error.close.button.focus.ring.shadow')",
    "--p-message-error-close-button-hover-background": "dt('message.error.close.button.hover.background')",
    "--p-message-error-outlined-color": "dt('message.error.outlined.color')",
    "--p-message-error-outlined-border-color": "dt('message.error.outlined.border.color')",
    "--p-message-error-simple-color": "dt('message.error.simple.color')",
    "--p-message-secondary-background": "dt('message.secondary.background')",
    "--p-message-secondary-border-color": "dt('message.secondary.border.color')",
    "--p-message-secondary-color": "dt('message.secondary.color')",
    "--p-message-secondary-shadow": "dt('message.secondary.shadow')",
    "--p-message-secondary-close-button-focus-ring-color": "dt('message.secondary.close.button.focus.ring.color')",
    "--p-message-secondary-close-button-focus-ring-shadow": "dt('message.secondary.close.button.focus.ring.shadow')",
    "--p-message-secondary-close-button-hover-background": "dt('message.secondary.close.button.hover.background')",
    "--p-message-secondary-outlined-color": "dt('message.secondary.outlined.color')",
    "--p-message-secondary-outlined-border-color": "dt('message.secondary.outlined.border.color')",
    "--p-message-secondary-simple-color": "dt('message.secondary.simple.color')",
    "--p-message-contrast-background": "dt('message.contrast.background')",
    "--p-message-contrast-border-color": "dt('message.contrast.border.color')",
    "--p-message-contrast-color": "dt('message.contrast.color')",
    "--p-message-contrast-shadow": "dt('message.contrast.shadow')",
    "--p-message-contrast-close-button-focus-ring-color": "dt('message.contrast.close.button.focus.ring.color')",
    "--p-message-contrast-close-button-focus-ring-shadow": "dt('message.contrast.close.button.focus.ring.shadow')",
    "--p-message-contrast-close-button-hover-background": "dt('message.contrast.close.button.hover.background')",
    "--p-message-contrast-outlined-color": "dt('message.contrast.outlined.color')",
    "--p-message-contrast-outlined-border-color": "dt('message.contrast.outlined.border.color')",
    "--p-message-contrast-simple-color": "dt('message.contrast.simple.color')",
    "--p-message-text-font-size": "dt('message.text.font.size')",
    "--p-message-text-font-weight": "dt('message.text.font.weight')",
    "--p-message-icon-size": "dt('message.icon.size')",
    "--p-message-content-sm-padding": "dt('message.content.sm.padding')",
    "--p-message-text-sm-font-size": "dt('message.text.sm.font.size')",
    "--p-message-icon-sm-size": "dt('message.icon.sm.size')",
    "--p-message-close-icon-sm-size": "dt('message.close.icon.sm.size')",
    "--p-message-content-lg-padding": "dt('message.content.lg.padding')",
    "--p-message-text-lg-font-size": "dt('message.text.lg.font.size')",
    "--p-message-icon-lg-size": "dt('message.icon.lg.size')",
    "--p-message-close-icon-lg-size": "dt('message.close.icon.lg.size')",
    "--p-message-outlined-border-width": "dt('message.outlined.border.width')",
    "--p-message-simple-content-padding": "dt('message.simple.content.padding')",
    "--p-metergroup-gap": "dt('metergroup.gap')",
    "--p-metergroup-meters-background": "dt('metergroup.meters.background')",
    "--p-metergroup-border-radius": "dt('metergroup.border.radius')",
    "--p-metergroup-label-gap": "dt('metergroup.label.gap')",
    "--p-metergroup-label-marker-size": "dt('metergroup.label.marker.size')",
    "--p-metergroup-label-icon-size": "dt('metergroup.label.icon.size')",
    "--p-metergroup-label-list-horizontal-gap": "dt('metergroup.label.list.horizontal.gap')",
    "--p-metergroup-meters-size": "dt('metergroup.meters.size')",
    "--p-metergroup-label-list-vertical-gap": "dt('metergroup.label.list.vertical.gap')",
    "--p-multiselect-background": "dt('multiselect.background')",
    "--p-multiselect-border-color": "dt('multiselect.border.color')",
    "--p-multiselect-transition-duration": "dt('multiselect.transition.duration')",
    "--p-multiselect-border-radius": "dt('multiselect.border.radius')",
    "--p-multiselect-shadow": "dt('multiselect.shadow')",
    "--p-multiselect-hover-border-color": "dt('multiselect.hover.border.color')",
    "--p-multiselect-focus-border-color": "dt('multiselect.focus.border.color')",
    "--p-multiselect-focus-ring-shadow": "dt('multiselect.focus.ring.shadow')",
    "--p-multiselect-focus-ring-width": "dt('multiselect.focus.ring.width')",
    "--p-multiselect-focus-ring-style": "dt('multiselect.focus.ring.style')",
    "--p-multiselect-focus-ring-color": "dt('multiselect.focus.ring.color')",
    "--p-multiselect-focus-ring-offset": "dt('multiselect.focus.ring.offset')",
    "--p-multiselect-filled-background": "dt('multiselect.filled.background')",
    "--p-multiselect-filled-hover-background": "dt('multiselect.filled.hover.background')",
    "--p-multiselect-filled-focus-background": "dt('multiselect.filled.focus.background')",
    "--p-multiselect-invalid-border-color": "dt('multiselect.invalid.border.color')",
    "--p-multiselect-disabled-background": "dt('multiselect.disabled.background')",
    "--p-multiselect-dropdown-color": "dt('multiselect.dropdown.color')",
    "--p-multiselect-dropdown-width": "dt('multiselect.dropdown.width')",
    "--p-multiselect-clear-icon-color": "dt('multiselect.clear.icon.color')",
    "--p-multiselect-padding-y": "dt('multiselect.padding.y')",
    "--p-multiselect-padding-x": "dt('multiselect.padding.x')",
    "--p-multiselect-color": "dt('multiselect.color')",
    "--p-multiselect-placeholder-color": "dt('multiselect.placeholder.color')",
    "--p-multiselect-invalid-placeholder-color": "dt('multiselect.invalid.placeholder.color')",
    "--p-multiselect-disabled-color": "dt('multiselect.disabled.color')",
    "--p-multiselect-overlay-background": "dt('multiselect.overlay.background')",
    "--p-multiselect-overlay-color": "dt('multiselect.overlay.color')",
    "--p-multiselect-overlay-border-color": "dt('multiselect.overlay.border.color')",
    "--p-multiselect-overlay-border-radius": "dt('multiselect.overlay.border.radius')",
    "--p-multiselect-overlay-shadow": "dt('multiselect.overlay.shadow')",
    "--p-multiselect-list-header-padding": "dt('multiselect.list.header.padding')",
    "--p-multiselect-option-gap": "dt('multiselect.option.gap')",
    "--p-multiselect-list-padding": "dt('multiselect.list.padding')",
    "--p-multiselect-list-gap": "dt('multiselect.list.gap')",
    "--p-multiselect-option-padding": "dt('multiselect.option.padding')",
    "--p-multiselect-option-color": "dt('multiselect.option.color')",
    "--p-multiselect-option-border-radius": "dt('multiselect.option.border.radius')",
    "--p-multiselect-option-focus-background": "dt('multiselect.option.focus.background')",
    "--p-multiselect-option-focus-color": "dt('multiselect.option.focus.color')",
    "--p-multiselect-option-selected-background": "dt('multiselect.option.selected.background')",
    "--p-multiselect-option-selected-color": "dt('multiselect.option.selected.color')",
    "--p-multiselect-option-selected-focus-background": "dt('multiselect.option.selected.focus.background')",
    "--p-multiselect-option-selected-focus-color": "dt('multiselect.option.selected.focus.color')",
    "--p-multiselect-option-group-padding": "dt('multiselect.option.group.padding')",
    "--p-multiselect-option-group-background": "dt('multiselect.option.group.background')",
    "--p-multiselect-option-group-color": "dt('multiselect.option.group.color')",
    "--p-multiselect-option-group-font-weight": "dt('multiselect.option.group.font.weight')",
    "--p-multiselect-empty-message-padding": "dt('multiselect.empty.message.padding')",
    "--p-multiselect-chip-border-radius": "dt('multiselect.chip.border.radius')",
    "--p-multiselect-sm-font-size": "dt('multiselect.sm.font.size')",
    "--p-multiselect-sm-padding-y": "dt('multiselect.sm.padding.y')",
    "--p-multiselect-sm-padding-x": "dt('multiselect.sm.padding.x')",
    "--p-multiselect-lg-font-size": "dt('multiselect.lg.font.size')",
    "--p-multiselect-lg-padding-y": "dt('multiselect.lg.padding.y')",
    "--p-multiselect-lg-padding-x": "dt('multiselect.lg.padding.x')",
    "--p-orderlist-gap": "dt('orderlist.gap')",
    "--p-orderlist-controls-gap": "dt('orderlist.controls.gap')",
    "--p-organizationchart-gutter": "dt('organizationchart.gutter')",
    "--p-organizationchart-node-border-color": "dt('organizationchart.node.border.color')",
    "--p-organizationchart-node-background": "dt('organizationchart.node.background')",
    "--p-organizationchart-node-color": "dt('organizationchart.node.color')",
    "--p-organizationchart-node-padding": "dt('organizationchart.node.padding')",
    "--p-organizationchart-node-border-radius": "dt('organizationchart.node.border.radius')",
    "--p-organizationchart-transition-duration": "dt('organizationchart.transition.duration')",
    "--p-organizationchart-node-toggleable-padding": "dt('organizationchart.node.toggleable.padding')",
    "--p-organizationchart-node-hover-background": "dt('organizationchart.node.hover.background')",
    "--p-organizationchart-node-hover-color": "dt('organizationchart.node.hover.color')",
    "--p-organizationchart-node-selected-background": "dt('organizationchart.node.selected.background')",
    "--p-organizationchart-node-selected-color": "dt('organizationchart.node.selected.color')",
    "--p-organizationchart-node-toggle-button-size": "dt('organizationchart.node.toggle.button.size')",
    "--p-organizationchart-node-toggle-button-background": "dt('organizationchart.node.toggle.button.background')",
    "--p-organizationchart-node-toggle-button-color": "dt('organizationchart.node.toggle.button.color')",
    "--p-organizationchart-node-toggle-button-border-radius": "dt('organizationchart.node.toggle.button.border.radius')",
    "--p-organizationchart-node-toggle-button-border-color": "dt('organizationchart.node.toggle.button.border.color')",
    "--p-organizationchart-node-toggle-button-hover-background": "dt('organizationchart.node.toggle.button.hover.background')",
    "--p-organizationchart-node-toggle-button-hover-color": "dt('organizationchart.node.toggle.button.hover.color')",
    "--p-organizationchart-connector-height": "dt('organizationchart.connector.height')",
    "--p-organizationchart-connector-color": "dt('organizationchart.connector.color')",
    "--p-organizationchart-connector-border-radius": "dt('organizationchart.connector.border.radius')",
    "--p-overlaybadge-outline-width": "dt('overlaybadge.outline.width')",
    "--p-overlaybadge-outline-color": "dt('overlaybadge.outline.color')",
    "--p-paginator-background": "dt('paginator.background')",
    "--p-paginator-color": "dt('paginator.color')",
    "--p-paginator-padding": "dt('paginator.padding')",
    "--p-paginator-border-radius": "dt('paginator.border.radius')",
    "--p-paginator-gap": "dt('paginator.gap')",
    "--p-paginator-nav-button-background": "dt('paginator.nav.button.background')",
    "--p-paginator-nav-button-color": "dt('paginator.nav.button.color')",
    "--p-paginator-nav-button-width": "dt('paginator.nav.button.width')",
    "--p-paginator-nav-button-height": "dt('paginator.nav.button.height')",
    "--p-paginator-transition-duration": "dt('paginator.transition.duration')",
    "--p-paginator-nav-button-border-radius": "dt('paginator.nav.button.border.radius')",
    "--p-paginator-nav-button-focus-ring-shadow": "dt('paginator.nav.button.focus.ring.shadow')",
    "--p-paginator-nav-button-focus-ring-width": "dt('paginator.nav.button.focus.ring.width')",
    "--p-paginator-nav-button-focus-ring-style": "dt('paginator.nav.button.focus.ring.style')",
    "--p-paginator-nav-button-focus-ring-color": "dt('paginator.nav.button.focus.ring.color')",
    "--p-paginator-nav-button-focus-ring-offset": "dt('paginator.nav.button.focus.ring.offset')",
    "--p-paginator-nav-button-hover-background": "dt('paginator.nav.button.hover.background')",
    "--p-paginator-nav-button-hover-color": "dt('paginator.nav.button.hover.color')",
    "--p-paginator-nav-button-selected-background": "dt('paginator.nav.button.selected.background')",
    "--p-paginator-nav-button-selected-color": "dt('paginator.nav.button.selected.color')",
    "--p-paginator-current-page-report-color": "dt('paginator.current.page.report.color')",
    "--p-paginator-jump-to-page-input-max-width": "dt('paginator.jump.to.page.input.max.width')",
    "--p-panel-border-color": "dt('panel.border.color')",
    "--p-panel-border-radius": "dt('panel.border.radius')",
    "--p-panel-background": "dt('panel.background')",
    "--p-panel-color": "dt('panel.color')",
    "--p-panel-header-padding": "dt('panel.header.padding')",
    "--p-panel-header-background": "dt('panel.header.background')",
    "--p-panel-header-color": "dt('panel.header.color')",
    "--p-panel-header-border-width": "dt('panel.header.border.width')",
    "--p-panel-header-border-color": "dt('panel.header.border.color')",
    "--p-panel-header-border-radius": "dt('panel.header.border.radius')",
    "--p-panel-toggleable-header-padding": "dt('panel.toggleable.header.padding')",
    "--p-panel-title-font-weight": "dt('panel.title.font.weight')",
    "--p-panel-content-padding": "dt('panel.content.padding')",
    "--p-panel-footer-padding": "dt('panel.footer.padding')",
    "--p-panelmenu-gap": "dt('panelmenu.gap')",
    "--p-panelmenu-panel-background": "dt('panelmenu.panel.background')",
    "--p-panelmenu-panel-border-width": "dt('panelmenu.panel.border.width')",
    "--p-panelmenu-panel-border-color": "dt('panelmenu.panel.border.color')",
    "--p-panelmenu-panel-color": "dt('panelmenu.panel.color')",
    "--p-panelmenu-panel-border-radius": "dt('panelmenu.panel.border.radius')",
    "--p-panelmenu-panel-padding": "dt('panelmenu.panel.padding')",
    "--p-panelmenu-panel-first-border-width": "dt('panelmenu.panel.first.border.width')",
    "--p-panelmenu-panel-first-top-border-radius": "dt('panelmenu.panel.first.top.border.radius')",
    "--p-panelmenu-panel-last-border-width": "dt('panelmenu.panel.last.border.width')",
    "--p-panelmenu-panel-last-bottom-border-radius": "dt('panelmenu.panel.last.bottom.border.radius')",
    "--p-panelmenu-item-border-radius": "dt('panelmenu.item.border.radius')",
    "--p-panelmenu-transition-duration": "dt('panelmenu.transition.duration')",
    "--p-panelmenu-item-color": "dt('panelmenu.item.color')",
    "--p-panelmenu-item-gap": "dt('panelmenu.item.gap')",
    "--p-panelmenu-item-padding": "dt('panelmenu.item.padding')",
    "--p-panelmenu-item-icon-color": "dt('panelmenu.item.icon.color')",
    "--p-panelmenu-submenu-icon-color": "dt('panelmenu.submenu.icon.color')",
    "--p-panelmenu-item-focus-background": "dt('panelmenu.item.focus.background')",
    "--p-panelmenu-item-focus-color": "dt('panelmenu.item.focus.color')",
    "--p-panelmenu-item-icon-focus-color": "dt('panelmenu.item.icon.focus.color')",
    "--p-panelmenu-submenu-icon-focus-color": "dt('panelmenu.submenu.icon.focus.color')",
    "--p-panelmenu-submenu-indent": "dt('panelmenu.submenu.indent')",
    "--p-password-meter-height": "dt('password.meter.height')",
    "--p-password-meter-background": "dt('password.meter.background')",
    "--p-password-meter-border-radius": "dt('password.meter.border.radius')",
    "--p-password-strength-weak-background": "dt('password.strength.weak.background')",
    "--p-password-strength-medium-background": "dt('password.strength.medium.background')",
    "--p-password-strength-strong-background": "dt('password.strength.strong.background')",
    "--p-password-overlay-padding": "dt('password.overlay.padding')",
    "--p-password-overlay-background": "dt('password.overlay.background')",
    "--p-password-overlay-color": "dt('password.overlay.color')",
    "--p-password-overlay-border-color": "dt('password.overlay.border.color')",
    "--p-password-overlay-shadow": "dt('password.overlay.shadow')",
    "--p-password-overlay-border-radius": "dt('password.overlay.border.radius')",
    "--p-password-content-gap": "dt('password.content.gap')",
    "--p-password-icon-color": "dt('password.icon.color')",
    "--p-picklist-gap": "dt('picklist.gap')",
    "--p-picklist-controls-gap": "dt('picklist.controls.gap')",
    "--p-popover-gutter": "dt('popover.gutter')",
    "--p-popover-background": "dt('popover.background')",
    "--p-popover-color": "dt('popover.color')",
    "--p-popover-border-color": "dt('popover.border.color')",
    "--p-popover-border-radius": "dt('popover.border.radius')",
    "--p-popover-shadow": "dt('popover.shadow')",
    "--p-popover-content-padding": "dt('popover.content.padding')",
    "--p-popover-arrow-offset": "dt('popover.arrow.offset')",
    "--p-popover-arrow-left": "dt('popover.arrow.left')",
    "--p-progressbar-height": "dt('progressbar.height')",
    "--p-progressbar-background": "dt('progressbar.background')",
    "--p-progressbar-border-radius": "dt('progressbar.border.radius')",
    "--p-progressbar-value-background": "dt('progressbar.value.background')",
    "--p-progressbar-label-color": "dt('progressbar.label.color')",
    "--p-progressbar-label-font-size": "dt('progressbar.label.font.size')",
    "--p-progressbar-label-font-weight": "dt('progressbar.label.font.weight')",
    "--p-progressspinner-colorOne": "dt('progressspinner.colorOne')",
    "--p-progressspinner-color-one": "dt('progressspinner.color.one')",
    "--p-progressspinner-color-two": "dt('progressspinner.color.two')",
    "--p-progressspinner-color-three": "dt('progressspinner.color.three')",
    "--p-progressspinner-color-four": "dt('progressspinner.color.four')",
    "--p-radiobutton-width": "dt('radiobutton.width')",
    "--p-radiobutton-height": "dt('radiobutton.height')",
    "--p-radiobutton-border-color": "dt('radiobutton.border.color')",
    "--p-radiobutton-background": "dt('radiobutton.background')",
    "--p-radiobutton-transition-duration": "dt('radiobutton.transition.duration')",
    "--p-radiobutton-shadow": "dt('radiobutton.shadow')",
    "--p-radiobutton-icon-size": "dt('radiobutton.icon.size')",
    "--p-radiobutton-hover-border-color": "dt('radiobutton.hover.border.color')",
    "--p-radiobutton-checked-border-color": "dt('radiobutton.checked.border.color')",
    "--p-radiobutton-checked-background": "dt('radiobutton.checked.background')",
    "--p-radiobutton-icon-checked-color": "dt('radiobutton.icon.checked.color')",
    "--p-radiobutton-checked-hover-border-color": "dt('radiobutton.checked.hover.border.color')",
    "--p-radiobutton-checked-hover-background": "dt('radiobutton.checked.hover.background')",
    "--p-radiobutton-icon-checked-hover-color": "dt('radiobutton.icon.checked.hover.color')",
    "--p-radiobutton-focus-border-color": "dt('radiobutton.focus.border.color')",
    "--p-radiobutton-focus-ring-shadow": "dt('radiobutton.focus.ring.shadow')",
    "--p-radiobutton-focus-ring-width": "dt('radiobutton.focus.ring.width')",
    "--p-radiobutton-focus-ring-style": "dt('radiobutton.focus.ring.style')",
    "--p-radiobutton-focus-ring-color": "dt('radiobutton.focus.ring.color')",
    "--p-radiobutton-focus-ring-offset": "dt('radiobutton.focus.ring.offset')",
    "--p-radiobutton-checked-focus-border-color": "dt('radiobutton.checked.focus.border.color')",
    "--p-radiobutton-invalid-border-color": "dt('radiobutton.invalid.border.color')",
    "--p-radiobutton-filled-background": "dt('radiobutton.filled.background')",
    "--p-radiobutton-disabled-background": "dt('radiobutton.disabled.background')",
    "--p-radiobutton-checked-disabled-border-color": "dt('radiobutton.checked.disabled.border.color')",
    "--p-radiobutton-icon-disabled-color": "dt('radiobutton.icon.disabled.color')",
    "--p-radiobutton-sm-width": "dt('radiobutton.sm.width')",
    "--p-radiobutton-sm-height": "dt('radiobutton.sm.height')",
    "--p-radiobutton-icon-sm-size": "dt('radiobutton.icon.sm.size')",
    "--p-radiobutton-lg-width": "dt('radiobutton.lg.width')",
    "--p-radiobutton-lg-height": "dt('radiobutton.lg.height')",
    "--p-radiobutton-icon-lg-size": "dt('radiobutton.icon.lg.size')",
    "--p-rating-gap": "dt('rating.gap')",
    "--p-rating-transition-duration": "dt('rating.transition.duration')",
    "--p-rating-focus-ring-shadow": "dt('rating.focus.ring.shadow')",
    "--p-rating-focus-ring-width": "dt('rating.focus.ring.width')",
    "--p-rating-focus-ring-style": "dt('rating.focus.ring.style')",
    "--p-rating-focus-ring-color": "dt('rating.focus.ring.color')",
    "--p-rating-focus-ring-offset": "dt('rating.focus.ring.offset')",
    "--p-rating-icon-color": "dt('rating.icon.color')",
    "--p-rating-icon-size": "dt('rating.icon.size')",
    "--p-rating-icon-hover-color": "dt('rating.icon.hover.color')",
    "--p-rating-icon-active-color": "dt('rating.icon.active.color')",
    "--p-rating-invalid-icon-color": "dt('rating.invalid.icon.color')",
    "--p-ripple-background": "dt('ripple.background')",
    "--p-scrollpanel-bar-size": "dt('scrollpanel.bar.size')",
    "--p-scrollpanel-bar-border-radius": "dt('scrollpanel.bar.border.radius')",
    "--p-scrollpanel-bar-background": "dt('scrollpanel.bar.background')",
    "--p-scrollpanel-transition-duration": "dt('scrollpanel.transition.duration')",
    "--p-scrollpanel-bar-focus-ring-shadow": "dt('scrollpanel.bar.focus.ring.shadow')",
    "--p-scrollpanel-barfocus-ring-width": "dt('scrollpanel.barfocus.ring.width')",
    "--p-scrollpanel-bar-focus-ring-style": "dt('scrollpanel.bar.focus.ring.style')",
    "--p-scrollpanel-bar-focus-ring-color": "dt('scrollpanel.bar.focus.ring.color')",
    "--p-scrollpanel-barfocus-ring-offset": "dt('scrollpanel.barfocus.ring.offset')",
    "--p-select-background": "dt('select.background')",
    "--p-select-border-color": "dt('select.border.color')",
    "--p-select-transition-duration": "dt('select.transition.duration')",
    "--p-select-border-radius": "dt('select.border.radius')",
    "--p-select-shadow": "dt('select.shadow')",
    "--p-select-hover-border-color": "dt('select.hover.border.color')",
    "--p-select-focus-border-color": "dt('select.focus.border.color')",
    "--p-select-focus-ring-shadow": "dt('select.focus.ring.shadow')",
    "--p-select-focus-ring-width": "dt('select.focus.ring.width')",
    "--p-select-focus-ring-style": "dt('select.focus.ring.style')",
    "--p-select-focus-ring-color": "dt('select.focus.ring.color')",
    "--p-select-focus-ring-offset": "dt('select.focus.ring.offset')",
    "--p-select-filled-background": "dt('select.filled.background')",
    "--p-select-filled-hover-background": "dt('select.filled.hover.background')",
    "--p-select-filled-focus-background": "dt('select.filled.focus.background')",
    "--p-select-invalid-border-color": "dt('select.invalid.border.color')",
    "--p-select-disabled-background": "dt('select.disabled.background')",
    "--p-select-clear-icon-color": "dt('select.clear.icon.color')",
    "--p-select-dropdown-width": "dt('select.dropdown.width')",
    "--p-select-dropdown-color": "dt('select.dropdown.color')",
    "--p-select-padding-y": "dt('select.padding.y')",
    "--p-select-padding-x": "dt('select.padding.x')",
    "--p-select-color": "dt('select.color')",
    "--p-select-placeholder-color": "dt('select.placeholder.color')",
    "--p-select-invalid-placeholder-color": "dt('select.invalid.placeholder.color')",
    "--p-select-disabled-color": "dt('select.disabled.color')",
    "--p-select-overlay-background": "dt('select.overlay.background')",
    "--p-select-overlay-color": "dt('select.overlay.color')",
    "--p-select-overlay-border-color": "dt('select.overlay.border.color')",
    "--p-select-overlay-border-radius": "dt('select.overlay.border.radius')",
    "--p-select-overlay-shadow": "dt('select.overlay.shadow')",
    "--p-select-list-header-padding": "dt('select.list.header.padding')",
    "--p-select-option-group-padding": "dt('select.option.group.padding')",
    "--p-select-option-group-background": "dt('select.option.group.background')",
    "--p-select-option-group-color": "dt('select.option.group.color')",
    "--p-select-option-group-font-weight": "dt('select.option.group.font.weight')",
    "--p-select-list-padding": "dt('select.list.padding')",
    "--p-select-list-gap": "dt('select.list.gap')",
    "--p-select-option-padding": "dt('select.option.padding')",
    "--p-select-option-color": "dt('select.option.color')",
    "--p-select-option-border-radius": "dt('select.option.border.radius')",
    "--p-select-option-focus-background": "dt('select.option.focus.background')",
    "--p-select-option-focus-color": "dt('select.option.focus.color')",
    "--p-select-option-selected-background": "dt('select.option.selected.background')",
    "--p-select-option-selected-color": "dt('select.option.selected.color')",
    "--p-select-option-selected-focus-background": "dt('select.option.selected.focus.background')",
    "--p-select-option-selected-focus-color": "dt('select.option.selected.focus.color')",
    "--p-select-checkmark-gutter-start": "dt('select.checkmark.gutter.start')",
    "--p-select-checkmark-gutter-end": "dt('select.checkmark.gutter.end')",
    "--p-select-checkmark-color": "dt('select.checkmark.color')",
    "--p-select-empty-message-padding": "dt('select.empty.message.padding')",
    "--p-select-sm-font-size": "dt('select.sm.font.size')",
    "--p-select-sm-padding-y": "dt('select.sm.padding.y')",
    "--p-select-sm-padding-x": "dt('select.sm.padding.x')",
    "--p-select-lg-font-size": "dt('select.lg.font.size')",
    "--p-select-lg-padding-y": "dt('select.lg.padding.y')",
    "--p-select-lg-padding-x": "dt('select.lg.padding.x')",
    "--p-selectbutton-border-radius": "dt('selectbutton.border.radius')",
    "--p-selectbutton-invalid-border-color": "dt('selectbutton.invalid.border.color')",
    "--p-skeleton-background": "dt('skeleton.background')",
    "--p-skeleton-border-radius": "dt('skeleton.border.radius')",
    "--p-skeleton-animation-background": "dt('skeleton.animation.background')",
    "--p-slider-track-background": "dt('slider.track.background')",
    "--p-slider-track-border-radius": "dt('slider.track.border.radius')",
    "--p-slider-handle-height": "dt('slider.handle.height')",
    "--p-slider-handle-width": "dt('slider.handle.width')",
    "--p-slider-handle-background": "dt('slider.handle.background')",
    "--p-slider-handle-border-radius": "dt('slider.handle.border.radius')",
    "--p-slider-transition-duration": "dt('slider.transition.duration')",
    "--p-slider-handle-content-width": "dt('slider.handle.content.width')",
    "--p-slider-handle-content-height": "dt('slider.handle.content.height')",
    "--p-slider-handle-content-background": "dt('slider.handle.content.background')",
    "--p-slider-handle-content-border-radius": "dt('slider.handle.content.border.radius')",
    "--p-slider-handle-content-shadow": "dt('slider.handle.content.shadow')",
    "--p-slider-handle-hover-background": "dt('slider.handle.hover.background')",
    "--p-slider-handle-content-hover-background": "dt('slider.handle.content.hover.background')",
    "--p-slider-handle-focus-ring-shadow": "dt('slider.handle.focus.ring.shadow')",
    "--p-slider-handle-focus-ring-width": "dt('slider.handle.focus.ring.width')",
    "--p-slider-handle-focus-ring-style": "dt('slider.handle.focus.ring.style')",
    "--p-slider-handle-focus-ring-color": "dt('slider.handle.focus.ring.color')",
    "--p-slider-handle-focus-ring-offset": "dt('slider.handle.focus.ring.offset')",
    "--p-slider-range-background": "dt('slider.range.background')",
    "--p-slider-track-size": "dt('slider.track.size')",
    "--p-speeddial-gap": "dt('speeddial.gap')",
    "--p-speeddial-transition-duration": "dt('speeddial.transition.duration')",
    "--p-splitbutton-border-radius": "dt('splitbutton.border.radius')",
    "--p-splitbutton-rounded-border-radius": "dt('splitbutton.rounded.border.radius')",
    "--p-splitbutton-raised-shadow": "dt('splitbutton.raised.shadow')",
    "--p-splitter-border-color": "dt('splitter.border.color')",
    "--p-splitter-background": "dt('splitter.background')",
    "--p-splitter-color": "dt('splitter.color')",
    "--p-splitter-gutter-background": "dt('splitter.gutter.background')",
    "--p-splitter-handle-border-radius": "dt('splitter.handle.border.radius')",
    "--p-splitter-handle-background": "dt('splitter.handle.background')",
    "--p-splitter-transition-duration": "dt('splitter.transition.duration')",
    "--p-splitter-handle-focus-ring-shadow": "dt('splitter.handle.focus.ring.shadow')",
    "--p-splitter-handle-focus-ring-width": "dt('splitter.handle.focus.ring.width')",
    "--p-splitter-handle-focus-ring-style": "dt('splitter.handle.focus.ring.style')",
    "--p-splitter-handle-focus-ring-color": "dt('splitter.handle.focus.ring.color')",
    "--p-splitter-handle-focus-ring-offset": "dt('splitter.handle.focus.ring.offset')",
    "--p-splitter-handle-size": "dt('splitter.handle.size')",
    "--p-stepper-step-gap": "dt('stepper.step.gap')",
    "--p-stepper-step-padding": "dt('stepper.step.padding')",
    "--p-stepper-transition-duration": "dt('stepper.transition.duration')",
    "--p-stepper-step-header-border-radius": "dt('stepper.step.header.border.radius')",
    "--p-stepper-step-header-padding": "dt('stepper.step.header.padding')",
    "--p-stepper-step-header-gap": "dt('stepper.step.header.gap')",
    "--p-stepper-step-header-focus-ring-shadow": "dt('stepper.step.header.focus.ring.shadow')",
    "--p-stepper-step-header-focus-ring-width": "dt('stepper.step.header.focus.ring.width')",
    "--p-stepper-step-header-focus-ring-style": "dt('stepper.step.header.focus.ring.style')",
    "--p-stepper-step-header-focus-ring-color": "dt('stepper.step.header.focus.ring.color')",
    "--p-stepper-step-header-focus-ring-offset": "dt('stepper.step.header.focus.ring.offset')",
    "--p-stepper-step-title-color": "dt('stepper.step.title.color')",
    "--p-stepper-step-title-font-weight": "dt('stepper.step.title.font.weight')",
    "--p-stepper-step-number-color": "dt('stepper.step.number.color')",
    "--p-stepper-step-number-border-color": "dt('stepper.step.number.border.color')",
    "--p-stepper-step-number-background": "dt('stepper.step.number.background')",
    "--p-stepper-step-number-size": "dt('stepper.step.number.size')",
    "--p-stepper-step-number-font-size": "dt('stepper.step.number.font.size')",
    "--p-stepper-step-number-border-radius": "dt('stepper.step.number.border.radius')",
    "--p-stepper-step-number-font-weight": "dt('stepper.step.number.font.weight')",
    "--p-stepper-step-number-shadow": "dt('stepper.step.number.shadow')",
    "--p-stepper-step-number-active-background": "dt('stepper.step.number.active.background')",
    "--p-stepper-step-number-active-border-color": "dt('stepper.step.number.active.border.color')",
    "--p-stepper-step-number-active-color": "dt('stepper.step.number.active.color')",
    "--p-stepper-step-title-active-color": "dt('stepper.step.title.active.color')",
    "--p-focus-ring-width": "dt('focus.ring.width')",
    "--p-focus-ring-style": "dt('focus.ring.style')",
    "--p-focus-ring-color": "dt('focus.ring.color')",
    "--p-focus-ring-offset": "dt('focus.ring.offset')",
    "--p-stepper-separator-active-background": "dt('stepper.separator.active.background')",
    "--p-stepper-separator-background": "dt('stepper.separator.background')",
    "--p-stepper-separator-size": "dt('stepper.separator.size')",
    "--p-stepper-steppanels-padding": "dt('stepper.steppanels.padding')",
    "--p-stepper-steppanel-background": "dt('stepper.steppanel.background')",
    "--p-stepper-steppanel-color": "dt('stepper.steppanel.color')",
    "--p-stepper-steppanel-padding": "dt('stepper.steppanel.padding')",
    "--p-stepper-separator-margin": "dt('stepper.separator.margin')",
    "--p-steps-separator-background": "dt('steps.separator.background')",
    "--p-steps-transition-duration": "dt('steps.transition.duration')",
    "--p-steps-item-link-border-radius": "dt('steps.item.link.border.radius')",
    "--p-steps-item-link-gap": "dt('steps.item.link.gap')",
    "--p-steps-item-link-focus-ring-shadow": "dt('steps.item.link.focus.ring.shadow')",
    "--p-steps-item-link-focus-ring-width": "dt('steps.item.link.focus.ring.width')",
    "--p-steps-item-link-focus-ring-style": "dt('steps.item.link.focus.ring.style')",
    "--p-steps-item-link-focus-ring-color": "dt('steps.item.link.focus.ring.color')",
    "--p-steps-item-link-focus-ring-offset": "dt('steps.item.link.focus.ring.offset')",
    "--p-steps-item-label-color": "dt('steps.item.label.color')",
    "--p-steps-item-label-font-weight": "dt('steps.item.label.font.weight')",
    "--p-steps-item-number-color": "dt('steps.item.number.color')",
    "--p-steps-item-number-border-color": "dt('steps.item.number.border.color')",
    "--p-steps-item-number-background": "dt('steps.item.number.background')",
    "--p-steps-item-number-size": "dt('steps.item.number.size')",
    "--p-steps-item-number-font-size": "dt('steps.item.number.font.size')",
    "--p-steps-item-number-border-radius": "dt('steps.item.number.border.radius')",
    "--p-steps-item-number-font-weight": "dt('steps.item.number.font.weight')",
    "--p-steps-item-number-shadow": "dt('steps.item.number.shadow')",
    "--p-steps-item-number-active-background": "dt('steps.item.number.active.background')",
    "--p-steps-item-number-active-border-color": "dt('steps.item.number.active.border.color')",
    "--p-steps-item-number-active-color": "dt('steps.item.number.active.color')",
    "--p-steps-item-label-active-color": "dt('steps.item.label.active.color')",
    "--p-tabmenu-tablist-background": "dt('tabmenu.tablist.background')",
    "--p-tabmenu-tablist-border-color": "dt('tabmenu.tablist.border.color')",
    "--p-tabmenu-tablist-border-width": "dt('tabmenu.tablist.border.width')",
    "--p-tabmenu-item-background": "dt('tabmenu.item.background')",
    "--p-tabmenu-item-border-width": "dt('tabmenu.item.border.width')",
    "--p-tabmenu-item-border-color": "dt('tabmenu.item.border.color')",
    "--p-tabmenu-item-color": "dt('tabmenu.item.color')",
    "--p-tabmenu-item-padding": "dt('tabmenu.item.padding')",
    "--p-tabmenu-item-font-weight": "dt('tabmenu.item.font.weight')",
    "--p-tabmenu-transition-duration": "dt('tabmenu.transition.duration')",
    "--p-tabmenu-item-margin": "dt('tabmenu.item.margin')",
    "--p-tabmenu-item-gap": "dt('tabmenu.item.gap')",
    "--p-tabmenu-item-focus-ring-shadow": "dt('tabmenu.item.focus.ring.shadow')",
    "--p-tabmenu-item-focus-ring-width": "dt('tabmenu.item.focus.ring.width')",
    "--p-tabmenu-item-focus-ring-style": "dt('tabmenu.item.focus.ring.style')",
    "--p-tabmenu-item-focus-ring-color": "dt('tabmenu.item.focus.ring.color')",
    "--p-tabmenu-item-focus-ring-offset": "dt('tabmenu.item.focus.ring.offset')",
    "--p-tabmenu-item-icon-color": "dt('tabmenu.item.icon.color')",
    "--p-tabmenu-item-hover-background": "dt('tabmenu.item.hover.background')",
    "--p-tabmenu-item-hover-border-color": "dt('tabmenu.item.hover.border.color')",
    "--p-tabmenu-item-hover-color": "dt('tabmenu.item.hover.color')",
    "--p-tabmenu-item-icon-hover-color": "dt('tabmenu.item.icon.hover.color')",
    "--p-tabmenu-item-active-background": "dt('tabmenu.item.active.background')",
    "--p-tabmenu-item-active-border-color": "dt('tabmenu.item.active.border.color')",
    "--p-tabmenu-item-active-color": "dt('tabmenu.item.active.color')",
    "--p-tabmenu-item-icon-active-color": "dt('tabmenu.item.icon.active.color')",
    "--p-tabmenu-active-bar-bottom": "dt('tabmenu.active.bar.bottom')",
    "--p-tabmenu-active-bar-height": "dt('tabmenu.active.bar.height')",
    "--p-tabmenu-active-bar-background": "dt('tabmenu.active.bar.background')",
    "--p-tabs-tablist-background": "dt('tabs.tablist.background')",
    "--p-tabs-tablist-border-color": "dt('tabs.tablist.border.color')",
    "--p-tabs-tablist-border-width": "dt('tabs.tablist.border.width')",
    "--p-tabs-nav-button-background": "dt('tabs.nav.button.background')",
    "--p-tabs-nav-button-color": "dt('tabs.nav.button.color')",
    "--p-tabs-nav-button-width": "dt('tabs.nav.button.width')",
    "--p-tabs-transition-duration": "dt('tabs.transition.duration')",
    "--p-tabs-nav-button-shadow": "dt('tabs.nav.button.shadow')",
    "--p-tabs-nav-button-focus-ring-shadow": "dt('tabs.nav.button.focus.ring.shadow')",
    "--p-tabs-nav-button-focus-ring-width": "dt('tabs.nav.button.focus.ring.width')",
    "--p-tabs-nav-button-focus-ring-style": "dt('tabs.nav.button.focus.ring.style')",
    "--p-tabs-nav-button-focus-ring-color": "dt('tabs.nav.button.focus.ring.color')",
    "--p-tabs-nav-button-focus-ring-offset": "dt('tabs.nav.button.focus.ring.offset')",
    "--p-tabs-nav-button-hover-color": "dt('tabs.nav.button.hover.color')",
    "--p-tabs-tab-gap": "dt('tabs.tab.gap')",
    "--p-tabs-tab-background": "dt('tabs.tab.background')",
    "--p-tabs-tab-border-width": "dt('tabs.tab.border.width')",
    "--p-tabs-tab-border-color": "dt('tabs.tab.border.color')",
    "--p-tabs-tab-color": "dt('tabs.tab.color')",
    "--p-tabs-tab-padding": "dt('tabs.tab.padding')",
    "--p-tabs-tab-font-weight": "dt('tabs.tab.font.weight')",
    "--p-tabs-tab-margin": "dt('tabs.tab.margin')",
    "--p-tabs-tab-focus-ring-shadow": "dt('tabs.tab.focus.ring.shadow')",
    "--p-tabs-tab-focus-ring-width": "dt('tabs.tab.focus.ring.width')",
    "--p-tabs-tab-focus-ring-style": "dt('tabs.tab.focus.ring.style')",
    "--p-tabs-tab-focus-ring-color": "dt('tabs.tab.focus.ring.color')",
    "--p-tabs-tab-focus-ring-offset": "dt('tabs.tab.focus.ring.offset')",
    "--p-tabs-tab-hover-background": "dt('tabs.tab.hover.background')",
    "--p-tabs-tab-hover-border-color": "dt('tabs.tab.hover.border.color')",
    "--p-tabs-tab-hover-color": "dt('tabs.tab.hover.color')",
    "--p-tabs-tab-active-background": "dt('tabs.tab.active.background')",
    "--p-tabs-tab-active-border-color": "dt('tabs.tab.active.border.color')",
    "--p-tabs-tab-active-color": "dt('tabs.tab.active.color')",
    "--p-tabs-tabpanel-background": "dt('tabs.tabpanel.background')",
    "--p-tabs-tabpanel-color": "dt('tabs.tabpanel.color')",
    "--p-tabs-tabpanel-padding": "dt('tabs.tabpanel.padding')",
    "--p-tabs-tabpanel-focus-ring-shadow": "dt('tabs.tabpanel.focus.ring.shadow')",
    "--p-tabs-tabpanel-focus-ring-width": "dt('tabs.tabpanel.focus.ring.width')",
    "--p-tabs-tabpanel-focus-ring-style": "dt('tabs.tabpanel.focus.ring.style')",
    "--p-tabs-tabpanel-focus-ring-color": "dt('tabs.tabpanel.focus.ring.color')",
    "--p-tabs-tabpanel-focus-ring-offset": "dt('tabs.tabpanel.focus.ring.offset')",
    "--p-tabs-active-bar-bottom": "dt('tabs.active.bar.bottom')",
    "--p-tabs-active-bar-height": "dt('tabs.active.bar.height')",
    "--p-tabs-active-bar-background": "dt('tabs.active.bar.background')",
    "--p-tabview-tab-list-background": "dt('tabview.tab.list.background')",
    "--p-tabview-tab-list-border-color": "dt('tabview.tab.list.border.color')",
    "--p-tabview-tab-border-color": "dt('tabview.tab.border.color')",
    "--p-tabview-tab-color": "dt('tabview.tab.color')",
    "--p-tabview-transition-duration": "dt('tabview.transition.duration')",
    "--p-tabview-tab-hover-color": "dt('tabview.tab.hover.color')",
    "--p-tabview-tab-active-color": "dt('tabview.tab.active.color')",
    "--p-tabview-nav-button-background": "dt('tabview.nav.button.background')",
    "--p-tabview-nav-button-color": "dt('tabview.nav.button.color')",
    "--p-tabview-nav-button-shadow": "dt('tabview.nav.button.shadow')",
    "--p-tabview-nav-button-hover-color": "dt('tabview.nav.button.hover.color')",
    "--p-tabview-tab-panel-background": "dt('tabview.tab.panel.background')",
    "--p-tabview-tab-panel-color": "dt('tabview.tab.panel.color')",
    "--p-tabview-tab-active-border-color": "dt('tabview.tab.active.border.color')",
    "--p-tag-primary-background": "dt('tag.primary.background')",
    "--p-tag-primary-color": "dt('tag.primary.color')",
    "--p-tag-font-size": "dt('tag.font.size')",
    "--p-tag-font-weight": "dt('tag.font.weight')",
    "--p-tag-padding": "dt('tag.padding')",
    "--p-tag-border-radius": "dt('tag.border.radius')",
    "--p-tag-gap": "dt('tag.gap')",
    "--p-tag-icon-size": "dt('tag.icon.size')",
    "--p-tag-rounded-border-radius": "dt('tag.rounded.border.radius')",
    "--p-tag-success-background": "dt('tag.success.background')",
    "--p-tag-success-color": "dt('tag.success.color')",
    "--p-tag-info-background": "dt('tag.info.background')",
    "--p-tag-info-color": "dt('tag.info.color')",
    "--p-tag-warn-background": "dt('tag.warn.background')",
    "--p-tag-warn-color": "dt('tag.warn.color')",
    "--p-tag-danger-background": "dt('tag.danger.background')",
    "--p-tag-danger-color": "dt('tag.danger.color')",
    "--p-tag-secondary-background": "dt('tag.secondary.background')",
    "--p-tag-secondary-color": "dt('tag.secondary.color')",
    "--p-tag-contrast-background": "dt('tag.contrast.background')",
    "--p-tag-contrast-color": "dt('tag.contrast.color')",
    "--p-terminal-height": "dt('terminal.height')",
    "--p-terminal-background": "dt('terminal.background')",
    "--p-terminal-color": "dt('terminal.color')",
    "--p-terminal-border-color": "dt('terminal.border.color')",
    "--p-terminal-padding": "dt('terminal.padding')",
    "--p-terminal-border-radius": "dt('terminal.border.radius')",
    "--p-terminal-prompt-gap": "dt('terminal.prompt.gap')",
    "--p-terminal-command-response-margin": "dt('terminal.command.response.margin')",
    "--p-textarea-color": "dt('textarea.color')",
    "--p-textarea-background": "dt('textarea.background')",
    "--p-textarea-padding-y": "dt('textarea.padding.y')",
    "--p-textarea-padding-x": "dt('textarea.padding.x')",
    "--p-textarea-border-color": "dt('textarea.border.color')",
    "--p-textarea-transition-duration": "dt('textarea.transition.duration')",
    "--p-textarea-border-radius": "dt('textarea.border.radius')",
    "--p-textarea-shadow": "dt('textarea.shadow')",
    "--p-textarea-hover-border-color": "dt('textarea.hover.border.color')",
    "--p-textarea-focus-border-color": "dt('textarea.focus.border.color')",
    "--p-textarea-focus-ring-shadow": "dt('textarea.focus.ring.shadow')",
    "--p-textarea-focus-ring-width": "dt('textarea.focus.ring.width')",
    "--p-textarea-focus-ring-style": "dt('textarea.focus.ring.style')",
    "--p-textarea-focus-ring-color": "dt('textarea.focus.ring.color')",
    "--p-textarea-focus-ring-offset": "dt('textarea.focus.ring.offset')",
    "--p-textarea-invalid-border-color": "dt('textarea.invalid.border.color')",
    "--p-textarea-filled-background": "dt('textarea.filled.background')",
    "--p-textarea-filled-hover-background": "dt('textarea.filled.hover.background')",
    "--p-textarea-filled-focus-background": "dt('textarea.filled.focus.background')",
    "--p-textarea-disabled-background": "dt('textarea.disabled.background')",
    "--p-textarea-disabled-color": "dt('textarea.disabled.color')",
    "--p-textarea-placeholder-color": "dt('textarea.placeholder.color')",
    "--p-textarea-invalid-placeholder-color": "dt('textarea.invalid.placeholder.color')",
    "--p-textarea-sm-font-size": "dt('textarea.sm.font.size')",
    "--p-textarea-sm-padding-y": "dt('textarea.sm.padding.y')",
    "--p-textarea-sm-padding-x": "dt('textarea.sm.padding.x')",
    "--p-textarea-lg-font-size": "dt('textarea.lg.font.size')",
    "--p-textarea-lg-padding-y": "dt('textarea.lg.padding.y')",
    "--p-textarea-lg-padding-x": "dt('textarea.lg.padding.x')",
    "--p-tieredmenu-background": "dt('tieredmenu.background')",
    "--p-tieredmenu-color": "dt('tieredmenu.color')",
    "--p-tieredmenu-border-color": "dt('tieredmenu.border.color')",
    "--p-tieredmenu-border-radius": "dt('tieredmenu.border.radius')",
    "--p-tieredmenu-list-padding": "dt('tieredmenu.list.padding')",
    "--p-tieredmenu-list-gap": "dt('tieredmenu.list.gap')",
    "--p-tieredmenu-shadow": "dt('tieredmenu.shadow')",
    "--p-tieredmenu-transition-duration": "dt('tieredmenu.transition.duration')",
    "--p-tieredmenu-item-border-radius": "dt('tieredmenu.item.border.radius')",
    "--p-tieredmenu-item-color": "dt('tieredmenu.item.color')",
    "--p-tieredmenu-item-padding": "dt('tieredmenu.item.padding')",
    "--p-tieredmenu-item-gap": "dt('tieredmenu.item.gap')",
    "--p-tieredmenu-item-icon-color": "dt('tieredmenu.item.icon.color')",
    "--p-tieredmenu-submenu-icon-color": "dt('tieredmenu.submenu.icon.color')",
    "--p-tieredmenu-submenu-icon-size": "dt('tieredmenu.submenu.icon.size')",
    "--p-tieredmenu-item-focus-color": "dt('tieredmenu.item.focus.color')",
    "--p-tieredmenu-item-focus-background": "dt('tieredmenu.item.focus.background')",
    "--p-tieredmenu-item-icon-focus-color": "dt('tieredmenu.item.icon.focus.color')",
    "--p-tieredmenu-submenu-icon-focus-color": "dt('tieredmenu.submenu.icon.focus.color')",
    "--p-tieredmenu-item-active-color": "dt('tieredmenu.item.active.color')",
    "--p-tieredmenu-item-active-background": "dt('tieredmenu.item.active.background')",
    "--p-tieredmenu-item-icon-active-color": "dt('tieredmenu.item.icon.active.color')",
    "--p-tieredmenu-submenu-icon-active-color": "dt('tieredmenu.submenu.icon.active.color')",
    "--p-tieredmenu-separator-border-color": "dt('tieredmenu.separator.border.color')",
    "--p-timeline-vertical-event-content-padding": "dt('timeline.vertical.event.content.padding')",
    "--p-timeline-event-connector-size": "dt('timeline.event.connector.size')",
    "--p-timeline-event-min-height": "dt('timeline.event.min.height')",
    "--p-timeline-event-marker-border-width": "dt('timeline.event.marker.border.width')",
    "--p-timeline-event-marker-border-color": "dt('timeline.event.marker.border.color')",
    "--p-timeline-event-marker-border-radius": "dt('timeline.event.marker.border.radius')",
    "--p-timeline-event-marker-size": "dt('timeline.event.marker.size')",
    "--p-timeline-event-marker-background": "dt('timeline.event.marker.background')",
    "--p-timeline-event-marker-content-border-radius": "dt('timeline.event.marker.content.border.radius')",
    "--p-timeline-event-marker-content-size": "dt('timeline.event.marker.content.size')",
    "--p-timeline-event-marker-content-background": "dt('timeline.event.marker.content.background')",
    "--p-timeline-event-marker-content-inset-shadow": "dt('timeline.event.marker.content.inset.shadow')",
    "--p-timeline-event-connector-color": "dt('timeline.event.connector.color')",
    "--p-timeline-horizontal-event-content-padding": "dt('timeline.horizontal.event.content.padding')",
    "--p-toast-width": "dt('toast.width')",
    "--p-toast-icon-size": "dt('toast.icon.size')",
    "--p-toast-content-padding": "dt('toast.content.padding')",
    "--p-toast-content-gap": "dt('toast.content.gap')",
    "--p-toast-text-gap": "dt('toast.text.gap')",
    "--p-toast-summary-font-weight": "dt('toast.summary.font.weight')",
    "--p-toast-summary-font-size": "dt('toast.summary.font.size')",
    "--p-toast-detail-font-weight": "dt('toast.detail.font.weight')",
    "--p-toast-detail-font-size": "dt('toast.detail.font.size')",
    "--p-toast-transition-duration": "dt('toast.transition.duration')",
    "--p-toast-close-button-width": "dt('toast.close.button.width')",
    "--p-toast-close-button-height": "dt('toast.close.button.height')",
    "--p-toast-close-button-border-radius": "dt('toast.close.button.border.radius')",
    "--p-toast-border-width": "dt('toast.border.width')",
    "--p-toast-blur": "dt('toast.blur')",
    "--p-toast-border-radius": "dt('toast.border.radius')",
    "--p-toast-close-icon-size": "dt('toast.close.icon.size')",
    "--p-toast-info-background": "dt('toast.info.background')",
    "--p-toast-info-border-color": "dt('toast.info.border.color')",
    "--p-toast-info-color": "dt('toast.info.color')",
    "--p-toast-info-shadow": "dt('toast.info.shadow')",
    "--p-toast-info-detail-color": "dt('toast.info.detail.color')",
    "--p-toast-info-close-button-focus-ring-color": "dt('toast.info.close.button.focus.ring.color')",
    "--p-toast-info-close-button-focus-ring-shadow": "dt('toast.info.close.button.focus.ring.shadow')",
    "--p-toast-info-close-button-hover-background": "dt('toast.info.close.button.hover.background')",
    "--p-toast-success-background": "dt('toast.success.background')",
    "--p-toast-success-border-color": "dt('toast.success.border.color')",
    "--p-toast-success-color": "dt('toast.success.color')",
    "--p-toast-success-shadow": "dt('toast.success.shadow')",
    "--p-toast-success-detail-color": "dt('toast.success.detail.color')",
    "--p-toast-success-close-button-focus-ring-color": "dt('toast.success.close.button.focus.ring.color')",
    "--p-toast-success-close-button-focus-ring-shadow": "dt('toast.success.close.button.focus.ring.shadow')",
    "--p-toast-success-close-button-hover-background": "dt('toast.success.close.button.hover.background')",
    "--p-toast-warn-background": "dt('toast.warn.background')",
    "--p-toast-warn-border-color": "dt('toast.warn.border.color')",
    "--p-toast-warn-color": "dt('toast.warn.color')",
    "--p-toast-warn-shadow": "dt('toast.warn.shadow')",
    "--p-toast-warn-detail-color": "dt('toast.warn.detail.color')",
    "--p-toast-warn-close-button-focus-ring-color": "dt('toast.warn.close.button.focus.ring.color')",
    "--p-toast-warn-close-button-focus-ring-shadow": "dt('toast.warn.close.button.focus.ring.shadow')",
    "--p-toast-warn-close-button-hover-background": "dt('toast.warn.close.button.hover.background')",
    "--p-toast-error-background": "dt('toast.error.background')",
    "--p-toast-error-border-color": "dt('toast.error.border.color')",
    "--p-toast-error-color": "dt('toast.error.color')",
    "--p-toast-error-shadow": "dt('toast.error.shadow')",
    "--p-toast-error-detail-color": "dt('toast.error.detail.color')",
    "--p-toast-error-close-button-focus-ring-color": "dt('toast.error.close.button.focus.ring.color')",
    "--p-toast-error-close-button-focus-ring-shadow": "dt('toast.error.close.button.focus.ring.shadow')",
    "--p-toast-error-close-button-hover-background": "dt('toast.error.close.button.hover.background')",
    "--p-toast-secondary-background": "dt('toast.secondary.background')",
    "--p-toast-secondary-border-color": "dt('toast.secondary.border.color')",
    "--p-toast-secondary-color": "dt('toast.secondary.color')",
    "--p-toast-secondary-shadow": "dt('toast.secondary.shadow')",
    "--p-toast-secondary-detail-color": "dt('toast.secondary.detail.color')",
    "--p-toast-secondary-close-button-focus-ring-color": "dt('toast.secondary.close.button.focus.ring.color')",
    "--p-toast-secondary-close-button-focus-ring-shadow": "dt('toast.secondary.close.button.focus.ring.shadow')",
    "--p-toast-secondary-close-button-hover-background": "dt('toast.secondary.close.button.hover.background')",
    "--p-toast-contrast-background": "dt('toast.contrast.background')",
    "--p-toast-contrast-border-color": "dt('toast.contrast.border.color')",
    "--p-toast-contrast-color": "dt('toast.contrast.color')",
    "--p-toast-contrast-shadow": "dt('toast.contrast.shadow')",
    "--p-toast-contrast-detail-color": "dt('toast.contrast.detail.color')",
    "--p-toast-contrast-close-button-focus-ring-color": "dt('toast.contrast.close.button.focus.ring.color')",
    "--p-toast-contrast-close-button-focus-ring-shadow": "dt('toast.contrast.close.button.focus.ring.shadow')",
    "--p-toast-contrast-close-button-hover-background": "dt('toast.contrast.close.button.hover.background')",
    "--p-togglebutton-color": "dt('togglebutton.color')",
    "--p-togglebutton-background": "dt('togglebutton.background')",
    "--p-togglebutton-border-color": "dt('togglebutton.border.color')",
    "--p-togglebutton-padding": "dt('togglebutton.padding')",
    "--p-togglebutton-transition-duration": "dt('togglebutton.transition.duration')",
    "--p-togglebutton-border-radius": "dt('togglebutton.border.radius')",
    "--p-togglebutton-font-weight": "dt('togglebutton.font.weight')",
    "--p-togglebutton-gap": "dt('togglebutton.gap')",
    "--p-togglebutton-content-padding": "dt('togglebutton.content.padding')",
    "--p-togglebutton-content-border-radius": "dt('togglebutton.content.border.radius')",
    "--p-togglebutton-hover-background": "dt('togglebutton.hover.background')",
    "--p-togglebutton-hover-color": "dt('togglebutton.hover.color')",
    "--p-togglebutton-checked-background": "dt('togglebutton.checked.background')",
    "--p-togglebutton-checked-border-color": "dt('togglebutton.checked.border.color')",
    "--p-togglebutton-checked-color": "dt('togglebutton.checked.color')",
    "--p-togglebutton-content-checked-background": "dt('togglebutton.content.checked.background')",
    "--p-togglebutton-content-checked-shadow": "dt('togglebutton.content.checked.shadow')",
    "--p-togglebutton-focus-ring-shadow": "dt('togglebutton.focus.ring.shadow')",
    "--p-togglebutton-focus-ring-width": "dt('togglebutton.focus.ring.width')",
    "--p-togglebutton-focus-ring-style": "dt('togglebutton.focus.ring.style')",
    "--p-togglebutton-focus-ring-color": "dt('togglebutton.focus.ring.color')",
    "--p-togglebutton-focus-ring-offset": "dt('togglebutton.focus.ring.offset')",
    "--p-togglebutton-invalid-border-color": "dt('togglebutton.invalid.border.color')",
    "--p-togglebutton-disabled-background": "dt('togglebutton.disabled.background')",
    "--p-togglebutton-disabled-border-color": "dt('togglebutton.disabled.border.color')",
    "--p-togglebutton-disabled-color": "dt('togglebutton.disabled.color')",
    "--p-togglebutton-icon-color": "dt('togglebutton.icon.color')",
    "--p-togglebutton-icon-hover-color": "dt('togglebutton.icon.hover.color')",
    "--p-togglebutton-icon-checked-color": "dt('togglebutton.icon.checked.color')",
    "--p-togglebutton-icon-disabled-color": "dt('togglebutton.icon.disabled.color')",
    "--p-togglebutton-sm-padding": "dt('togglebutton.sm.padding')",
    "--p-togglebutton-sm-font-size": "dt('togglebutton.sm.font.size')",
    "--p-togglebutton-content-sm-padding": "dt('togglebutton.content.sm.padding')",
    "--p-togglebutton-lg-padding": "dt('togglebutton.lg.padding')",
    "--p-togglebutton-lg-font-size": "dt('togglebutton.lg.font.size')",
    "--p-togglebutton-content-lg-padding": "dt('togglebutton.content.lg.padding')",
    "--p-toggleswitch-width": "dt('toggleswitch.width')",
    "--p-toggleswitch-height": "dt('toggleswitch.height')",
    "--p-toggleswitch-border-radius": "dt('toggleswitch.border.radius')",
    "--p-toggleswitch-border-width": "dt('toggleswitch.border.width')",
    "--p-toggleswitch-border-color": "dt('toggleswitch.border.color')",
    "--p-toggleswitch-background": "dt('toggleswitch.background')",
    "--p-toggleswitch-transition-duration": "dt('toggleswitch.transition.duration')",
    "--p-toggleswitch-shadow": "dt('toggleswitch.shadow')",
    "--p-toggleswitch-handle-background": "dt('toggleswitch.handle.background')",
    "--p-toggleswitch-handle-color": "dt('toggleswitch.handle.color')",
    "--p-toggleswitch-handle-size": "dt('toggleswitch.handle.size')",
    "--p-toggleswitch-gap": "dt('toggleswitch.gap')",
    "--p-toggleswitch-handle-border-radius": "dt('toggleswitch.handle.border.radius')",
    "--p-toggleswitch-slide-duration": "dt('toggleswitch.slide.duration')",
    "--p-toggleswitch-checked-background": "dt('toggleswitch.checked.background')",
    "--p-toggleswitch-checked-border-color": "dt('toggleswitch.checked.border.color')",
    "--p-toggleswitch-handle-checked-background": "dt('toggleswitch.handle.checked.background')",
    "--p-toggleswitch-handle-checked-color": "dt('toggleswitch.handle.checked.color')",
    "--p-toggleswitch-hover-background": "dt('toggleswitch.hover.background')",
    "--p-toggleswitch-hover-border-color": "dt('toggleswitch.hover.border.color')",
    "--p-toggleswitch-handle-hover-background": "dt('toggleswitch.handle.hover.background')",
    "--p-toggleswitch-handle-hover-color": "dt('toggleswitch.handle.hover.color')",
    "--p-toggleswitch-checked-hover-background": "dt('toggleswitch.checked.hover.background')",
    "--p-toggleswitch-checked-hover-border-color": "dt('toggleswitch.checked.hover.border.color')",
    "--p-toggleswitch-handle-checked-hover-background": "dt('toggleswitch.handle.checked.hover.background')",
    "--p-toggleswitch-handle-checked-hover-color": "dt('toggleswitch.handle.checked.hover.color')",
    "--p-toggleswitch-focus-ring-shadow": "dt('toggleswitch.focus.ring.shadow')",
    "--p-toggleswitch-focus-ring-width": "dt('toggleswitch.focus.ring.width')",
    "--p-toggleswitch-focus-ring-style": "dt('toggleswitch.focus.ring.style')",
    "--p-toggleswitch-focus-ring-color": "dt('toggleswitch.focus.ring.color')",
    "--p-toggleswitch-focus-ring-offset": "dt('toggleswitch.focus.ring.offset')",
    "--p-toggleswitch-invalid-border-color": "dt('toggleswitch.invalid.border.color')",
    "--p-toggleswitch-disabled-background": "dt('toggleswitch.disabled.background')",
    "--p-toggleswitch-handle-disabled-background": "dt('toggleswitch.handle.disabled.background')",
    "--p-toolbar-padding": "dt('toolbar.padding')",
    "--p-toolbar-background": "dt('toolbar.background')",
    "--p-toolbar-border-color": "dt('toolbar.border.color')",
    "--p-toolbar-color": "dt('toolbar.color')",
    "--p-toolbar-border-radius": "dt('toolbar.border.radius')",
    "--p-toolbar-gap": "dt('toolbar.gap')",
    "--p-tooltip-max-width": "dt('tooltip.max.width')",
    "--p-tooltip-gutter": "dt('tooltip.gutter')",
    "--p-tooltip-background": "dt('tooltip.background')",
    "--p-tooltip-color": "dt('tooltip.color')",
    "--p-tooltip-padding": "dt('tooltip.padding')",
    "--p-tooltip-shadow": "dt('tooltip.shadow')",
    "--p-tooltip-border-radius": "dt('tooltip.border.radius')",
    "--p-tree-background": "dt('tree.background')",
    "--p-tree-color": "dt('tree.color')",
    "--p-tree-padding": "dt('tree.padding')",
    "--p-tree-gap": "dt('tree.gap')",
    "--p-tree-indent": "dt('tree.indent')",
    "--p-tree-node-border-radius": "dt('tree.node.border.radius')",
    "--p-tree-node-padding": "dt('tree.node.padding')",
    "--p-tree-node-color": "dt('tree.node.color')",
    "--p-tree-node-gap": "dt('tree.node.gap')",
    "--p-tree-transition-duration": "dt('tree.transition.duration')",
    "--p-primary-color": "dt('primary.color')",
    "--p-tree-node-focus-ring-shadow": "dt('tree.node.focus.ring.shadow')",
    "--p-tree-node-focus-ring-width": "dt('tree.node.focus.ring.width')",
    "--p-tree-node-focus-ring-style": "dt('tree.node.focus.ring.style')",
    "--p-tree-node-focus-ring-color": "dt('tree.node.focus.ring.color')",
    "--p-tree-node-focus-ring-offset": "dt('tree.node.focus.ring.offset')",
    "--p-tree-node-hover-background": "dt('tree.node.hover.background')",
    "--p-tree-node-hover-color": "dt('tree.node.hover.color')",
    "--p-tree-node-icon-hover-color": "dt('tree.node.icon.hover.color')",
    "--p-tree-node-selected-background": "dt('tree.node.selected.background')",
    "--p-tree-node-selected-color": "dt('tree.node.selected.color')",
    "--p-tree-node-toggle-button-size": "dt('tree.node.toggle.button.size')",
    "--p-tree-node-toggle-button-color": "dt('tree.node.toggle.button.color')",
    "--p-tree-node-toggle-button-border-radius": "dt('tree.node.toggle.button.border.radius')",
    "--p-tree-node-toggle-button-hover-background": "dt('tree.node.toggle.button.hover.background')",
    "--p-tree-node-toggle-button-hover-color": "dt('tree.node.toggle.button.hover.color')",
    "--p-tree-node-toggle-button-selected-hover-background": "dt('tree.node.toggle.button.selected.hover.background')",
    "--p-tree-node-toggle-button-selected-hover-color": "dt('tree.node.toggle.button.selected.hover.color')",
    "--p-tree-node-icon-color": "dt('tree.node.icon.color')",
    "--p-tree-node-icon-selected-color": "dt('tree.node.icon.selected.color')",
    "--p-tree-filter-margin": "dt('tree.filter.margin')",
    "--p-tree-loading-icon-size": "dt('tree.loading.icon.size')",
    "--p-treeselect-background": "dt('treeselect.background')",
    "--p-treeselect-border-color": "dt('treeselect.border.color')",
    "--p-treeselect-transition-duration": "dt('treeselect.transition.duration')",
    "--p-treeselect-border-radius": "dt('treeselect.border.radius')",
    "--p-treeselect-shadow": "dt('treeselect.shadow')",
    "--p-treeselect-hover-border-color": "dt('treeselect.hover.border.color')",
    "--p-treeselect-focus-border-color": "dt('treeselect.focus.border.color')",
    "--p-treeselect-focus-ring-shadow": "dt('treeselect.focus.ring.shadow')",
    "--p-treeselect-focus-ring-width": "dt('treeselect.focus.ring.width')",
    "--p-treeselect-focus-ring-style": "dt('treeselect.focus.ring.style')",
    "--p-treeselect-focus-ring-color": "dt('treeselect.focus.ring.color')",
    "--p-treeselect-focus-ring-offset": "dt('treeselect.focus.ring.offset')",
    "--p-treeselect-filled-background": "dt('treeselect.filled.background')",
    "--p-treeselect-filled-hover-background": "dt('treeselect.filled.hover.background')",
    "--p-treeselect-filled-focus-background": "dt('treeselect.filled.focus.background')",
    "--p-treeselect-invalid-border-color": "dt('treeselect.invalid.border.color')",
    "--p-treeselect-disabled-background": "dt('treeselect.disabled.background')",
    "--p-treeselect-clear-icon-color": "dt('treeselect.clear.icon.color')",
    "--p-treeselect-dropdown-width": "dt('treeselect.dropdown.width')",
    "--p-treeselect-dropdown-color": "dt('treeselect.dropdown.color')",
    "--p-treeselect-padding-y": "dt('treeselect.padding.y')",
    "--p-treeselect-padding-x": "dt('treeselect.padding.x')",
    "--p-treeselect-color": "dt('treeselect.color')",
    "--p-treeselect-placeholder-color": "dt('treeselect.placeholder.color')",
    "--p-treeselect-invalid-placeholder-color": "dt('treeselect.invalid.placeholder.color')",
    "--p-treeselect-disabled-color": "dt('treeselect.disabled.color')",
    "--p-treeselect-overlay-background": "dt('treeselect.overlay.background')",
    "--p-treeselect-overlay-color": "dt('treeselect.overlay.color')",
    "--p-treeselect-overlay-border-color": "dt('treeselect.overlay.border.color')",
    "--p-treeselect-overlay-border-radius": "dt('treeselect.overlay.border.radius')",
    "--p-treeselect-overlay-shadow": "dt('treeselect.overlay.shadow')",
    "--p-treeselect-empty-message-padding": "dt('treeselect.empty.message.padding')",
    "--p-treeselect-tree-padding": "dt('treeselect.tree.padding')",
    "--p-treeselect-chip-border-radius": "dt('treeselect.chip.border.radius')",
    "--p-treeselect-sm-font-size": "dt('treeselect.sm.font.size')",
    "--p-treeselect-sm-padding-y": "dt('treeselect.sm.padding.y')",
    "--p-treeselect-sm-padding-x": "dt('treeselect.sm.padding.x')",
    "--p-treeselect-lg-font-size": "dt('treeselect.lg.font.size')",
    "--p-treeselect-lg-padding-y": "dt('treeselect.lg.padding.y')",
    "--p-treeselect-lg-padding-x": "dt('treeselect.lg.padding.x')",
    "--p-treetable-header-cell-background": "dt('treetable.header.cell.background')",
    "--p-treetable-footer-cell-background": "dt('treetable.footer.cell.background')",
    "--p-treetable-column-resizer-width": "dt('treetable.column.resizer.width')",
    "--p-treetable-header-cell-gap": "dt('treetable.header.cell.gap')",
    "--p-treetable-resize-indicator-width": "dt('treetable.resize.indicator.width')",
    "--p-treetable-resize-indicator-color": "dt('treetable.resize.indicator.color')",
    "--p-treetable-paginator-top-border-color": "dt('treetable.paginator.top.border.color')",
    "--p-treetable-paginator-top-border-width": "dt('treetable.paginator.top.border.width')",
    "--p-treetable-paginator-bottom-border-color": "dt('treetable.paginator.bottom.border.color')",
    "--p-treetable-paginator-bottom-border-width": "dt('treetable.paginator.bottom.border.width')",
    "--p-treetable-header-background": "dt('treetable.header.background')",
    "--p-treetable-header-color": "dt('treetable.header.color')",
    "--p-treetable-header-border-color": "dt('treetable.header.border.color')",
    "--p-treetable-header-border-width": "dt('treetable.header.border.width')",
    "--p-treetable-header-padding": "dt('treetable.header.padding')",
    "--p-treetable-footer-background": "dt('treetable.footer.background')",
    "--p-treetable-footer-color": "dt('treetable.footer.color')",
    "--p-treetable-footer-border-color": "dt('treetable.footer.border.color')",
    "--p-treetable-footer-border-width": "dt('treetable.footer.border.width')",
    "--p-treetable-footer-padding": "dt('treetable.footer.padding')",
    "--p-treetable-header-cell-padding": "dt('treetable.header.cell.padding')",
    "--p-treetable-header-cell-border-color": "dt('treetable.header.cell.border.color')",
    "--p-treetable-header-cell-color": "dt('treetable.header.cell.color')",
    "--p-treetable-transition-duration": "dt('treetable.transition.duration')",
    "--p-treetable-column-title-font-weight": "dt('treetable.column.title.font.weight')",
    "--p-treetable-row-background": "dt('treetable.row.background')",
    "--p-treetable-row-color": "dt('treetable.row.color')",
    "--p-treetable-body-cell-border-color": "dt('treetable.body.cell.border.color')",
    "--p-treetable-body-cell-padding": "dt('treetable.body.cell.padding')",
    "--p-treetable-row-hover-background": "dt('treetable.row.hover.background')",
    "--p-treetable-row-hover-color": "dt('treetable.row.hover.color')",
    "--p-treetable-row-selected-background": "dt('treetable.row.selected.background')",
    "--p-treetable-row-selected-color": "dt('treetable.row.selected.color')",
    "--p-treetable-body-cell-selected-border-color": "dt('treetable.body.cell.selected.border.color')",
    "--p-treetable-row-focus-ring-shadow": "dt('treetable.row.focus.ring.shadow')",
    "--p-treetable-row-focus-ring-width": "dt('treetable.row.focus.ring.width')",
    "--p-treetable-row-focus-ring-style": "dt('treetable.row.focus.ring.style')",
    "--p-treetable-row-focus-ring-color": "dt('treetable.row.focus.ring.color')",
    "--p-treetable-row-focus-ring-offset": "dt('treetable.row.focus.ring.offset')",
    "--p-treetable-footer-cell-padding": "dt('treetable.footer.cell.padding')",
    "--p-treetable-footer-cell-border-color": "dt('treetable.footer.cell.border.color')",
    "--p-treetable-footer-cell-color": "dt('treetable.footer.cell.color')",
    "--p-treetable-column-footer-font-weight": "dt('treetable.column.footer.font.weight')",
    "--p-treetable-sort-icon-color": "dt('treetable.sort.icon.color')",
    "--p-treetable-sort-icon-size": "dt('treetable.sort.icon.size')",
    "--p-treetable-header-cell-hover-background": "dt('treetable.header.cell.hover.background')",
    "--p-treetable-header-cell-hover-color": "dt('treetable.header.cell.hover.color')",
    "--p-treetable-sort-icon-hover-color": "dt('treetable.sort.icon.hover.color')",
    "--p-treetable-header-cell-selected-background": "dt('treetable.header.cell.selected.background')",
    "--p-treetable-header-cell-selected-color": "dt('treetable.header.cell.selected.color')",
    "--p-treetable-header-cell-focus-ring-shadow": "dt('treetable.header.cell.focus.ring.shadow')",
    "--p-treetable-header-cell-focus-ring-width": "dt('treetable.header.cell.focus.ring.width')",
    "--p-treetable-header-cell-focus-ring-style": "dt('treetable.header.cell.focus.ring.style')",
    "--p-treetable-header-cell-focus-ring-color": "dt('treetable.header.cell.focus.ring.color')",
    "--p-treetable-header-cell-focus-ring-offset": "dt('treetable.header.cell.focus.ring.offset')",
    "--p-treetable-loading-icon-size": "dt('treetable.loading.icon.size')",
    "--p-treetable-body-cell-gap": "dt('treetable.body.cell.gap')",
    "--p-treetable-node-toggle-button-size": "dt('treetable.node.toggle.button.size')",
    "--p-treetable-node-toggle-button-color": "dt('treetable.node.toggle.button.color')",
    "--p-treetable-node-toggle-button-border-radius": "dt('treetable.node.toggle.button.border.radius')",
    "--p-treetable-node-toggle-button-hover-color": "dt('treetable.node.toggle.button.hover.color')",
    "--p-treetable-node-toggle-button-hover-background": "dt('treetable.node.toggle.button.hover.background')",
    "--p-treetable-node-toggle-button-selected-hover-background": "dt('treetable.node.toggle.button.selected.hover.background')",
    "--p-treetable-node-toggle-button-selected-hover-color": "dt('treetable.node.toggle.button.selected.hover.color')",
    "--p-treetable-node-toggle-button-focus-ring-shadow": "dt('treetable.node.toggle.button.focus.ring.shadow')",
    "--p-treetable-node-toggle-button-focus-ring-width": "dt('treetable.node.toggle.button.focus.ring.width')",
    "--p-treetable-node-toggle-button-focus-ring-style": "dt('treetable.node.toggle.button.focus.ring.style')",
    "--p-treetable-node-toggle-button-focus-ring-color": "dt('treetable.node.toggle.button.focus.ring.color')",
    "--p-treetable-node-toggle-button-focus-ring-offset": "dt('treetable.node.toggle.button.focus.ring.offset')",
    "--p-virtualscroller-loader-mask-background": "dt('virtualscroller.loader.mask.background')",
    "--p-virtualscroller-loader-mask-color": "dt('virtualscroller.loader.mask.color')",
    "--p-virtualscroller-loader-icon-size": "dt('virtualscroller.loader.icon.size')",
    "--p-)a-push(n),n+=2;else if(e[n]===": "dt(')a.push(n),n+=2;else if(e[n]===')"
  }
}